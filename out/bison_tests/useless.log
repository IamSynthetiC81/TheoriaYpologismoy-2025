Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 181):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEFMACRO
Next token is token KW_DEFMACRO ()
Shifting token KW_DEFMACRO ()
Entering state 4
Stack now 0 2 4
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 7
Stack now 0 2 4 7
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Shifting token OP_MINUS ()
Entering state 26
Stack now 0 2 4 7 26
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 4 7 26 20
Reducing stack by rule 84 (line 606):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 4 7 26 30
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 39
Stack now 0 2 4 7 26 39
Reducing stack by rule 76 (line 580):
   $1 = token OP_MINUS ()
   $2 = nterm expression ()
-> $$ = nterm expression ()
Entering state 28
Stack now 0 2 4 7 28
Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 195):
   $1 = token KW_DEFMACRO ()
   $2 = token IDENTIFIER ()
   $3 = nterm expression ()
Macro defined: N
Adding macro: N -> 100
Added macro: N -> 100
Total macros: 1
-> $$ = nterm macro_def ()
Entering state 5
Stack now 0 2 5
Reducing stack by rule 3 (line 182):
   $1 = nterm macro_def_list ()
   $2 = nterm macro_def ()
Macro definition: 
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Next token is token IDENTIFIER ()
Reducing stack by rule 5 (line 208):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Stack now 0 2 6 8
Reducing stack by rule 58 (line 522):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 36
Stack now 0 2 6 18 36
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 67
Stack now 0 2 6 18 36 67
Reducing stack by rule 59 (line 526):
   $1 = nterm ident_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 35
Stack now 0 2 6 18 35
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 18 35 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 66
Stack now 0 2 6 18 35 66
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 93
Stack now 0 2 6 18 35 66 93
Reducing stack by rule 12 (line 240):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: a, b of type int
-> $$ = nterm var_declaration ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 10 (line 229):
   $1 = nterm var_declaration ()
Variable declaration: int a, b;

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: cube
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 32
Stack now 0 2 6 10 32
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 58
Stack now 0 2 6 10 32 58
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Stack now 0 2 6 10 32 58 88
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 98
Stack now 0 2 6 10 32 58 88 98
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 32 58 88 98 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 112
Stack now 0 2 6 10 32 58 88 98 112
Reducing stack by rule 18 (line 299):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: i
-> $$ = nterm param_decl_list ()
Entering state 90
Stack now 0 2 6 10 32 58 90
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 295):
   $1 = nterm param_decl_list ()
Param list int i
-> $$ = nterm param_list ()
Entering state 89
Stack now 0 2 6 10 32 58 89
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 32 58 89 99
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 114
Stack now 0 2 6 10 32 58 89 99 114
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 32 58 89 99 114 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 124
Stack now 0 2 6 10 32 58 89 99 114 124
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 151
Stack now 0 2 6 10 32 58 89 99 114 124 151
Reducing stack by rule 91 (line 624):
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 134
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 19
Reading a token
OP_MULT
Next token is token OP_MULT ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 30
Next token is token OP_MULT ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 162
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162
Next token is token OP_MULT ()
Shifting token OP_MULT ()
Entering state 52
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52 19
Reading a token
OP_MULT
Next token is token OP_MULT ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52 30
Next token is token OP_MULT ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 82
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52 82
Next token is token OP_MULT ()
Reducing stack by rule 63 (line 543):
   $1 = nterm expression ()
   $2 = token OP_MULT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 162
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162
Next token is token OP_MULT ()
Shifting token OP_MULT ()
Entering state 52
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52 30
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 82
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 52 82
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 543):
   $1 = nterm expression ()
   $2 = token OP_MULT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 162
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 172
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 172
Reducing stack by rule 39 (line 378):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: i * i * i
-> $$ = nterm return_stmt ()
Entering state 139
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 139
Reducing stack by rule 29 (line 345):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 174
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 174
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 174 180
Reducing stack by rule 14 (line 267):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: cube
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 219):
   $1 = nterm function ()
Function: int cube(int i) {
    return i * i * i;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int a, b;

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: add
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 32
Stack now 0 2 6 10 32
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 58
Stack now 0 2 6 10 32 58
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Stack now 0 2 6 10 32 58 88
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 98
Stack now 0 2 6 10 32 58 88 98
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 32 58 88 98 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 112
Stack now 0 2 6 10 32 58 88 98 112
Reducing stack by rule 18 (line 299):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: n
-> $$ = nterm param_decl_list ()
Entering state 90
Stack now 0 2 6 10 32 58 90
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 32 58 90 100
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 115
Stack now 0 2 6 10 32 58 90 100 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 125
Stack now 0 2 6 10 32 58 90 100 115 125
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 32 58 90 100 115 125 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 152
Stack now 0 2 6 10 32 58 90 100 115 125 152
Reducing stack by rule 19 (line 304):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: k
-> $$ = nterm param_decl_list ()
Entering state 90
Stack now 0 2 6 10 32 58 90
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 295):
   $1 = nterm param_decl_list ()
Param list int n, int k
-> $$ = nterm param_list ()
Entering state 89
Stack now 0 2 6 10 32 58 89
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 32 58 89 99
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 114
Stack now 0 2 6 10 32 58 89 99 114
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 32 58 89 99 114 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 124
Stack now 0 2 6 10 32 58 89 99 114 124
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 151
Stack now 0 2 6 10 32 58 89 99 114 124 151
Reducing stack by rule 91 (line 624):
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 58 (line 522):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 35
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 18 35
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 18 35 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 66
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 18 35 66
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 93
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 18 35 66 93
Reducing stack by rule 12 (line 240):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: j of type int
-> $$ = nterm var_declaration ()
Entering state 136
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 136
Reducing stack by rule 92 (line 625):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 154
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 27
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 19
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 30
Next token is token OP_MINUS ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 40
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40
Next token is token OP_MINUS ()
Shifting token OP_MINUS ()
Entering state 51
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40 51
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40 51 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40 51 30
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 81
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40 51 81
Next token is token RPAREN ()
Reducing stack by rule 62 (line 540):
   $1 = nterm expression ()
   $2 = token OP_MINUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 40
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 70
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 27 40 70
Reducing stack by rule 77 (line 581):
   $1 = token LPAREN ()
   $2 = nterm expression ()
   $3 = token RPAREN ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Shifting token OP_PLUS ()
Entering state 50
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50
Reading a token
IDENTIFIER: cube
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19 37
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19 37 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19 37 30
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 68
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19 37 68
Next token is token RPAREN ()
Reducing stack by rule 82 (line 596):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 19 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 29
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 29
Reducing stack by rule 88 (line 610):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 30
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 50 80
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 536):
   $1 = nterm expression ()
   $2 = token OP_PLUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 175
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 154 168 175
Reducing stack by rule 38 (line 366):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: j = N - n + cube(k);
-> $$ = nterm assignment_stmt ()
Entering state 138
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 138
Reducing stack by rule 28 (line 344):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
IDENTIFIER: writeInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 37
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 37 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 37 30
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 68
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 37 68
Next token is token RPAREN ()
Reducing stack by rule 82 (line 596):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 127 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 146
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 146
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 163
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 146 163
Reducing stack by rule 36 (line 352):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 134
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 30
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 162
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 172
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 134 162 172
Reducing stack by rule 39 (line 378):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: j
-> $$ = nterm return_stmt ()
Entering state 139
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 139
Reducing stack by rule 29 (line 345):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 167
Stack now 0 2 6 10 32 58 89 99 114 124 151 167
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 174
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 174
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 10 32 58 89 99 114 124 151 167 174 180
Reducing stack by rule 14 (line 267):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: add
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 219):
   $1 = nterm function ()
Function: int add(int n, int k) {
    int j;
    j = N - n + cube(k);
    writeInteger(j);
    return j;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int a, b;
int cube(int i) {
    return i * i * i;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 33
Stack now 0 2 6 10 33
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 59
Stack now 0 2 6 10 33 59
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 91
Stack now 0 2 6 10 33 59 91
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 101
Stack now 0 2 6 10 33 59 91 101
Reducing stack by rule 91 (line 624):
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 154
Stack now 0 2 6 10 33 59 91 101 116 127 154
Reading a token
IDENTIFIER: readInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 154 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 33 59 91 101 116 127 154 19 37
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 81 (line 595):
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 127 154 19 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 33 59 91 101 116 127 154 19 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 29
Stack now 0 2 6 10 33 59 91 101 116 127 154 29
Reducing stack by rule 88 (line 610):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 154 30
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 33 59 91 101 116 127 154 168
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 175
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 175
Reducing stack by rule 38 (line 366):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: a = readInteger();
-> $$ = nterm assignment_stmt ()
Entering state 138
Stack now 0 2 6 10 33 59 91 101 116 138
Reducing stack by rule 28 (line 344):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 154
Stack now 0 2 6 10 33 59 91 101 116 127 154
Reading a token
IDENTIFIER: readInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 154 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 33 59 91 101 116 127 154 19 37
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 81 (line 595):
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 127 154 19 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 33 59 91 101 116 127 154 19 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 29
Stack now 0 2 6 10 33 59 91 101 116 127 154 29
Reducing stack by rule 88 (line 610):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 154 30
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 33 59 91 101 116 127 154 168
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 175
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 175
Reducing stack by rule 38 (line 366):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: b = readInteger();
-> $$ = nterm assignment_stmt ()
Entering state 138
Stack now 0 2 6 10 33 59 91 101 116 138
Reducing stack by rule 28 (line 344):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: add
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 33 59 91 101 116 127 37
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 37 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 37 30
Next token is token COMMA ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 68
Stack now 0 2 6 10 33 59 91 101 116 127 37 68
Next token is token COMMA ()
Reducing stack by rule 82 (line 596):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 127 37 69
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 95
Stack now 0 2 6 10 33 59 91 101 116 127 37 69 95
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 37 69 95 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 37 69 95 30
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 110
Stack now 0 2 6 10 33 59 91 101 116 127 37 69 95 110
Next token is token RPAREN ()
Reducing stack by rule 83 (line 597):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 127 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 33 59 91 101 116 127 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 146
Stack now 0 2 6 10 33 59 91 101 116 146
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 163
Stack now 0 2 6 10 33 59 91 101 116 146 163
Reducing stack by rule 36 (line 352):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 133
Stack now 0 2 6 10 33 59 91 101 116 133
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 160
Stack now 0 2 6 10 33 59 91 101 116 133 160
Reducing stack by rule 20 (line 313):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 222):
   $1 = nterm main_function ()
Main function: int main() {
    a = readInteger();
    b = readInteger();
    add(a,b);
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int a, b;
int cube(int i) {
    return i * i * i;
}
int add(int n, int k) {
    int j;
    j = N - n + cube(k);
    writeInteger(j);
    return j;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 175):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
