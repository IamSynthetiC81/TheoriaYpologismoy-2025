Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 185):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEFMACRO
Next token is token KW_DEFMACRO ()
Shifting token KW_DEFMACRO ()
Entering state 4
Stack now 0 2 4
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 7
Stack now 0 2 4 7
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Shifting token OP_MINUS ()
Entering state 26
Stack now 0 2 4 7 26
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 4 7 26 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 4 7 26 31
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 41
Stack now 0 2 4 7 26 41
Reducing stack by rule 84 (line 653):
   $1 = token OP_MINUS ()
   $2 = nterm expression ()
-> $$ = nterm expression ()
Entering state 29
Stack now 0 2 4 7 29
Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 199):
   $1 = token KW_DEFMACRO ()
   $2 = token IDENTIFIER ()
   $3 = nterm expression ()
Macro defined: N
Adding macro: N -> 100
Added macro: N -> 100
Total macros: 1
-> $$ = nterm macro_def ()
Entering state 5
Stack now 0 2 5
Reducing stack by rule 3 (line 186):
   $1 = nterm macro_def_list ()
   $2 = nterm macro_def ()
Macro definition: 
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Next token is token IDENTIFIER ()
Reducing stack by rule 5 (line 212):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 38
Stack now 0 2 6 18 38
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 71
Stack now 0 2 6 18 38 71
Reducing stack by rule 67 (line 599):
   $1 = nterm ident_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 18 37
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 18 37 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: a, b of type int
-> $$ = nterm var_declaration ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 10 (line 233):
   $1 = nterm var_declaration ()
Variable declaration: int a, b;

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: cube
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 93 104 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: i
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list int i
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 94 105 121 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
OP_MULT
Next token is token OP_MULT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token OP_MULT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token OP_MULT ()
Shifting token OP_MULT ()
Entering state 55
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55 19
Reading a token
OP_MULT
Next token is token OP_MULT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55 31
Next token is token OP_MULT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 86
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55 86
Next token is token OP_MULT ()
Reducing stack by rule 71 (line 616):
   $1 = nterm expression ()
   $2 = token OP_MULT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token OP_MULT ()
Shifting token OP_MULT ()
Entering state 55
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 86
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 55 86
Next token is token SEMICOLON ()
Reducing stack by rule 71 (line 616):
   $1 = nterm expression ()
   $2 = token OP_MULT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: i * i * i
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: cube
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: int cube(int i) {
    return i * i * i;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int a, b;

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: add
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 93 104 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: n
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: k
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list int n, int k
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 94 105 121 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: j of type int
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 27
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 19
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 31
Next token is token OP_MINUS ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 42
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42
Next token is token OP_MINUS ()
Shifting token OP_MINUS ()
Entering state 54
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42 54
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42 54 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42 54 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 85
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42 54 85
Next token is token RPAREN ()
Reducing stack by rule 70 (line 613):
   $1 = nterm expression ()
   $2 = token OP_MINUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 42
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 74
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 27 42 74
Reducing stack by rule 85 (line 654):
   $1 = token LPAREN ()
   $2 = nterm expression ()
   $3 = token RPAREN ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Shifting token OP_PLUS ()
Entering state 53
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53
Reading a token
IDENTIFIER: cube
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19 39
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19 39 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19 39 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 53 84
Next token is token SEMICOLON ()
Reducing stack by rule 69 (line 609):
   $1 = nterm expression ()
   $2 = token OP_PLUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: j = N - n + cube(k);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: writeInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 39
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 39 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 39 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: j
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: add
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: int add(int n, int k) {
    int j;
    j = N - n + cube(k);
    writeInteger(j);
    return j;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int a, b;
int cube(int i) {
    return i * i * i;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 10 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 10 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 10 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 10 35 63 96 107
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: readInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 89 (line 673):
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: a = readInteger();
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: readInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 89 (line 673):
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: b = readInteger();
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: add
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 39 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 142
Stack now 0 2 6 10 35 63 96 107 123 142
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 173
Stack now 0 2 6 10 35 63 96 107 123 142 173
Reducing stack by rule 21 (line 326):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 226):
   $1 = nterm main_function ()
Main function: int main() {
    a = readInteger();
    b = readInteger();
    add(a,b);
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int a, b;
int cube(int i) {
    return i * i * i;
}
int add(int n, int k) {
    int j;
    j = N - n + cube(k);
    writeInteger(j);
    return j;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 179):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
