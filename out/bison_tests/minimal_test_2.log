Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 181):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 208):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 33
Stack now 0 2 6 10 33
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 59
Stack now 0 2 6 10 33 59
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 91
Stack now 0 2 6 10 33 59 91
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 101
Stack now 0 2 6 10 33 59 91 101
Reducing stack by rule 90 (line 621):
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_FOR
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 129
Stack now 0 2 6 10 33 59 91 101 116 129
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 156
Stack now 0 2 6 10 33 59 91 101 116 129 156
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 169
Stack now 0 2 6 10 33 59 91 101 116 129 156 169
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 176
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 20
Reducing stack by rule 83 (line 603):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 30
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 59 (line 532):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 181
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181
Next token is token COLON ()
Shifting token COLON ()
Entering state 185
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 19
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 86 (line 606):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 30
Next token is token RBRACKET ()
Reducing stack by rule 59 (line 532):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 191
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 195
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 198
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198
Reducing stack by rule 21 (line 326):
-> $$ = nterm stmt_list ()
Entering state 200
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 187
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 187
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 154
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 187 154
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 187 154 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 86 (line 606):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 187 154 30
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 532):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 167
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 187 154 167
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 174
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 187 154 167 174
Reducing stack by rule 38 (line 366):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: x = i;
-> $$ = nterm assignment_stmt ()
Entering state 138
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 138
Reducing stack by rule 28 (line 344):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 190
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 190
Reducing stack by rule 22 (line 327):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 200
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 202
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 202
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 203
Stack now 0 2 6 10 33 59 91 101 116 129 156 169 176 181 185 191 195 198 200 202 203
Reducing stack by rule 42 (line 413):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 141
Stack now 0 2 6 10 33 59 91 101 116 141
Reducing stack by rule 31 (line 347):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 92 (line 628):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 133
Stack now 0 2 6 10 33 59 91 101 116 133
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 160
Stack now 0 2 6 10 33 59 91 101 116 133 160
Reducing stack by rule 20 (line 313):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 222):
   $1 = nterm main_function ()
Main function: int main() {
    for (int i = 0; i < N; ++i) {
        x = i;
    }
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 175):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
