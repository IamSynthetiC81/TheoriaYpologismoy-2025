Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 181):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 203):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 9
Stack now 0 2 6 9
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 30
Stack now 0 2 6 9 30
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 55
Stack now 0 2 6 9 30 55
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 80
Stack now 0 2 6 9 30 55 80
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 89
Stack now 0 2 6 9 30 55 80 89
Reducing stack by rule 87 (line 616):
-> $$ = nterm block ()
Entering state 109
Stack now 0 2 6 9 30 55 80 89 109
Reading a token
KW_FOR
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 122
Stack now 0 2 6 9 30 55 80 89 109 122
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 150
Stack now 0 2 6 9 30 55 80 89 109 122 150
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 164
Stack now 0 2 6 9 30 55 80 89 109 122 150 164
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 172
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 17
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 17
Reducing stack by rule 80 (line 598):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 27
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 27
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 56 (line 527):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 177
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177
Next token is token COLON ()
Shifting token COLON ()
Entering state 181
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 16
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 16
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 83 (line 601):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 27
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 27
Next token is token RBRACKET ()
Reducing stack by rule 56 (line 527):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 187
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 191
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 194
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194
Reducing stack by rule 20 (line 321):
-> $$ = nterm stmt_list ()
Entering state 196
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 183
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 183
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 147
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 183 147
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 16
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 183 147 16
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 83 (line 601):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 27
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 183 147 27
Next token is token SEMICOLON ()
Reducing stack by rule 56 (line 527):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 161
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 183 147 161
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 169
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 183 147 161 169
Reducing stack by rule 37 (line 361):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: x = i;
-> $$ = nterm assignment_stmt ()
Entering state 131
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 131
Reducing stack by rule 27 (line 339):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 186
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 186
Reducing stack by rule 21 (line 322):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 196
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 198
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 198
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 199
Stack now 0 2 6 9 30 55 80 89 109 122 150 164 172 177 181 187 191 194 196 198 199
Reducing stack by rule 41 (line 408):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 134
Stack now 0 2 6 9 30 55 80 89 109 134
Reducing stack by rule 30 (line 342):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 130
Stack now 0 2 6 9 30 55 80 89 109 130
Reducing stack by rule 89 (line 623):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 109
Stack now 0 2 6 9 30 55 80 89 109
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 126
Stack now 0 2 6 9 30 55 80 89 109 126
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 154
Stack now 0 2 6 9 30 55 80 89 109 126 154
Reducing stack by rule 19 (line 308):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 8 (line 217):
   $1 = nterm main_function ()
Main function: int main() {
    for (int i = 0; i < N; ++i) {
        x = i;
    }
}

-> $$ = nterm top_level ()
Entering state 11
Stack now 0 2 6 11
Reducing stack by rule 6 (line 204):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 175):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
