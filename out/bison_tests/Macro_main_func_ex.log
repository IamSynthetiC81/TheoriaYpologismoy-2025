Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 185):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEFMACRO
Next token is token KW_DEFMACRO ()
Shifting token KW_DEFMACRO ()
Entering state 4
Stack now 0 2 4
Reading a token
IDENTIFIER: pi
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 7
Stack now 0 2 4 7
Reading a token
CONST_FLOAT: 3.14
Next token is token CONST_FLOAT ()
Shifting token CONST_FLOAT ()
Entering state 21
Stack now 0 2 4 7 21
Reducing stack by rule 93 (line 685):
   $1 = token CONST_FLOAT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 4 7 31
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 29
Stack now 0 2 4 7 29
Next token is token KW_DEF ()
Reducing stack by rule 4 (line 199):
   $1 = token KW_DEFMACRO ()
   $2 = token IDENTIFIER ()
   $3 = nterm expression ()
Macro defined: pi
Adding macro: pi -> 3.14
Added macro: pi -> 3.14
Total macros: 1
-> $$ = nterm macro_def ()
Entering state 5
Stack now 0 2 5
Reducing stack by rule 3 (line 186):
   $1 = nterm macro_def_list ()
   $2 = nterm macro_def ()
Macro definition: 
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 212):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 10 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 10 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 10 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 10 35 63 96 107
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 10 35 63 96 107 123 18 37 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: x of type float
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 10 35 63 96 107 123 18 37 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: y of type float
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token OP_PLUS ()
Shifting token OP_PLUS ()
Entering state 53
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 53
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 53 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 53 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 53 84
Next token is token SEMICOLON ()
Reducing stack by rule 69 (line 609):
   $1 = nterm expression ()
   $2 = token OP_PLUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: x = 1 + 2;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
OP_MULT
Next token is token OP_MULT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Next token is token OP_MULT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token OP_MULT ()
Shifting token OP_MULT ()
Entering state 55
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 55
Reading a token
IDENTIFIER: pi
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 55 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 55 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 86
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 55 86
Next token is token SEMICOLON ()
Reducing stack by rule 71 (line 616):
   $1 = nterm expression ()
   $2 = token OP_MULT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: y = x * pi;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 137
Stack now 0 2 6 10 35 63 96 107 123 137
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 168
Stack now 0 2 6 10 35 63 96 107 123 137 168
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 137 168 19
Reading a token
OP_GT
Next token is token OP_GT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 137 168 31
Next token is token OP_GT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 35 63 96 107 123 137 168 189
Next token is token OP_GT ()
Shifting token OP_GT ()
Entering state 51
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 51
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 51 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 51 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 82
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 51 82
Next token is token RPAREN ()
Reducing stack by rule 79 (line 640):
   $1 = nterm expression ()
   $2 = token OP_GT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 35 63 96 107 123 137 168 189
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 202
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 212
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 227 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221
Reading a token
KW_ELSE
Next token is token KW_ELSE ()
Shifting token KW_ELSE ()
Entering state 228
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 237
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 227 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
Shifting token KW_ENDIF ()
Entering state 247
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 247
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 251
Stack now 0 2 6 10 35 63 96 107 123 137 168 189 202 212 221 228 237 243 247 251
Reducing stack by rule 50 (line 469):
   $1 = token KW_IF ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ELSE ()
   $8 = token COLON ()
   $9 = nterm stmt_list ()
   $10 = token KW_ENDIF ()
   $11 = token SEMICOLON ()
If-else statement: x > 1
-> $$ = nterm if_stmt ()
Entering state 150
Stack now 0 2 6 10 35 63 96 107 123 150
Reducing stack by rule 31 (line 359):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 35 63 96 107 123 143
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 174
Stack now 0 2 6 10 35 63 96 107 123 143 174
Reducing stack by rule 48 (line 452):
   $1 = token KW_RETURN ()
   $2 = token SEMICOLON ()
Returning void
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 35 63 96 107 123 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 142
Stack now 0 2 6 10 35 63 96 107 123 142
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 173
Stack now 0 2 6 10 35 63 96 107 123 142 173
Reducing stack by rule 21 (line 326):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 226):
   $1 = nterm main_function ()
Main function: int main() {
    float x;
    float y;
    x = 1 + 2;
    y = x * pi;
    if (x > 1) {
        writeStr("x is bigger\n");
    } else {
        writeStr("x is not bigger\n");
    }
    return;
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 179):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
