Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 181):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEFMACRO
Next token is token KW_DEFMACRO ()
Shifting token KW_DEFMACRO ()
Entering state 4
Stack now 0 2 4
Reading a token
IDENTIFIER: pi
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 7
Stack now 0 2 4 7
Reading a token
CONST_FLOAT: 3.14
Next token is token CONST_FLOAT ()
Shifting token CONST_FLOAT ()
Entering state 21
Stack now 0 2 4 7 21
Reducing stack by rule 85 (line 607):
   $1 = token CONST_FLOAT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 4 7 30
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 28
Stack now 0 2 4 7 28
Next token is token KW_DEF ()
Reducing stack by rule 4 (line 195):
   $1 = token KW_DEFMACRO ()
   $2 = token IDENTIFIER ()
   $3 = nterm expression ()
Macro defined: pi
Adding macro: pi -> 3.14
Added macro: pi -> 3.14
Total macros: 1
-> $$ = nterm macro_def ()
Entering state 5
Stack now 0 2 5
Reducing stack by rule 3 (line 182):
   $1 = nterm macro_def_list ()
   $2 = nterm macro_def ()
Macro definition: 
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 208):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 33
Stack now 0 2 6 10 33
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 59
Stack now 0 2 6 10 33 59
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 91
Stack now 0 2 6 10 33 59 91
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 101
Stack now 0 2 6 10 33 59 91 101
Reducing stack by rule 91 (line 624):
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 58 (line 522):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 33 59 91 101 116 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 35
Stack now 0 2 6 10 33 59 91 101 116 18 35
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 63
Stack now 0 2 6 10 33 59 91 101 116 18 35 63
Reducing stack by rule 24 (line 337):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 66
Stack now 0 2 6 10 33 59 91 101 116 18 35 66
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 93
Stack now 0 2 6 10 33 59 91 101 116 18 35 66 93
Reducing stack by rule 12 (line 240):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: x of type float
-> $$ = nterm var_declaration ()
Entering state 136
Stack now 0 2 6 10 33 59 91 101 116 136
Reducing stack by rule 92 (line 625):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 58 (line 522):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 33 59 91 101 116 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 35
Stack now 0 2 6 10 33 59 91 101 116 18 35
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 63
Stack now 0 2 6 10 33 59 91 101 116 18 35 63
Reducing stack by rule 24 (line 337):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 66
Stack now 0 2 6 10 33 59 91 101 116 18 35 66
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 93
Stack now 0 2 6 10 33 59 91 101 116 18 35 66 93
Reducing stack by rule 12 (line 240):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: y of type float
-> $$ = nterm var_declaration ()
Entering state 136
Stack now 0 2 6 10 33 59 91 101 116 136
Reducing stack by rule 92 (line 625):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 154
Stack now 0 2 6 10 33 59 91 101 116 127 154
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 33 59 91 101 116 127 154 20
Reducing stack by rule 84 (line 606):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 154 30
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 33 59 91 101 116 127 154 168
Next token is token OP_PLUS ()
Shifting token OP_PLUS ()
Entering state 50
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 50
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 50 20
Reducing stack by rule 84 (line 606):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 50 30
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 50 80
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 536):
   $1 = nterm expression ()
   $2 = token OP_PLUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 33 59 91 101 116 127 154 168
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 175
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 175
Reducing stack by rule 38 (line 366):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: x = 1 + 2;
-> $$ = nterm assignment_stmt ()
Entering state 138
Stack now 0 2 6 10 33 59 91 101 116 138
Reducing stack by rule 28 (line 344):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: y
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 154
Stack now 0 2 6 10 33 59 91 101 116 127 154
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 154 19
Reading a token
OP_MULT
Next token is token OP_MULT ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 154 30
Next token is token OP_MULT ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 33 59 91 101 116 127 154 168
Next token is token OP_MULT ()
Shifting token OP_MULT ()
Entering state 52
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 52
Reading a token
IDENTIFIER: pi
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 52 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 52 30
Next token is token SEMICOLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 82
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 52 82
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 543):
   $1 = nterm expression ()
   $2 = token OP_MULT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 168
Stack now 0 2 6 10 33 59 91 101 116 127 154 168
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 175
Stack now 0 2 6 10 33 59 91 101 116 127 154 168 175
Reducing stack by rule 38 (line 366):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: y = x * pi;
-> $$ = nterm assignment_stmt ()
Entering state 138
Stack now 0 2 6 10 33 59 91 101 116 138
Reducing stack by rule 28 (line 344):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 128
Stack now 0 2 6 10 33 59 91 101 116 128
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 155
Stack now 0 2 6 10 33 59 91 101 116 128 155
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 128 155 19
Reading a token
OP_GT
Next token is token OP_GT ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 128 155 30
Next token is token OP_GT ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 169
Stack now 0 2 6 10 33 59 91 101 116 128 155 169
Next token is token OP_GT ()
Shifting token OP_GT ()
Entering state 48
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 48
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 48 20
Reducing stack by rule 84 (line 606):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 48 30
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 78
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 48 78
Next token is token RPAREN ()
Reducing stack by rule 71 (line 567):
   $1 = nterm expression ()
   $2 = token OP_GT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 169
Stack now 0 2 6 10 33 59 91 101 116 128 155 169
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 176
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 181
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181
Reducing stack by rule 21 (line 326):
-> $$ = nterm stmt_list ()
Entering state 185
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 188
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188 37
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188 37 22
Reducing stack by rule 86 (line 608):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188 37 30
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 68
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188 37 68
Next token is token RPAREN ()
Reducing stack by rule 82 (line 596):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 188 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 146
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 146
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 163
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 146 163
Reducing stack by rule 36 (line 352):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 191
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 191
Reducing stack by rule 22 (line 327):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 185
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185
Reading a token
KW_ELSE
Next token is token KW_ELSE ()
Shifting token KW_ELSE ()
Entering state 189
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 194
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194
Reducing stack by rule 21 (line 326):
-> $$ = nterm stmt_list ()
Entering state 198
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 188
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188 37
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188 37 22
Reducing stack by rule 86 (line 608):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188 37 30
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 68
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188 37 68
Next token is token RPAREN ()
Reducing stack by rule 82 (line 596):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 188 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 146
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 146
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 163
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 146 163
Reducing stack by rule 36 (line 352):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 191
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 191
Reducing stack by rule 22 (line 327):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 198
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
Shifting token KW_ENDIF ()
Entering state 200
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 200
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 202
Stack now 0 2 6 10 33 59 91 101 116 128 155 169 176 181 185 189 194 198 200 202
Reducing stack by rule 42 (line 401):
   $1 = token KW_IF ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ELSE ()
   $8 = token COLON ()
   $9 = nterm stmt_list ()
   $10 = token KW_ENDIF ()
   $11 = token SEMICOLON ()
If-else statement: x > 1
-> $$ = nterm if_stmt ()
Entering state 140
Stack now 0 2 6 10 33 59 91 101 116 140
Reducing stack by rule 30 (line 346):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 134
Stack now 0 2 6 10 33 59 91 101 116 134
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 161
Stack now 0 2 6 10 33 59 91 101 116 134 161
Reducing stack by rule 40 (line 384):
   $1 = token KW_RETURN ()
   $2 = token SEMICOLON ()
Returning void
-> $$ = nterm return_stmt ()
Entering state 139
Stack now 0 2 6 10 33 59 91 101 116 139
Reducing stack by rule 29 (line 345):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 133
Stack now 0 2 6 10 33 59 91 101 116 133
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 160
Stack now 0 2 6 10 33 59 91 101 116 133 160
Reducing stack by rule 20 (line 313):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 222):
   $1 = nterm main_function ()
Main function: int main() {
    float x;
    float y;
    x = 1 + 2;
    y = x * pi;
    if (x > 1) {
        writeStr("x is bigger\n");
    } else {
        writeStr("x is not bigger\n");
    }
    return;
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 175):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
