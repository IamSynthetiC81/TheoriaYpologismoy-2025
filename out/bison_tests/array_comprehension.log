Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 185):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_CONST
Next token is token KW_CONST ()
Reducing stack by rule 5 (line 212):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_CONST ()
Shifting token KW_CONST ()
Entering state 9
Stack now 0 2 6 9
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 33
Stack now 0 2 6 9 33
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 61
Stack now 0 2 6 9 33 61
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 9 33 61 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 9 33 61 31
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 92
Stack now 0 2 6 9 33 61 92
Next token is token COLON ()
Shifting token COLON ()
Entering state 103
Stack now 0 2 6 9 33 61 92 103
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 9 33 61 92 103 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 118
Stack now 0 2 6 9 33 61 92 103 118
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 131
Stack now 0 2 6 9 33 61 92 103 118 131
Reducing stack by rule 14 (line 266):
   $1 = token KW_CONST ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token COLON ()
   $6 = nterm type ()
   $7 = token SEMICOLON ()
Constant declaration: N = 100
-> $$ = nterm const_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 11 (line 237):
   $1 = nterm const_declaration ()
Constant declaration: const int N = 100;

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Stack now 0 2 6 8
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 32
Stack now 0 2 6 8 32
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 60
Stack now 0 2 6 8 32 60
Reading a token
RBRACKET
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 91
Stack now 0 2 6 8 32 60 91
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 102
Stack now 0 2 6 8 32 60 91 102
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 8 32 60 91 102 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 117
Stack now 0 2 6 8 32 60 91 102 117
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 130
Stack now 0 2 6 8 32 60 91 102 117 130
Reducing stack by rule 13 (line 253):
   $1 = token IDENTIFIER ()
   $2 = token LBRACKET ()
   $3 = token CONST_INT ()
   $4 = token RBRACKET ()
   $5 = token COLON ()
   $6 = nterm type ()
   $7 = token SEMICOLON ()
-> $$ = nterm var_declaration ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 10 (line 233):
   $1 = nterm var_declaration ()
Variable declaration: int a[100];

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: const int N = 100;

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 10 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 10 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 10 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 10 35 63 96 107
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_FOR
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 138
Stack now 0 2 6 10 35 63 96 107 123 138
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 169
Stack now 0 2 6 10 35 63 96 107 123 138 169
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 190
Stack now 0 2 6 10 35 63 96 107 123 138 169 190
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 203
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 31
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 213
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213
Next token is token COLON ()
Shifting token COLON ()
Entering state 222
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 19
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 31
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 231
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 239
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 244
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 236
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 19
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 31
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 188
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 201
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188 201
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 211
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188 201 211
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188 201 211 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188 201 211 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 220
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188 201 211 220
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 226
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 227 236 188 201 211 220 226
Reducing stack by rule 41 (line 395):
   $1 = token IDENTIFIER ()
   $2 = token LBRACKET ()
   $3 = nterm expression ()
   $4 = token RBRACKET ()
   $5 = token OP_ASSIGN ()
   $6 = nterm expression ()
   $7 = token SEMICOLON ()
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 252
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 252
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 255
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 239 244 248 252 255
Reducing stack by rule 51 (line 484):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 151
Stack now 0 2 6 10 35 63 96 107 123 151
Reducing stack by rule 32 (line 360):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: half
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_DEFINE
Next token is token OP_DEFINE ()
Shifting token OP_DEFINE ()
Entering state 166
Stack now 0 2 6 10 35 63 96 107 123 136 166
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 185
Stack now 0 2 6 10 35 63 96 107 123 136 166 185
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 19
Reading a token
OP_DIV
Next token is token OP_DIV ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 31
Next token is token OP_DIV ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 198
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198
Next token is token OP_DIV ()
Shifting token OP_DIV ()
Entering state 56
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 56
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 56 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 56 31
Reading a token
KW_FOR
Next token is token KW_FOR ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 87
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 56 87
Next token is token KW_FOR ()
Reducing stack by rule 72 (line 619):
   $1 = nterm expression ()
   $2 = token OP_DIV ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 198
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 209
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 218
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 225
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 235
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 242
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 246
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246
Reading a token
KW_OF
Next token is token KW_OF ()
Shifting token KW_OF ()
Entering state 250
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 254
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250 254
Reading a token
RBRACKET
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 256
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250 254 256
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 257
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250 254 256 257
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250 254 256 257 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 258
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250 254 256 257 258
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 259
Stack now 0 2 6 10 35 63 96 107 123 136 166 185 198 209 218 225 235 242 246 250 254 256 257 258 259
Reducing stack by rule 46 (line 431):
   $1 = token IDENTIFIER ()
   $2 = token OP_DEFINE ()
   $3 = token LBRACKET ()
   $4 = nterm expression ()
   $5 = token KW_FOR ()
   $6 = token IDENTIFIER ()
   $7 = token COLON ()
   $8 = nterm type ()
   $9 = token KW_IN ()
   $10 = token IDENTIFIER ()
   $11 = token KW_OF ()
   $12 = token CONST_INT ()
   $13 = token RBRACKET ()
   $14 = token COLON ()
   $15 = nterm type ()
   $16 = token SEMICOLON ()
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 142
Stack now 0 2 6 10 35 63 96 107 123 142
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 173
Stack now 0 2 6 10 35 63 96 107 123 142 173
Reducing stack by rule 21 (line 326):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 226):
   $1 = nterm main_function ()
Main function: int main() {
    for (int i = 0; i < N; i++) {
    	a[i] = i;
    
    }
    float* half = (float*)malloc(100 * sizeof(float));
    for (int x = 0; x < 100; ++x) {
        half[x] = x / 2;
    }
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: const int N = 100;
int a[100];

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 179):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
