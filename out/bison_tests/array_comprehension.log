Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 181):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_CONST
Next token is token KW_CONST ()
Reducing stack by rule 5 (line 208):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_CONST ()
Shifting token KW_CONST ()
Entering state 9
Stack now 0 2 6 9
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 31
Stack now 0 2 6 9 31
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 57
Stack now 0 2 6 9 31 57
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 9 31 57 20
Reducing stack by rule 84 (line 606):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 9 31 57 30
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 87
Stack now 0 2 6 9 31 57 87
Next token is token COLON ()
Shifting token COLON ()
Entering state 97
Stack now 0 2 6 9 31 57 87 97
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 9 31 57 87 97 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 111
Stack now 0 2 6 9 31 57 87 97 111
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 122
Stack now 0 2 6 9 31 57 87 97 111 122
Reducing stack by rule 13 (line 253):
   $1 = token KW_CONST ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token COLON ()
   $6 = nterm type ()
   $7 = token SEMICOLON ()
Constant declaration: N = 100
-> $$ = nterm const_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 11 (line 233):
   $1 = nterm const_declaration ()
Constant declaration: const int N = 100;

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Stack now 0 2 6 8
Reducing stack by rule 58 (line 522):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Reading a token
LBRACKET
Next token is token LBRACKET ()
line 5: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6
Error: popping nterm top_level_list ()
Stack now 0 2
Error: popping nterm macro_def_list ()
Stack now 0
Cleanup: discarding lookahead token LBRACKET ()
Stack now 0
