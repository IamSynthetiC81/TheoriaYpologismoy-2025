Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 181):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 208):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 33
Stack now 0 2 6 10 33
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 59
Stack now 0 2 6 10 33 59
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 91
Stack now 0 2 6 10 33 59 91
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 101
Stack now 0 2 6 10 33 59 91 101
Reducing stack by rule 91 (line 624):
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 58 (line 522):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 33 59 91 101 116 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 35
Stack now 0 2 6 10 33 59 91 101 116 18 35
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 62
Stack now 0 2 6 10 33 59 91 101 116 18 35 62
Reducing stack by rule 23 (line 336):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 66
Stack now 0 2 6 10 33 59 91 101 116 18 35 66
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 93
Stack now 0 2 6 10 33 59 91 101 116 18 35 66 93
Reducing stack by rule 12 (line 240):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: x of type int
-> $$ = nterm var_declaration ()
Entering state 136
Stack now 0 2 6 10 33 59 91 101 116 136
Reducing stack by rule 92 (line 625):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
IDENTIFIER: writeInt
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 127
Stack now 0 2 6 10 33 59 91 101 116 127
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 37
Stack now 0 2 6 10 33 59 91 101 116 127 37
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 33 59 91 101 116 127 37 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 87 (line 609):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 59 91 101 116 127 37 30
Next token is token RPAREN ()
Reducing stack by rule 60 (line 535):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 68
Stack now 0 2 6 10 33 59 91 101 116 127 37 68
Next token is token RPAREN ()
Reducing stack by rule 82 (line 596):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 69
Stack now 0 2 6 10 33 59 91 101 116 127 37 69
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 94
Stack now 0 2 6 10 33 59 91 101 116 127 37 69 94
Reducing stack by rule 80 (line 587):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 146
Stack now 0 2 6 10 33 59 91 101 116 146
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 163
Stack now 0 2 6 10 33 59 91 101 116 146 163
Reducing stack by rule 36 (line 352):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 137
Stack now 0 2 6 10 33 59 91 101 116 137
Reducing stack by rule 93 (line 631):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 116
Stack now 0 2 6 10 33 59 91 101 116
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 133
Stack now 0 2 6 10 33 59 91 101 116 133
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 160
Stack now 0 2 6 10 33 59 91 101 116 133 160
Reducing stack by rule 20 (line 313):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 222):
   $1 = nterm main_function ()
Main function: int main() {
    int x;
    writeInt(x);
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 209):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 175):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
