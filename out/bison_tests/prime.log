Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 185):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
IDENTIFIER: limit
Next token is token IDENTIFIER ()
Reducing stack by rule 5 (line 212):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 38
Stack now 0 2 6 18 38
Reading a token
IDENTIFIER: num
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 71
Stack now 0 2 6 18 38 71
Reducing stack by rule 67 (line 599):
   $1 = nterm ident_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 38
Stack now 0 2 6 18 38
Reading a token
IDENTIFIER: counter
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 71
Stack now 0 2 6 18 38 71
Reducing stack by rule 67 (line 599):
   $1 = nterm ident_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 18 37
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 18 37 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: limit, num, counter of type int
-> $$ = nterm var_declaration ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 10 (line 233):
   $1 = nterm var_declaration ()
Variable declaration: int limit, num, counter;

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: prime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 93 104 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: n
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list int n
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
KW_BOOL
Next token is token KW_BOOL ()
Shifting token KW_BOOL ()
Entering state 69
Stack now 0 2 6 10 34 62 94 105 121 69
Reducing stack by rule 27 (line 352):
   $1 = token KW_BOOL ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: i of type int
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 38
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 38
Reading a token
IDENTIFIER: isPrime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 71
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 38 71
Reducing stack by rule 67 (line 599):
   $1 = nterm ident_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
KW_BOOL
Next token is token KW_BOOL ()
Shifting token KW_BOOL ()
Entering state 69
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 69
Reducing stack by rule 27 (line 352):
   $1 = token KW_BOOL ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: result, isPrime of type bool
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 137
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 168
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 19
Reading a token
OP_LT
Next token is token OP_LT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 31
Next token is token OP_LT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189
Next token is token OP_LT ()
Shifting token OP_LT ()
Entering state 49
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 49
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 49 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 49 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 49 80
Next token is token RPAREN ()
Reducing stack by rule 77 (line 634):
   $1 = nterm expression ()
   $2 = token OP_LT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 202
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 212
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165
Reading a token
IDENTIFIER: prime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Shifting token OP_MINUS ()
Entering state 26
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 26
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 26 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 26 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 41
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 26 41
Reducing stack by rule 84 (line 653):
   $1 = token OP_MINUS ()
   $2 = nterm expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: result = prime(n);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221
Reading a token
KW_ELSE
Next token is token KW_ELSE ()
Shifting token KW_ELSE ()
Entering state 228
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 237
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 137
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 168
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 19
Reading a token
OP_LT
Next token is token OP_LT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 31
Next token is token OP_LT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token OP_LT ()
Shifting token OP_LT ()
Entering state 49
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 49
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 49 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 49 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 49 80
Next token is token RPAREN ()
Reducing stack by rule 77 (line 634):
   $1 = nterm expression ()
   $2 = token OP_LT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 202
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 212
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165
Reading a token
CONST_BOOL_FALSE
Next token is token CONST_BOOL_FALSE ()
Shifting token CONST_BOOL_FALSE ()
Entering state 24
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 24
Reducing stack by rule 86 (line 655):
   $1 = token CONST_BOOL_FALSE ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 184
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: result = false;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221
Reading a token
KW_ELSE
Next token is token KW_ELSE ()
Shifting token KW_ELSE ()
Entering state 228
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 237
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 137
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 168
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 19
Reading a token
OP_EQ
Next token is token OP_EQ ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 31
Next token is token OP_EQ ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token OP_EQ ()
Shifting token OP_EQ ()
Entering state 47
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 78
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47 78
Next token is token RPAREN ()
Reducing stack by rule 75 (line 628):
   $1 = nterm expression ()
   $2 = token OP_EQ ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 202
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 212
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165
Reading a token
CONST_BOOL_TRUE
Next token is token CONST_BOOL_TRUE ()
Shifting token CONST_BOOL_TRUE ()
Entering state 23
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 23
Reducing stack by rule 87 (line 656):
   $1 = token CONST_BOOL_TRUE ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 184
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: result = true;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221
Reading a token
KW_ELSE
Next token is token KW_ELSE ()
Shifting token KW_ELSE ()
Entering state 228
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 237
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 137
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 168
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 19
Reading a token
OP_MOD
Next token is token OP_MOD ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 31
Next token is token OP_MOD ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token OP_MOD ()
Shifting token OP_MOD ()
Entering state 57
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 57
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 57 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 57 31
Reading a token
OP_EQ
Next token is token OP_EQ ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 57 88
Next token is token OP_EQ ()
Reducing stack by rule 73 (line 622):
   $1 = nterm expression ()
   $2 = token OP_MOD ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token OP_EQ ()
Shifting token OP_EQ ()
Entering state 47
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 78
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 47 78
Next token is token RPAREN ()
Reducing stack by rule 75 (line 628):
   $1 = nterm expression ()
   $2 = token OP_EQ ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 189
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 202
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 212
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165
Reading a token
CONST_BOOL_FALSE
Next token is token CONST_BOOL_FALSE ()
Shifting token CONST_BOOL_FALSE ()
Entering state 24
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 24
Reducing stack by rule 86 (line 655):
   $1 = token CONST_BOOL_FALSE ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 184
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: result = false;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 221
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221
Reading a token
KW_ELSE
Next token is token KW_ELSE ()
Shifting token KW_ELSE ()
Entering state 228
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 237
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165
Reading a token
CONST_INT: 3
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: i = 3;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
IDENTIFIER: isPrime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165
Reading a token
CONST_BOOL_TRUE
Next token is token CONST_BOOL_TRUE ()
Shifting token CONST_BOOL_TRUE ()
Entering state 23
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 23
Reducing stack by rule 87 (line 656):
   $1 = token CONST_BOOL_TRUE ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 184
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: isPrime = true;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
KW_WHILE
Next token is token KW_WHILE ()
Shifting token KW_WHILE ()
Entering state 139
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 170
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170
Reading a token
IDENTIFIER: isPrime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 19
Reading a token
KW_AND
Next token is token KW_AND ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 31
Next token is token KW_AND ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 191
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191
Next token is token KW_AND ()
Shifting token KW_AND ()
Entering state 44
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 27
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 19
Reading a token
OP_LT
Next token is token OP_LT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 31
Next token is token OP_LT ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 42
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42
Next token is token OP_LT ()
Shifting token OP_LT ()
Entering state 49
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 19
Reading a token
OP_DIV
Next token is token OP_DIV ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 31
Next token is token OP_DIV ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 80
Next token is token OP_DIV ()
Shifting token OP_DIV ()
Entering state 56
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 80 56
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 80 56 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 80 56 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 87
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 80 56 87
Next token is token RPAREN ()
Reducing stack by rule 72 (line 619):
   $1 = nterm expression ()
   $2 = token OP_DIV ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 49 80
Next token is token RPAREN ()
Reducing stack by rule 77 (line 634):
   $1 = nterm expression ()
   $2 = token OP_LT ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 42
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 74
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 27 42 74
Reducing stack by rule 85 (line 654):
   $1 = token LPAREN ()
   $2 = nterm expression ()
   $3 = token RPAREN ()
-> $$ = nterm expression ()
Entering state 75
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 44 75
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 81 (line 646):
   $1 = nterm expression ()
   $2 = token KW_AND ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 191
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 204
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 214
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 223
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223
Reading a token
IDENTIFIER: isPrime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 19
Reading a token
OP_MOD
Next token is token OP_MOD ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 31
Next token is token OP_MOD ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184
Next token is token OP_MOD ()
Shifting token OP_MOD ()
Entering state 57
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 57
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 57 19
Reading a token
OP_NEQ
Next token is token OP_NEQ ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 57 31
Next token is token OP_NEQ ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 57 88
Next token is token OP_NEQ ()
Reducing stack by rule 73 (line 622):
   $1 = nterm expression ()
   $2 = token OP_MOD ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184
Next token is token OP_NEQ ()
Shifting token OP_NEQ ()
Entering state 48
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 48
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 48 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 48 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 79
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 48 79
Next token is token SEMICOLON ()
Reducing stack by rule 76 (line 631):
   $1 = nterm expression ()
   $2 = token OP_NEQ ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: isPrime = n % i != 0;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 223
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 19
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 31
Next token is token OP_PLUS ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184
Next token is token OP_PLUS ()
Shifting token OP_PLUS ()
Entering state 53
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 53
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 53 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 53 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 53 84
Next token is token SEMICOLON ()
Reducing stack by rule 69 (line 609):
   $1 = nterm expression ()
   $2 = token OP_PLUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: i = i + 2;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 223
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223
Reading a token
KW_ENDWHILE
Next token is token KW_ENDWHILE ()
Shifting token KW_ENDWHILE ()
Entering state 232
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 232
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 240
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 139 170 191 204 214 223 232 240
Reducing stack by rule 52 (line 498):
   $1 = token KW_WHILE ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ENDWHILE ()
   $8 = token SEMICOLON ()
While loop: isPrime && i < n / 2
-> $$ = nterm while_stmt ()
Entering state 152
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 152
Reducing stack by rule 33 (line 361):
   $1 = nterm while_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 227
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165
Reading a token
IDENTIFIER: isPrime
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 227 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: result = isPrime;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
Shifting token KW_ENDIF ()
Entering state 247
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 247
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 251
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 247 251
Reducing stack by rule 50 (line 469):
   $1 = token KW_IF ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ELSE ()
   $8 = token COLON ()
   $9 = nterm stmt_list ()
   $10 = token KW_ENDIF ()
   $11 = token SEMICOLON ()
If-else statement: n % 2 == 0
-> $$ = nterm if_stmt ()
Entering state 150
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 150
Reducing stack by rule 31 (line 359):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
Shifting token KW_ENDIF ()
Entering state 247
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 247
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 251
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 247 251
Reducing stack by rule 50 (line 469):
   $1 = token KW_IF ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ELSE ()
   $8 = token COLON ()
   $9 = nterm stmt_list ()
   $10 = token KW_ENDIF ()
   $11 = token SEMICOLON ()
If-else statement: n == 2
-> $$ = nterm if_stmt ()
Entering state 150
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 150
Reducing stack by rule 31 (line 359):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
Shifting token KW_ENDIF ()
Entering state 247
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 247
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 251
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 137 168 189 202 212 221 228 237 243 247 251
Reducing stack by rule 50 (line 469):
   $1 = token KW_IF ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ELSE ()
   $8 = token COLON ()
   $9 = nterm stmt_list ()
   $10 = token KW_ENDIF ()
   $11 = token SEMICOLON ()
If-else statement: n < 2
-> $$ = nterm if_stmt ()
Entering state 150
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 150
Reducing stack by rule 31 (line 359):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 243
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
Shifting token KW_ENDIF ()
Entering state 247
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 247
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 251
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 137 168 189 202 212 221 228 237 243 247 251
Reducing stack by rule 50 (line 469):
   $1 = token KW_IF ()
   $2 = token LPAREN ()
   $3 = nterm expression ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm stmt_list ()
   $7 = token KW_ELSE ()
   $8 = token COLON ()
   $9 = nterm stmt_list ()
   $10 = token KW_ENDIF ()
   $11 = token SEMICOLON ()
If-else statement: n < 0
-> $$ = nterm if_stmt ()
Entering state 150
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 150
Reducing stack by rule 31 (line 359):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: result
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: result
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: prime
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: bool prime(int n) {
    int i;
    bool result, isPrime;
    if (n < 0) {
        result = prime(n);
    } else {
        if (n < 2) {
            result = false;
        } else {
            if (n == 2) {
                result = true;
            } else {
                if (n % 2 == 0) {
                    result = false;
                } else {
                    i = 3;
                    isPrime = true;
                    while (isPrime && i < n / 2) {
                        isPrime = n % i != 0;
                        i = i + 2;
                    }
                    result = isPrime;
                }
            }
        }
    }
    return result;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int limit, num, counter;

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 10 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 10 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 10 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 10 35 63 96 107
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: limit
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: readInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 89 (line 673):
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: limit = readInteger();
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 39 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: counter
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: counter = 1;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_FOR
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 138
Stack now 0 2 6 10 35 63 96 107 123 138
Reading a token
IDENTIFIER: num
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 169
Stack now 0 2 6 10 35 63 96 107 123 138 169
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 190
Stack now 0 2 6 10 35 63 96 107 123 138 169 190
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 203
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203
Reading a token
CONST_INT: 3
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 31
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 213
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213
Next token is token COLON ()
Shifting token COLON ()
Entering state 222
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222
Reading a token
IDENTIFIER: limit
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 19
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 31
Next token is token OP_PLUS ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 231
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231
Next token is token OP_PLUS ()
Shifting token OP_PLUS ()
Entering state 53
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 53
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 53 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 53 31
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231 53 84
Next token is token COLON ()
Reducing stack by rule 69 (line 609):
   $1 = nterm expression ()
   $2 = token OP_PLUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 231
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222 231
Next token is token COLON ()
line 44: syntax error
Error: popping nterm expression ()
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213 222
Error: popping token COLON ()
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203 213
Error: popping nterm expression ()
Stack now 0 2 6 10 35 63 96 107 123 138 169 190 203
Error: popping token LBRACKET ()
Stack now 0 2 6 10 35 63 96 107 123 138 169 190
Error: popping token KW_IN ()
Stack now 0 2 6 10 35 63 96 107 123 138 169
Error: popping token IDENTIFIER ()
Stack now 0 2 6 10 35 63 96 107 123 138
Error: popping token KW_FOR ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
KW_IF
Next token is token KW_IF ()
Error: discarding token KW_IF ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
LPAREN
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: prime
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
LPAREN
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: num
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: counter
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: counter
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Error: discarding token OP_PLUS ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 46: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
IDENTIFIER: num
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 39 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
line 49: syntax error
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token KW_ENDIF ()
Error: discarding token KW_ENDIF ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 49: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
line 50: syntax error
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token KW_ENDFOR ()
Error: discarding token KW_ENDFOR ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 50: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeInteger
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
IDENTIFIER: counter
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 39 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 142
Stack now 0 2 6 10 35 63 96 107 123 142
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 173
Stack now 0 2 6 10 35 63 96 107 123 142 173
Reducing stack by rule 21 (line 326):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 226):
   $1 = nterm main_function ()
Main function: int main() {
    limit = readInteger();
    writeInteger(2);
    writeStr(" ");
    counter = 1;
    /* ERROR */
    writeInteger(num);
    writeStr(" ");
    /* ERROR */
    /* ERROR */
    writeStr("\nThe total number of primes found is:");
    writeInteger(counter);
    writeStr("\n");
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: int limit, num, counter;
bool prime(int n) {
    int i;
    bool result, isPrime;
    if (n < 0) {
        result = prime(n);
    } else {
        if (n < 2) {
            result = false;
        } else {
            if (n == 2) {
                result = true;
            } else {
                if (n % 2 == 0) {
                    result = false;
                } else {
                    i = 3;
                    isPrime = true;
                    while (isPrime && i < n / 2) {
                        isPrime = n % i != 0;
                        i = i + 2;
                    }
                    result = isPrime;
                }
            }
        }
    }
    return result;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 179):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
