Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 185):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEFMACRO
Next token is token KW_DEFMACRO ()
Shifting token KW_DEFMACRO ()
Entering state 4
Stack now 0 2 4
Reading a token
IDENTIFIER: message
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 7
Stack now 0 2 4 7
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 4 7 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 4 7 31
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 29
Stack now 0 2 4 7 29
Next token is token KW_DEF ()
Reducing stack by rule 4 (line 199):
   $1 = token KW_DEFMACRO ()
   $2 = token IDENTIFIER ()
   $3 = nterm expression ()
Macro defined: message
Adding macro: message -> "Hello world!\n"
Added macro: message -> "Hello world!\n"
Total macros: 1
-> $$ = nterm macro_def ()
Entering state 5
Stack now 0 2 5
Reducing stack by rule 3 (line 186):
   $1 = nterm macro_def_list ()
   $2 = nterm macro_def ()
Macro definition: 
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 212):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 10 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 10 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 10 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 10 35 63 96 107
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
IDENTIFIER: message
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 39 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 10 35 63 96 107 123 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 10 35 63 96 107 123 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 142
Stack now 0 2 6 10 35 63 96 107 123 142
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 173
Stack now 0 2 6 10 35 63 96 107 123 142 173
Reducing stack by rule 21 (line 326):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 226):
   $1 = nterm main_function ()
Main function: int main() {
    writeStr(message);
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 179):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
