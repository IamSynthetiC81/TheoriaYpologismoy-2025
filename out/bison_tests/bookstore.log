Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 185):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_COMP
Next token is token KW_COMP ()
Reducing stack by rule 5 (line 212):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_COMP ()
Shifting token KW_COMP ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 36
Stack now 0 2 6 11 36
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 64
Stack now 0 2 6 11 36 64
Reducing stack by rule 57 (line 541):
-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: street
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 115 128 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: char* street;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: number
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int number;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: city
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 115 128 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: char* city;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: setAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
IDENTIFIER: s
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 36 64 97 109 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 11 36 64 97 109 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: s
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: n
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: c
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: c
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* s, int n, char* c
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: street
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: s
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: number
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: city
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: c
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: setAddress
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: printAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 306):
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
IDENTIFIER: write
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: street
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: number
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: city
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: printAddress
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_ENDCOMP
Next token is token KW_ENDCOMP ()
Shifting token KW_ENDCOMP ()
Entering state 110
Stack now 0 2 6 11 36 64 97 110
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 125
Stack now 0 2 6 11 36 64 97 110 125
Reducing stack by rule 56 (line 530):
   $1 = token KW_COMP ()
   $2 = token IDENTIFIER ()
   $3 = token COLON ()
   $4 = nterm component_body ()
   $5 = token KW_ENDCOMP ()
   $6 = token SEMICOLON ()
Component: Address
-> $$ = nterm component ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 9 (line 229):
   $1 = nterm component ()
Component: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_COMP
Next token is token KW_COMP ()
Shifting token KW_COMP ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 36
Stack now 0 2 6 11 36
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 64
Stack now 0 2 6 11 36 64
Reducing stack by rule 57 (line 541):
-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: firstName
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 129
Stack now 0 2 6 11 36 64 97 115 129
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 160
Stack now 0 2 6 11 36 64 97 115 129 160
Reading a token
IDENTIFIER: lastName
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Stack now 0 2 6 11 36 64 97 115 129 160 181
Reducing stack by rule 65 (line 586):
   $1 = nterm hash_ident_list ()
   $2 = token COMMA ()
   $3 = token HASH ()
   $4 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 115 128 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: char* firstName, lastName;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 115 128 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: char* email;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int phone;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 115 128 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: Address address;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: setPerson
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
IDENTIFIER: fn
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 36 64 97 109 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 11 36 64 97 109 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: fn
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: ln
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: ln
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: email
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: phone
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: addr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: addr
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* fn, char* ln, char* email, int phone, Address addr
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: firstName
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: fn
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: lastName
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: ln
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: addr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: setPerson
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: printPersonInfo
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 306):
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
IDENTIFIER: write
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: firstName
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: lastName
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 59
Reading a token
IDENTIFIER: printAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 33: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 33: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: printPersonInfo
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_ENDCOMP
Next token is token KW_ENDCOMP ()
Shifting token KW_ENDCOMP ()
Entering state 110
Stack now 0 2 6 11 36 64 97 110
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 125
Stack now 0 2 6 11 36 64 97 110 125
Reducing stack by rule 56 (line 530):
   $1 = token KW_COMP ()
   $2 = token IDENTIFIER ()
   $3 = token COLON ()
   $4 = nterm component_body ()
   $5 = token KW_ENDCOMP ()
   $6 = token SEMICOLON ()
Component: Person
-> $$ = nterm component ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 9 (line 229):
   $1 = nterm component ()
Component: struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_COMP
Next token is token KW_COMP ()
Shifting token KW_COMP ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 36
Stack now 0 2 6 11 36
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 64
Stack now 0 2 6 11 36 64
Reducing stack by rule 57 (line 541):
-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: title
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 129
Stack now 0 2 6 11 36 64 97 115 129
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 160
Stack now 0 2 6 11 36 64 97 115 129 160
Reading a token
IDENTIFIER: isbn
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Stack now 0 2 6 11 36 64 97 115 129 160 181
Reducing stack by rule 65 (line 586):
   $1 = nterm hash_ident_list ()
   $2 = token COMMA ()
   $3 = token HASH ()
   $4 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 115 128 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: char* title, isbn;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 115 128 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: Person author;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int numOfCopies;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 11 36 64 97 115 128 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: float price;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: setBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
IDENTIFIER: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 36 64 97 109 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 11 36 64 97 109 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: t
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: a
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: numOfCopies
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: price
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* t, Person a, int numOfCopies, float price
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: title
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: setBook
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: printBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 306):
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
IDENTIFIER: write
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: title
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 59
Reading a token
IDENTIFIER: printPersonInfo
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 54: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 54: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
IDENTIFIER: write
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
IDENTIFIER: write
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 136 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 156
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 177
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 156 177
Reducing stack by rule 37 (line 365):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: printBook
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_ENDCOMP
Next token is token KW_ENDCOMP ()
Shifting token KW_ENDCOMP ()
Entering state 110
Stack now 0 2 6 11 36 64 97 110
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 125
Stack now 0 2 6 11 36 64 97 110 125
Reducing stack by rule 56 (line 530):
   $1 = token KW_COMP ()
   $2 = token IDENTIFIER ()
   $3 = token COLON ()
   $4 = nterm component_body ()
   $5 = token KW_ENDCOMP ()
   $6 = token SEMICOLON ()
Component: Book
-> $$ = nterm component ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 9 (line 229):
   $1 = nterm component ()
Component: struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_COMP
Next token is token KW_COMP ()
Shifting token KW_COMP ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: Order
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 36
Stack now 0 2 6 11 36
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 64
Stack now 0 2 6 11 36 64
Reducing stack by rule 57 (line 541):
-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: orderNum
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int orderNum;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 115 128 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: Book book;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: quantity
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int quantity;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: shippingAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 115 128 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: Address shippingAddress;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: delivered
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_BOOL
Next token is token KW_BOOL ()
Shifting token KW_BOOL ()
Entering state 69
Stack now 0 2 6 11 36 64 97 115 128 69
Reducing stack by rule 27 (line 352):
   $1 = token KW_BOOL ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: bool delivered;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: setOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
IDENTIFIER: orNum
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 36 64 97 109 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 11 36 64 97 109 34 62 93 104
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: orNum
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: b
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: q
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: q
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: sh
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: sh
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 11 36 64 97 109 34 62 95 106
Reading a token
IDENTIFIER: del
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134
Reading a token
KW_BOOL
Next token is token KW_BOOL ()
Shifting token KW_BOOL ()
Entering state 69
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 69
Reducing stack by rule 27 (line 352):
   $1 = token KW_BOOL ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 11 36 64 97 109 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: del
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list int orNum, Book b, int q, Address sh, bool del
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: orderNum
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: orNum
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: quantity
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: q
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: shippingAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: sh
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: delivered
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 193
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193
Reading a token
IDENTIFIER: del
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 205
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 215
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176 193 205 215
Reducing stack by rule 38 (line 371):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: setOrder
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: printOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 306):
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 144
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 144
Reducing stack by rule 55 (line 523):
   $1 = token SEMICOLON ()
-> $$ = nterm empty_stmt ()
Entering state 155
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 155
Reducing stack by rule 36 (line 364):
   $1 = nterm empty_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: printOrder
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void printOrder() {
    ;;}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_ENDCOMP
Next token is token KW_ENDCOMP ()
Shifting token KW_ENDCOMP ()
Entering state 110
Stack now 0 2 6 11 36 64 97 110
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 125
Stack now 0 2 6 11 36 64 97 110 125
Reducing stack by rule 56 (line 530):
   $1 = token KW_COMP ()
   $2 = token IDENTIFIER ()
   $3 = token COLON ()
   $4 = nterm component_body ()
   $5 = token KW_ENDCOMP ()
   $6 = token SEMICOLON ()
Component: Order
-> $$ = nterm component ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 9 (line 229):
   $1 = nterm component ()
Component: struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_COMP
Next token is token KW_COMP ()
Shifting token KW_COMP ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: Bookstore
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 36
Stack now 0 2 6 11 36
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 64
Stack now 0 2 6 11 36 64
Reducing stack by rule 57 (line 541):
-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: name
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 11 36 64 97 115 128 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: char* name;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: listOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 127
Stack now 0 2 6 11 36 64 97 115 127
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 158
Stack now 0 2 6 11 36 64 97 115 127 158
Reading a token
RBRACKET
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 179
Stack now 0 2 6 11 36 64 97 115 127 158 179
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 195
Stack now 0 2 6 11 36 64 97 115 127 158 179 195
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 115 127 158 179 195 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 207
Stack now 0 2 6 11 36 64 97 115 127 158 179 195 207
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 217
Stack now 0 2 6 11 36 64 97 115 127 158 179 195 207 217
Reducing stack by rule 60 (line 560):
   $1 = nterm hash_ident_list ()
   $2 = token LBRACKET ()
   $3 = token CONST_INT ()
   $4 = token RBRACKET ()
   $5 = token COLON ()
   $6 = nterm type ()
   $7 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: Book listOfBooks[100];

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: numOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int numOfBooks;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: listOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 127
Stack now 0 2 6 11 36 64 97 115 127
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 158
Stack now 0 2 6 11 36 64 97 115 127 158
Reading a token
RBRACKET
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 179
Stack now 0 2 6 11 36 64 97 115 127 158 179
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 195
Stack now 0 2 6 11 36 64 97 115 127 158 179 195
Reading a token
IDENTIFIER: Order
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 115 127 158 179 195 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 207
Stack now 0 2 6 11 36 64 97 115 127 158 179 195 207
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 217
Stack now 0 2 6 11 36 64 97 115 127 158 179 195 207 217
Reducing stack by rule 60 (line 560):
   $1 = nterm hash_ident_list ()
   $2 = token LBRACKET ()
   $3 = token CONST_INT ()
   $4 = token RBRACKET ()
   $5 = token COLON ()
   $6 = nterm type ()
   $7 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: Order listOfOrders[100];

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 112
Stack now 0 2 6 11 36 64 97 112
Reading a token
IDENTIFIER: numOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 126
Stack now 0 2 6 11 36 64 97 112 126
Reducing stack by rule 64 (line 582):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm hash_ident_list ()
Entering state 115
Stack now 0 2 6 11 36 64 97 115
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 128
Stack now 0 2 6 11 36 64 97 115 128
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 36 64 97 115 128 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 159
Stack now 0 2 6 11 36 64 97 115 128 159
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 180
Stack now 0 2 6 11 36 64 97 115 128 159 180
Reducing stack by rule 59 (line 553):
   $1 = nterm hash_ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: int numOfOrders;

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: putOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
IDENTIFIER: o
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 36 64 97 109 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 11 36 64 97 109 34 62 93 104
Reading a token
IDENTIFIER: Order
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: o
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list Order o
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: listOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 178
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 28
Reading a token
IDENTIFIER: numOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 31
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 194
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 206
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 216
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216
Reading a token
IDENTIFIER: o
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 224
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 224
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 233
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 224 233
Reducing stack by rule 42 (line 401):
   $1 = nterm primary_expression ()
   $2 = token LBRACKET ()
   $3 = nterm expression ()
   $4 = token RBRACKET ()
   $5 = token OP_ASSIGN ()
   $6 = nterm expression ()
   $7 = token SEMICOLON ()
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: numOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_PLUSEQ
Next token is token OP_PLUSEQ ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Next token is token OP_PLUSEQ ()
line 90: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Next token is token OP_PLUSEQ ()
Error: discarding token OP_PLUSEQ ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 90: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: putOrder
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void putOrder(Order o) {
    listOfOrders/* ERROR */
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: addBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 36 64 97 109 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 11 36 64 97 109 34 62 93 104
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 11 36 64 97 109 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: b
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 11 36 64 97 109 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list Book b
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: listOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 178
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 28
Reading a token
IDENTIFIER: numOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 31
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 194
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 206
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 216
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 224
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 224
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 233
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157 178 194 206 216 224 233
Reducing stack by rule 42 (line 401):
   $1 = nterm primary_expression ()
   $2 = token LBRACKET ()
   $3 = nterm expression ()
   $4 = token RBRACKET ()
   $5 = token OP_ASSIGN ()
   $6 = nterm expression ()
   $7 = token SEMICOLON ()
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145
Reading a token
IDENTIFIER: numOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 145 176
Reading a token
OP_PLUSEQ
Next token is token OP_PLUSEQ ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 157
Next token is token OP_PLUSEQ ()
line 95: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Next token is token OP_PLUSEQ ()
Error: discarding token OP_PLUSEQ ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 95: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: addBook
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void addBook(Book b) {
    listOfBooks/* ERROR */
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: printBookStoreBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 306):
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 120
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_FOR
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 138
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 169
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 190
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 203
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 31
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 213
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213
Next token is token COLON ()
Shifting token COLON ()
Entering state 222
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 28
Reading a token
IDENTIFIER: numOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 31
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 231
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 239
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 244
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 145
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 145
Reading a token
IDENTIFIER: listOfBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 176
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 145 176
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 178
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 178
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 178 19
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 178 31
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 194
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 178 194
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 206
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 178 194 206
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 97 (line 690):
   $1 = nterm primary_expression ()
   $2 = token LBRACKET ()
   $3 = nterm expression ()
   $4 = token RBRACKET ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 59
Reading a token
IDENTIFIER: printBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 100: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 100: Invalid statement
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 252
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 252
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 255
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 138 169 190 203 213 222 231 239 244 248 252 255
Reducing stack by rule 51 (line 484):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 151
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 151
Reducing stack by rule 32 (line 360):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 132
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 161
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 182
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 120 132 161 182
Reducing stack by rule 16 (line 291):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token COLON ()
   $7 = nterm block ()
   $8 = token KW_ENDDEF ()
   $9 = token SEMICOLON ()
Function with no return: printBookStoreBooks
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 109
Stack now 0 2 6 11 36 64 97 109
Reading a token
IDENTIFIER: calculateTotalOrdersIncome
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 36 64 97 109 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 36 64 97 109 34 62
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 17 (line 306):
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 11 36 64 97 109 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 11 36 64 97 109 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: total
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 18 37
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 18 37 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: total of type float
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: total
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136 165
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136 165 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: total = 0;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183
Reading a token
KW_FOR
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 138
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 169
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 190
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 203
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 31
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 213
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213
Next token is token COLON ()
Shifting token COLON ()
Entering state 222
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 28
Reading a token
IDENTIFIER: numOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 31
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 231
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 239
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 244
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244
Reducing stack by rule 22 (line 339):
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Reading a token
KW_IF
Next token is token KW_IF ()
Shifting token KW_IF ()
Entering state 137
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 168
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168
Reading a token
HASH
Next token is token HASH ()
Shifting token HASH ()
Entering state 28
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 28
Reading a token
IDENTIFIER: listOfOrders
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 43
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 28 43
Reducing stack by rule 99 (line 698):
   $1 = token HASH ()
   $2 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 58
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31 58
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31 58 19
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31 58 31
Next token is token RBRACKET ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 89
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31 58 89
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 101
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31 58 89 101
Reducing stack by rule 97 (line 690):
   $1 = nterm primary_expression ()
   $2 = token LBRACKET ()
   $3 = nterm expression ()
   $4 = token RBRACKET ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31
Reading a token
DOT
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31 59
Reading a token
HASH
Next token is token HASH ()
line 109: syntax error
Error: popping token DOT ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168 31
Error: popping nterm primary_expression ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137 168
Error: popping token LPAREN ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 137
Error: popping token KW_IF ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: delivered
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: total
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: total
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Error: discarding token OP_PLUS ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
HASH
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: listOfOrders
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
DOT
Next token is token DOT ()
Error: discarding token DOT ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
HASH
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: quantity
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
OP_MULT
Next token is token OP_MULT ()
Error: discarding token OP_MULT ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
HASH
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: listOfOrders
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
DOT
Next token is token DOT ()
Error: discarding token DOT ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
HASH
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: book
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
DOT
Next token is token DOT ()
Error: discarding token DOT ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
HASH
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 110: Invalid statement
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
line 111: syntax error
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Next token is token KW_ENDIF ()
Error: discarding token KW_ENDIF ()
Error: popping token error ()
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Shifting token error ()
Entering state 135
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 111: Invalid statement
-> $$ = nterm stmt ()
Entering state 230
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 230
Reducing stack by rule 23 (line 340):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 248
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 252
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 252
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 255
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 138 169 190 203 213 222 231 239 244 248 252 255
Reducing stack by rule 51 (line 484):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 151
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 151
Reducing stack by rule 32 (line 360):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: total
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: total
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 11 36 64 97 109 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: calculateTotalOrdersIncome
-> $$ = nterm function ()
Entering state 113
Stack now 0 2 6 11 36 64 97 113
Reducing stack by rule 61 (line 568):
   $1 = nterm function ()
-> $$ = nterm component_member ()
Entering state 114
Stack now 0 2 6 11 36 64 97 114
Reducing stack by rule 58 (line 542):
   $1 = nterm component_body ()
   $2 = nterm component_member ()
Component member: float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}

-> $$ = nterm component_body ()
Entering state 97
Stack now 0 2 6 11 36 64 97
Reading a token
KW_ENDCOMP
Next token is token KW_ENDCOMP ()
Shifting token KW_ENDCOMP ()
Entering state 110
Stack now 0 2 6 11 36 64 97 110
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 125
Stack now 0 2 6 11 36 64 97 110 125
Reducing stack by rule 56 (line 530):
   $1 = token KW_COMP ()
   $2 = token IDENTIFIER ()
   $3 = token COLON ()
   $4 = nterm component_body ()
   $5 = token KW_ENDCOMP ()
   $6 = token SEMICOLON ()
Component: Bookstore
-> $$ = nterm component ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 9 (line 229):
   $1 = nterm component ()
Component: struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: orderId
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 18 37
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 18 37 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: orderId of type int
-> $$ = nterm var_declaration ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 10 (line 233):
   $1 = nterm var_declaration ()
Variable declaration: int orderId;

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: createAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: s
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: s
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: n
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: c
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 95 106 122 134 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: c
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* s, int n, char* c
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: a of type Address
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
IDENTIFIER: setAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 123: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: s
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: c
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 123: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: a
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: createAddress
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: Address createAddress(char* s, int n, char* c) {
    Address a;
    /* ERROR */
    return a;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};
int orderId;

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: createPerson
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: fn
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: fn
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: ln
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 95 106 122 134 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: ln
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 95 106 122 134 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: email
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: phone
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: addr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: addr
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* fn, char* ln, char* email, int phone, Address addr
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: p
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: p of type Person
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: p
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
IDENTIFIER: setPerson
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 129: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: fn
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: ln
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: email
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: phone
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: addr
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 129: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: p
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: p
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: createPerson
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: Person createPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    Person p;
    /* ERROR */
    return p;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};
int orderId;
Address createAddress(char* s, int n, char* c) {
    Address a;
    /* ERROR */
    return a;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: createBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: t
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: t
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: a
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: numOfCopies
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Shifting token KW_SCALAR ()
Entering state 67
Stack now 0 2 6 10 34 62 95 106 122 134 67
Reducing stack by rule 25 (line 350):
   $1 = token KW_SCALAR ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: price
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* t, Person a, int numOfCopies, float price
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: b of type Book
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
IDENTIFIER: setBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 135: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: t
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: numOfCopies
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: price
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 135: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: b
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: createBook
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: Book createBook(char* t, Person a, int numOfCopies, float price) {
    Book b;
    /* ERROR */
    return b;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};
int orderId;
Address createAddress(char* s, int n, char* c) {
    Address a;
    /* ERROR */
    return a;
}
Person createPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    Person p;
    /* ERROR */
    return p;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: createOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: orNum
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 93 104 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: orNum
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: b
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: q
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 34 62 95 106 122 134 66
Reducing stack by rule 24 (line 349):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: q
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: sh
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 95 106 122 134 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: sh
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
COMMA
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 106
Stack now 0 2 6 10 34 62 95 106
Reading a token
IDENTIFIER: del
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 122
Stack now 0 2 6 10 34 62 95 106 122
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 134
Stack now 0 2 6 10 34 62 95 106 122 134
Reading a token
KW_BOOL
Next token is token KW_BOOL ()
Shifting token KW_BOOL ()
Entering state 69
Stack now 0 2 6 10 34 62 95 106 122 134 69
Reducing stack by rule 27 (line 352):
   $1 = token KW_BOOL ()
-> $$ = nterm type ()
Entering state 163
Stack now 0 2 6 10 34 62 95 106 122 134 163
Reducing stack by rule 20 (line 316):
   $1 = nterm param_decl_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
   $4 = token COLON ()
   $5 = nterm type ()
Param: del
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list int orNum, Book b, int q, Address sh, bool del
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
IDENTIFIER: Order
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: ord
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
IDENTIFIER: Order
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: ord of type Order
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: ord
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
IDENTIFIER: setOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 141: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: orNum
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: q
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: sh
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: del
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 141: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: ord
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: ord
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: createOrder
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: Order createOrder(int orNum, Book b, int q, Address sh, bool del) {
    Order ord;
    /* ERROR */
    return ord;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};
int orderId;
Address createAddress(char* s, int n, char* c) {
    Address a;
    /* ERROR */
    return a;
}
Person createPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    Person p;
    /* ERROR */
    return p;
}
Book createBook(char* t, Person a, int numOfCopies, float price) {
    Book b;
    /* ERROR */
    return b;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: createBookstore
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 10 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 10 34 62
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 10 34 62 93
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 104
Stack now 0 2 6 10 34 62 93 104
Reading a token
KW_STR
Next token is token KW_STR ()
Shifting token KW_STR ()
Entering state 68
Stack now 0 2 6 10 34 62 93 104 68
Reducing stack by rule 26 (line 351):
   $1 = token KW_STR ()
-> $$ = nterm type ()
Entering state 119
Stack now 0 2 6 10 34 62 93 104 119
Reducing stack by rule 19 (line 311):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm type ()
Param: n
-> $$ = nterm param_decl_list ()
Entering state 95
Stack now 0 2 6 10 34 62 95
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 18 (line 307):
   $1 = nterm param_decl_list ()
Param list char* n
-> $$ = nterm param_list ()
Entering state 94
Stack now 0 2 6 10 34 62 94
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 105
Stack now 0 2 6 10 34 62 94 105
Reading a token
OP_ARROW
Next token is token OP_ARROW ()
Shifting token OP_ARROW ()
Entering state 121
Stack now 0 2 6 10 34 62 94 105 121
Reading a token
IDENTIFIER: Bookstore
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 133
Stack now 0 2 6 10 34 62 94 105 121 133
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 162
Stack now 0 2 6 10 34 62 94 105 121 133 162
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37
Reading a token
IDENTIFIER: Bookstore
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: bs of type Bookstore
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
HASH
Next token is token HASH ()
line 147: syntax error
Error: popping token DOT ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: name
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: n
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 147: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
HASH
Next token is token HASH ()
line 148: syntax error
Error: popping token DOT ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: numOfBooks
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 148: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157 59
Reading a token
HASH
Next token is token HASH ()
line 149: syntax error
Error: popping token DOT ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 157
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Next token is token HASH ()
Error: discarding token HASH ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
IDENTIFIER: numOfOrders
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 149: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_RETURN
Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 143
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 19
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 31
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 175
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 192
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 143 175 192
Reducing stack by rule 47 (line 446):
   $1 = token KW_RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
Returning: bs
-> $$ = nterm return_stmt ()
Entering state 149
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 149
Reducing stack by rule 30 (line 358):
   $1 = nterm return_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 183
Stack now 0 2 6 10 34 62 94 105 121 133 162 183
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 196
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 208
Stack now 0 2 6 10 34 62 94 105 121 133 162 183 196 208
Reducing stack by rule 15 (line 280):
   $1 = token KW_DEF ()
   $2 = token IDENTIFIER ()
   $3 = token LPAREN ()
   $4 = nterm param_list ()
   $5 = token RPAREN ()
   $6 = token OP_ARROW ()
   $7 = nterm type ()
   $8 = token COLON ()
   $9 = nterm block ()
   $10 = token KW_ENDDEF ()
   $11 = token SEMICOLON ()
Function with return: createBookstore
-> $$ = nterm function ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 7 (line 223):
   $1 = nterm function ()
Function: Bookstore createBookstore(char* n) {
    Bookstore bs;
    /* ERROR */
    /* ERROR */
    /* ERROR */
    return bs;
}

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};
int orderId;
Address createAddress(char* s, int n, char* c) {
    Address a;
    /* ERROR */
    return a;
}
Person createPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    Person p;
    /* ERROR */
    return p;
}
Book createBook(char* t, Person a, int numOfCopies, float price) {
    Book b;
    /* ERROR */
    return b;
}
Order createOrder(int orNum, Book b, int q, Address sh, bool del) {
    Order ord;
    /* ERROR */
    return ord;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 10
Stack now 0 2 6 10
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 10 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 10 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 10 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 10 35 63 96 107
Reducing stack by rule 100 (line 702):
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: orderId
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: orderId = 0;
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 38
Stack now 0 2 6 10 35 63 96 107 123 18 38
Reading a token
IDENTIFIER: a1
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 71
Stack now 0 2 6 10 35 63 96 107 123 18 38 71
Reducing stack by rule 67 (line 599):
   $1 = nterm ident_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
IDENTIFIER: Address
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 35 63 96 107 123 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: a, a1 of type Address
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 10
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: a = createAddress("Stadiou",10,"Stadiou");
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
IDENTIFIER: Person
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 35 63 96 107 123 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: author of type Person
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createPerson
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 12345
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: author = createPerson("Christos","Papadimitriou","cpap@gmail.com",12345,a);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
IDENTIFIER: Book
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 35 63 96 107 123 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: b of type Book
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_FLOAT: 34.3
Next token is token CONST_FLOAT ()
Shifting token CONST_FLOAT ()
Entering state 21
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 21
Reducing stack by rule 93 (line 685):
   $1 = token CONST_FLOAT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: b = createBook("Computation Theory",author,34.3,100);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
IDENTIFIER: Bookstore
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 35 63 96 107 123 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: bs of type Bookstore
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createBookstore
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token RPAREN ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: bs = createBookstore("Papasotiriou");
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 35 63 96 107 123 157 59
Reading a token
IDENTIFIER: addBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 35 63 96 107 123 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 169: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 169: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createAddress
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 10
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: a = createAddress("Wall Street",10,"NY");
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createPerson
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 54321
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 19
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: author = createPerson("Dennis","Richie","richie@gmail.com",54321,a);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
IDENTIFIER: author
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_FLOAT: 10.3
Next token is token CONST_FLOAT ()
Shifting token CONST_FLOAT ()
Entering state 21
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 21
Reducing stack by rule 93 (line 685):
   $1 = token CONST_FLOAT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: b = createBook("C Programming",author,10.3,100);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 35 63 96 107 123 157 59
Reading a token
IDENTIFIER: addBook
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 35 63 96 107 123 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 174: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 174: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 35 63 96 107 123 157 59
Reading a token
IDENTIFIER: printBookStoreBooks
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 35 63 96 107 123 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 176: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 176: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: ord
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 10 35 63 96 107 123 18 37
Reading a token
IDENTIFIER: Order
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Stack now 0 2 6 10 35 63 96 107 123 18 37 65
Reducing stack by rule 28 (line 353):
   $1 = token IDENTIFIER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 10 35 63 96 107 123 18 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 10 35 63 96 107 123 18 37 70 98
Reducing stack by rule 12 (line 244):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: ord of type Order
-> $$ = nterm var_declaration ()
Entering state 146
Stack now 0 2 6 10 35 63 96 107 123 146
Reducing stack by rule 101 (line 703):
   $1 = nterm block ()
   $2 = nterm var_declaration ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: ord
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 165
Stack now 0 2 6 10 35 63 96 107 123 136 165
Reading a token
IDENTIFIER: createOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39
Reading a token
IDENTIFIER: orderId
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 31
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
IDENTIFIER: b
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 20
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 20
Reducing stack by rule 92 (line 684):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 19
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 31
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Next token is token COMMA ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100
Reading a token
CONST_BOOL_FALSE
Next token is token CONST_BOOL_FALSE ()
Shifting token CONST_BOOL_FALSE ()
Entering state 24
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 24
Reducing stack by rule 86 (line 655):
   $1 = token CONST_BOOL_FALSE ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 100 116
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 99
Stack now 0 2 6 10 35 63 96 107 123 136 165 19 39 73 99
Reducing stack by rule 88 (line 665):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 30
Stack now 0 2 6 10 35 63 96 107 123 136 165 30
Reducing stack by rule 96 (line 688):
   $1 = nterm function_call ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 165 31
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 184
Stack now 0 2 6 10 35 63 96 107 123 136 165 184
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 197
Stack now 0 2 6 10 35 63 96 107 123 136 165 184 197
Reducing stack by rule 40 (line 387):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: ord = createOrder(orderId,b,2,a,false);
-> $$ = nterm assignment_stmt ()
Entering state 148
Stack now 0 2 6 10 35 63 96 107 123 148
Reducing stack by rule 29 (line 357):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: orderId
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
OP_PLUSEQ
Next token is token OP_PLUSEQ ()
Reducing stack by rule 66 (line 595):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 18
Stack now 0 2 6 10 35 63 96 107 123 18
Next token is token OP_PLUSEQ ()
line 180: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token OP_PLUSEQ ()
Error: discarding token OP_PLUSEQ ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 180: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 35 63 96 107 123 157 59
Reading a token
IDENTIFIER: putOrder
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 35 63 96 107 123 157 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 157
Stack now 0 2 6 10 35 63 96 107 123 157
Reading a token
LPAREN
Next token is token LPAREN ()
line 182: syntax error
Error: popping nterm primary_expression ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
IDENTIFIER: ord
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 182: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
IDENTIFIER: write
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 136
Stack now 0 2 6 10 35 63 96 107 123 136
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 39
Stack now 0 2 6 10 35 63 96 107 123 136 39
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 22
Stack now 0 2 6 10 35 63 96 107 123 136 39 22
Reducing stack by rule 94 (line 686):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 31
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 10 35 63 96 107 123 136 39 72
Next token is token COMMA ()
Reducing stack by rule 90 (line 674):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100
Reading a token
IDENTIFIER: bs
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 19
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 19
Reading a token
DOT
Next token is token DOT ()
Reducing stack by rule 95 (line 687):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 31
Next token is token DOT ()
Shifting token DOT ()
Entering state 59
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 31 59
Reading a token
IDENTIFIER: calculateTotalOrdersIncome
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 90
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 31 59 90
Reducing stack by rule 98 (line 694):
   $1 = nterm primary_expression ()
   $2 = token DOT ()
   $3 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 31
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 31
Reading a token
LPAREN
Next token is token LPAREN ()
Reducing stack by rule 68 (line 608):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 10 35 63 96 107 123 136 39 73 100 116
Next token is token LPAREN ()
Reducing stack by rule 91 (line 675):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 73
Stack now 0 2 6 10 35 63 96 107 123 136 39 73
Next token is token LPAREN ()
line 183: syntax error
Error: popping nterm arg_list ()
Stack now 0 2 6 10 35 63 96 107 123 136 39
Error: popping token LPAREN ()
Stack now 0 2 6 10 35 63 96 107 123 136
Error: popping token IDENTIFIER ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 10 35 63 96 107 123
Shifting token error ()
Entering state 135
Stack now 0 2 6 10 35 63 96 107 123 135
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 164
Stack now 0 2 6 10 35 63 96 107 123 135 164
Reducing stack by rule 39 (line 379):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 183: Invalid statement
-> $$ = nterm stmt ()
Entering state 147
Stack now 0 2 6 10 35 63 96 107 123 147
Reducing stack by rule 102 (line 709):
   $1 = nterm block ()
   $2 = nterm stmt ()
-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 10 35 63 96 107 123
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 142
Stack now 0 2 6 10 35 63 96 107 123 142
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 173
Stack now 0 2 6 10 35 63 96 107 123 142 173
Reducing stack by rule 21 (line 326):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 16
Stack now 0 2 6 16
Reducing stack by rule 8 (line 226):
   $1 = nterm main_function ()
Main function: int main() {
    orderId = 0;
    Address a, a1;
    a = createAddress("Stadiou",10,"Stadiou");
    Person author;
    author = createPerson("Christos","Papadimitriou","cpap@gmail.com",12345,a);
    Book b;
    b = createBook("Computation Theory",author,34.3,100);
    Bookstore bs;
    bs = createBookstore("Papasotiriou");
    /* ERROR */
    a = createAddress("Wall Street",10,"NY");
    author = createPerson("Dennis","Richie","richie@gmail.com",54321,a);
    b = createBook("C Programming",author,10.3,100);
    /* ERROR */
    /* ERROR */
    Order ord;
    ord = createOrder(orderId,b,2,a,false);
    /* ERROR */
    /* ERROR */
    /* ERROR */
};

-> $$ = nterm top_level ()
Entering state 12
Stack now 0 2 6 12
Reducing stack by rule 6 (line 213):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: struct Address {
char* street;
int number;
char* city;
void setAddress(char* s, int n, char* c) {
    street = s;
    number = n;
    city = c;
}
void printAddress() {
    write("Address: %s %d, %s\n",street,number,city);
}
};
struct Person {
char* firstName, lastName;
char* email;
int phone;
Address address;
void setPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    firstName = fn;
    lastName = ln;
    email = email;
    phone = phone;
    address = addr;
}
void printPersonInfo() {
    write("%s %s, email: %s phone: %d\n",firstName,lastName,email,phone);
    /* ERROR */
}
};
struct Book {
char* title, isbn;
Person author;
int numOfCopies;
float price;
void setBook(char* t, Person a, int numOfCopies, float price) {
    title = t;
    author = a;
    numOfCopies = numOfCopies;
    price = price;
}
void printBook() {
    write("Title: %s\n",title);
    writeStr("Author:");
    /* ERROR */
    write("Price:%f\n",price);
    write("Number of available copies: %d\n",numOfCopies);
}
};
struct Order {
int orderNum;
Book book;
int quantity;
Address shippingAddress;
bool delivered;
void setOrder(int orNum, Book b, int q, Address sh, bool del) {
    orderNum = orNum;
    book = b;
    quantity = q;
    shippingAddress = sh;
    delivered = del;
}
void printOrder() {
    ;;}
};
struct Bookstore {
char* name;
Book listOfBooks[100];
int numOfBooks;
Order listOfOrders[100];
int numOfOrders;
void putOrder(Order o) {
    listOfOrders/* ERROR */
}
void addBook(Book b) {
    listOfBooks/* ERROR */
}
void printBookStoreBooks() {
    for (int i = 0; i < numOfBooks; i++) {
    	/* ERROR */
    
    }
}
float calculateTotalOrdersIncome() {
    float total;
    total = 0;
    for (int i = 0; i < numOfOrders; i++) {
    	/* ERROR */
    /* ERROR */
    
    }
    return total;
}
};
int orderId;
Address createAddress(char* s, int n, char* c) {
    Address a;
    /* ERROR */
    return a;
}
Person createPerson(char* fn, char* ln, char* email, int phone, Address addr) {
    Person p;
    /* ERROR */
    return p;
}
Book createBook(char* t, Person a, int numOfCopies, float price) {
    Book b;
    /* ERROR */
    return b;
}
Order createOrder(int orNum, Book b, int q, Address sh, bool del) {
    Order ord;
    /* ERROR */
    return ord;
}
Bookstore createBookstore(char* n) {
    Bookstore bs;
    /* ERROR */
    /* ERROR */
    /* ERROR */
    return bs;
}

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 179):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
