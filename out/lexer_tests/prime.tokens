TOKEN: 258	TEXT: limit
TOKEN: 315	TEXT: ,
TOKEN: 258	TEXT: num
TOKEN: 315	TEXT: ,
TOKEN: 319	TEXT: counter:
TOKEN: 264	TEXT: integer
TOKEN: 314	TEXT: ;
TOKEN: 282	TEXT: def
TOKEN: 258	TEXT: prime
TOKEN: 309	TEXT: (
TOKEN: 319	TEXT: n:
TOKEN: 264	TEXT: integer
TOKEN: 310	TEXT: )
TOKEN: 317	TEXT: ->
TOKEN: 319	TEXT: bool:
TOKEN: 319	TEXT: i:
TOKEN: 264	TEXT: integer
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: result
TOKEN: 315	TEXT: ,
TOKEN: 319	TEXT: isPrime:
TOKEN: 267	TEXT: bool
TOKEN: 314	TEXT: ;
TOKEN: 269	TEXT: if
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: n
TOKEN: 300	TEXT: <
TOKEN: 259	TEXT: 0
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: result
TOKEN: 290	TEXT: =
TOKEN: 258	TEXT: prime
TOKEN: 309	TEXT: (
TOKEN: 305	TEXT: -
TOKEN: 258	TEXT: n
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 319	TEXT: else:
TOKEN: 269	TEXT: if
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: n
TOKEN: 300	TEXT: <
TOKEN: 259	TEXT: 2
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: result
TOKEN: 290	TEXT: =
TOKEN: 263	TEXT: False
TOKEN: 314	TEXT: ;
TOKEN: 319	TEXT: else:
TOKEN: 269	TEXT: if
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: n
TOKEN: 298	TEXT: ==
TOKEN: 259	TEXT: 2
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: result
TOKEN: 290	TEXT: =
TOKEN: 262	TEXT: True
TOKEN: 314	TEXT: ;
TOKEN: 319	TEXT: else:
TOKEN: 269	TEXT: if
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: n
TOKEN: 308	TEXT: %
TOKEN: 259	TEXT: 2
TOKEN: 298	TEXT: ==
TOKEN: 259	TEXT: 0
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: result
TOKEN: 290	TEXT: =
TOKEN: 263	TEXT: False
TOKEN: 314	TEXT: ;
TOKEN: 319	TEXT: else:
TOKEN: 258	TEXT: i
TOKEN: 290	TEXT: =
TOKEN: 259	TEXT: 3
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: isPrime
TOKEN: 290	TEXT: =
TOKEN: 262	TEXT: True
TOKEN: 314	TEXT: ;
TOKEN: 275	TEXT: while
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: isPrime
TOKEN: 280	TEXT: and
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: i
TOKEN: 300	TEXT: <
TOKEN: 258	TEXT: n
TOKEN: 307	TEXT: /
TOKEN: 259	TEXT: 2
TOKEN: 310	TEXT: )
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: isPrime
TOKEN: 290	TEXT: =
TOKEN: 258	TEXT: n
TOKEN: 308	TEXT: %
TOKEN: 258	TEXT: i
TOKEN: 299	TEXT: !=
TOKEN: 259	TEXT: 0
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: i
TOKEN: 290	TEXT: =
TOKEN: 258	TEXT: i
TOKEN: 304	TEXT: +
TOKEN: 259	TEXT: 2
TOKEN: 314	TEXT: ;
TOKEN: 276	TEXT: endwhile
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: result
TOKEN: 290	TEXT: =
TOKEN: 258	TEXT: isPrime
TOKEN: 314	TEXT: ;
TOKEN: 271	TEXT: endif
TOKEN: 314	TEXT: ;
TOKEN: 271	TEXT: endif
TOKEN: 314	TEXT: ;
TOKEN: 271	TEXT: endif
TOKEN: 314	TEXT: ;
TOKEN: 271	TEXT: endif
TOKEN: 314	TEXT: ;
TOKEN: 285	TEXT: return
TOKEN: 258	TEXT: result
TOKEN: 314	TEXT: ;
TOKEN: 283	TEXT: enddef
TOKEN: 314	TEXT: ;
TOKEN: 282	TEXT: def
TOKEN: 284	TEXT: main
TOKEN: 309	TEXT: (
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: limit
TOKEN: 290	TEXT: =
TOKEN: 258	TEXT: readInteger
TOKEN: 309	TEXT: (
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeInteger
TOKEN: 309	TEXT: (
TOKEN: 259	TEXT: 2
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeStr
TOKEN: 309	TEXT: (
TOKEN: 261	TEXT: " "
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: counter
TOKEN: 290	TEXT: =
TOKEN: 259	TEXT: 1
TOKEN: 314	TEXT: ;
TOKEN: 272	TEXT: for
TOKEN: 258	TEXT: num
TOKEN: 273	TEXT: in
TOKEN: 311	TEXT: [
TOKEN: 259	TEXT: 3
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: limit
TOKEN: 304	TEXT: +
TOKEN: 259	TEXT: 1
TOKEN: 313	TEXT: :
TOKEN: 259	TEXT: 2
TOKEN: 312	TEXT: ]
TOKEN: 313	TEXT: :
TOKEN: 269	TEXT: if
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: prime
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: num
TOKEN: 310	TEXT: )
TOKEN: 310	TEXT: )
TOKEN: 313	TEXT: :
TOKEN: 258	TEXT: counter
TOKEN: 290	TEXT: =
TOKEN: 258	TEXT: counter
TOKEN: 304	TEXT: +
TOKEN: 259	TEXT: 1
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeInteger
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: num
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeStr
TOKEN: 309	TEXT: (
TOKEN: 261	TEXT: " "
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 271	TEXT: endif
TOKEN: 314	TEXT: ;
TOKEN: 274	TEXT: endfor
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeStr
TOKEN: 309	TEXT: (
TOKEN: 261	TEXT: "\nThe total number of primes found is:"
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeInteger
TOKEN: 309	TEXT: (
TOKEN: 258	TEXT: counter
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 258	TEXT: writeStr
TOKEN: 309	TEXT: (
TOKEN: 261	TEXT: "\n"
TOKEN: 310	TEXT: )
TOKEN: 314	TEXT: ;
TOKEN: 283	TEXT: enddef
TOKEN: 314	TEXT: ;
