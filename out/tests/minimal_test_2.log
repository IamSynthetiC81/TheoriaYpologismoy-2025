Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 166):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 188):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 11
Stack now 0 2 6 11
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 11 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 11 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 11 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 11 35 63 96 107
Reducing stack by rule 94 (line 617):
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
KW_FOR
Next token is token KW_FOR ()
Reducing stack by rule 23 (line 316):
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 147
Stack now 0 2 6 11 35 63 96 107 124 136 147
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 171
Stack now 0 2 6 11 35 63 96 107 124 136 147 171
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 183
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 191
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 30
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 195
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195
Next token is token COLON ()
Shifting token COLON ()
Entering state 198
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 20
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 30
Next token is token RBRACKET ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 202
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 206
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 209
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209
Reducing stack by rule 23 (line 316):
-> $$ = nterm stmt_list ()
Entering state 211
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 145
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 168
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 168
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 168 20
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 168 30
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 179
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 168 179
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 188
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 168 179 188
Reducing stack by rule 40 (line 356):
   $1 = token IDENTIFIER ()
   $2 = token OP_ASSIGN ()
   $3 = nterm expression ()
   $4 = token SEMICOLON ()
Matched assignment: x = i;
-> $$ = nterm assignment_stmt ()
Entering state 154
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 154
Reducing stack by rule 30 (line 334):
   $1 = nterm assignment_stmt ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 211
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 213
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 213
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 214
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 213 214
Reducing stack by rule 44 (line 403):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 157
Stack now 0 2 6 11 35 63 96 107 124 136 157
Reducing stack by rule 33 (line 337):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Reducing stack by rule 93 (line 606):
   $1 = nterm decl_list ()
   $2 = nterm stmt_list ()
Processing block:
Declarations: 
Statements: for (int i = 0; i < N; ++i) {
    x = i;
}

-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 11 35 63 96 107 123
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 134
Stack now 0 2 6 11 35 63 96 107 123 134
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 143
Stack now 0 2 6 11 35 63 96 107 123 134 143
Reducing stack by rule 22 (line 303):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 8 (line 202):
   $1 = nterm main_function ()
Main function: int main() {
    for (int i = 0; i < N; ++i) {
        x = i;
    }
}

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 160):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
