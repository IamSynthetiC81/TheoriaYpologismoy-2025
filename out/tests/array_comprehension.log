Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 166):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_CONST
Next token is token KW_CONST ()
Reducing stack by rule 5 (line 188):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_CONST ()
Shifting token KW_CONST ()
Entering state 10
Stack now 0 2 6 10
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 33
Stack now 0 2 6 10 33
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 61
Stack now 0 2 6 10 33 61
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 10 33 61 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 10 33 61 30
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 92
Stack now 0 2 6 10 33 61 92
Next token is token COLON ()
Shifting token COLON ()
Entering state 103
Stack now 0 2 6 10 33 61 92 103
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 10 33 61 92 103 66
Reducing stack by rule 25 (line 326):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 118
Stack now 0 2 6 10 33 61 92 103 118
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 130
Stack now 0 2 6 10 33 61 92 103 118 130
Reducing stack by rule 15 (line 243):
   $1 = token KW_CONST ()
   $2 = token IDENTIFIER ()
   $3 = token OP_ASSIGN ()
   $4 = nterm expression ()
   $5 = token COLON ()
   $6 = nterm type ()
   $7 = token SEMICOLON ()
Constant declaration: N = 100
-> $$ = nterm const_declaration ()
Entering state 15
Stack now 0 2 6 15
Reducing stack by rule 11 (line 211):
   $1 = nterm const_declaration ()
Constant declaration: const int N = 100;

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 9
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 19
Next token is token LBRACKET ()
line 5: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 5: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: const int N = 100;

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 11
Stack now 0 2 6 11
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 11 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 11 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 11 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 11 35 63 96 107
Reducing stack by rule 94 (line 617):
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
KW_FOR
Next token is token KW_FOR ()
Reducing stack by rule 23 (line 316):
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 147
Stack now 0 2 6 11 35 63 96 107 124 136 147
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 171
Stack now 0 2 6 11 35 63 96 107 124 136 147 171
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 183
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 191
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 30
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 195
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195
Next token is token COLON ()
Shifting token COLON ()
Entering state 198
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198
Reading a token
IDENTIFIER: N
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 20
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 30
Next token is token RBRACKET ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 202
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 206
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 209
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209
Reducing stack by rule 23 (line 316):
-> $$ = nterm stmt_list ()
Entering state 211
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 145
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145
Reading a token
LBRACKET
Next token is token LBRACKET ()
line 10: syntax error
Error: popping token IDENTIFIER ()
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 167
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 144 167
Reducing stack by rule 39 (line 348):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 10: Invalid statement
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 211
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 213
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 213
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 214
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 213 214
Reducing stack by rule 44 (line 403):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: i
-> $$ = nterm for_stmt ()
Entering state 157
Stack now 0 2 6 11 35 63 96 107 124 136 157
Reducing stack by rule 33 (line 337):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Reading a token
IDENTIFIER: half
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 145
Stack now 0 2 6 11 35 63 96 107 124 136 145
Reading a token
OP_DEFINE
Next token is token OP_DEFINE ()
line 13: syntax error
Error: popping token IDENTIFIER ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Next token is token OP_DEFINE ()
Error: discarding token OP_DEFINE ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
OP_DIV
Next token is token OP_DIV ()
Error: discarding token OP_DIV ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
CONST_INT: 2
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
KW_FOR
Next token is token KW_FOR ()
Error: discarding token KW_FOR ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
IDENTIFIER: x
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
KW_IN
Next token is token KW_IN ()
Error: discarding token KW_IN ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
KW_OF
Next token is token KW_OF ()
Error: discarding token KW_OF ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
KW_SCALAR
Next token is token KW_SCALAR ()
Error: discarding token KW_SCALAR ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124 136
Shifting token error ()
Entering state 144
Stack now 0 2 6 11 35 63 96 107 124 136 144
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 167
Stack now 0 2 6 11 35 63 96 107 124 136 144 167
Reducing stack by rule 39 (line 348):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 13: Invalid statement
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Reducing stack by rule 93 (line 606):
   $1 = nterm decl_list ()
   $2 = nterm stmt_list ()
Processing block:
Declarations: 
Statements: for (int i = 0; i < N; ++i) {
    /* ERROR */
}
/* ERROR */

-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 11 35 63 96 107 123
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 134
Stack now 0 2 6 11 35 63 96 107 123 134
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 143
Stack now 0 2 6 11 35 63 96 107 123 134 143
Reducing stack by rule 22 (line 303):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 8 (line 202):
   $1 = nterm main_function ()
Main function: int main() {
    for (int i = 0; i < N; ++i) {
        /* ERROR */
    }
    /* ERROR */
}

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: const int N = 100;
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 160):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
