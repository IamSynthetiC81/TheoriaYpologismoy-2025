Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 166):
-> $$ = nterm macro_def_list ()
Entering state 2
Stack now 0 2
Reading a token
KW_DEF
Next token is token KW_DEF ()
Reducing stack by rule 5 (line 188):
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: swap
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 34 62
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 34 62 93
Reading a token
LBRACKET
Next token is token LBRACKET ()
line 5: syntax error
Error: popping token IDENTIFIER ()
Stack now 0 2 6 11 34 62
Error: popping token LPAREN ()
Stack now 0 2 6 11 34
Error: popping token IDENTIFIER ()
Stack now 0 2 6 11
Error: popping token KW_DEF ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: temp
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 6: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: 
-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: temp
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 9
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Shifting token OP_ASSIGN ()
Entering state 32
Stack now 0 2 6 9 32
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 9 32 20
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 9 32 30
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 58
Stack now 0 2 6 9 32 30 58
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 9 32 30 58 20
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 9 32 30 58 30
Next token is token RBRACKET ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 89
Stack now 0 2 6 9 32 30 58 89
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 101
Stack now 0 2 6 9 32 30 58 89 101
Reducing stack by rule 91 (line 601):
   $1 = nterm primary_expression ()
   $2 = token LBRACKET ()
   $3 = nterm expression ()
   $4 = token RBRACKET ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 9 32 30
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 60
Stack now 0 2 6 9 32 60
Next token is token SEMICOLON ()
line 7: syntax error
Error: popping nterm expression ()
Stack now 0 2 6 9 32
Error: popping token OP_ASSIGN ()
Stack now 0 2 6 9
Error: popping token IDENTIFIER ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 7: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 9
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 19
Next token is token LBRACKET ()
line 8: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 8: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 9
Reading a token
LBRACKET
Next token is token LBRACKET ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 19
Next token is token LBRACKET ()
line 9: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: j
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
OP_ASSIGN
Next token is token OP_ASSIGN ()
Error: discarding token OP_ASSIGN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: temp
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 9: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
line 10: syntax error
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token KW_ENDDEF ()
Error: discarding token KW_ENDDEF ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 10: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 11
Stack now 0 2 6 11
Reading a token
IDENTIFIER: printArray
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 34
Stack now 0 2 6 11 34
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 62
Stack now 0 2 6 11 34 62
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 93
Stack now 0 2 6 11 34 62 93
Reading a token
LBRACKET
Next token is token LBRACKET ()
line 13: syntax error
Error: popping token IDENTIFIER ()
Stack now 0 2 6 11 34 62
Error: popping token LPAREN ()
Stack now 0 2 6 11 34
Error: popping token IDENTIFIER ()
Stack now 0 2 6 11
Error: popping token KW_DEF ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: size
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_FOR
Next token is token KW_FOR ()
Error: discarding token KW_FOR ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_IN
Next token is token KW_IN ()
Error: discarding token KW_IN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: size
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: writeInteger
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
LPAREN
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 15: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_IF
Next token is token KW_IF ()
line 16: syntax error
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token KW_IF ()
Error: discarding token KW_IF ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
LPAREN
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
OP_EQ
Next token is token OP_EQ ()
Error: discarding token OP_EQ ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
IDENTIFIER: size
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Error: discarding token OP_MINUS ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
KW_CONTINUE
Next token is token KW_CONTINUE ()
Error: discarding token KW_CONTINUE ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 17: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_ENDIF
Next token is token KW_ENDIF ()
line 18: syntax error
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token KW_ENDIF ()
Error: discarding token KW_ENDIF ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 18: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 9
Reading a token
LPAREN
Next token is token LPAREN ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 19
Next token is token LPAREN ()
line 19: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Error: discarding token CONST_STRING ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 19: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
line 20: syntax error
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token KW_ENDFOR ()
Error: discarding token KW_ENDFOR ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 20: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 9
Reading a token
LPAREN
Next token is token LPAREN ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 19
Next token is token LPAREN ()
line 21: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Error: discarding token CONST_STRING ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 21: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
line 22: syntax error
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Next token is token KW_ENDDEF ()
Error: discarding token KW_ENDDEF ()
Error: popping token error ()
Stack now 0 2 6
Shifting token error ()
Entering state 8
Stack now 0 2 6 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 22: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 14
Stack now 0 2 6 14
Reducing stack by rule 10 (line 208):
   $1 = nterm var_declaration ()
Variable declaration: /* BAD DECLARATION */

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
KW_DEF
Next token is token KW_DEF ()
Shifting token KW_DEF ()
Entering state 11
Stack now 0 2 6 11
Reading a token
KW_MAIN
Next token is token KW_MAIN ()
Shifting token KW_MAIN ()
Entering state 35
Stack now 0 2 6 11 35
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 63
Stack now 0 2 6 11 35 63
Reading a token
RPAREN
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 96
Stack now 0 2 6 11 35 63 96
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 107
Stack now 0 2 6 11 35 63 96 107
Reducing stack by rule 94 (line 617):
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 11 35 63 96 107 124 9
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 11 35 63 96 107 124 19
Next token is token COLON ()
Shifting token COLON ()
Entering state 37
Stack now 0 2 6 11 35 63 96 107 124 19 37
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Shifting token KW_INTEGER ()
Entering state 66
Stack now 0 2 6 11 35 63 96 107 124 19 37 66
Reducing stack by rule 25 (line 326):
   $1 = token KW_INTEGER ()
-> $$ = nterm type ()
Entering state 70
Stack now 0 2 6 11 35 63 96 107 124 19 37 70
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 98
Stack now 0 2 6 11 35 63 96 107 124 19 37 70 98
Reducing stack by rule 12 (line 218):
   $1 = nterm ident_list ()
   $2 = token COLON ()
   $3 = nterm type ()
   $4 = token SEMICOLON ()
Processing declaration: k of type int
-> $$ = nterm var_declaration ()
Entering state 135
Stack now 0 2 6 11 35 63 96 107 124 135
Reducing stack by rule 95 (line 618):
   $1 = nterm decl_list ()
   $2 = nterm var_declaration ()
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 11 35 63 96 107 124 9
Reading a token
OP_DEFINE
Next token is token OP_DEFINE ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 11 35 63 96 107 124 19
Next token is token OP_DEFINE ()
line 28: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Next token is token OP_DEFINE ()
Error: discarding token OP_DEFINE ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
LBRACKET
Next token is token LBRACKET ()
Error: discarding token LBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
OP_PLUS
Next token is token OP_PLUS ()
Error: discarding token OP_PLUS ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
CONST_INT: 1
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
KW_FOR
Next token is token KW_FOR ()
Error: discarding token KW_FOR ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
IDENTIFIER: i
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
RBRACKET
Next token is token RBRACKET ()
Error: discarding token RBRACKET ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
COLON
Next token is token COLON ()
Error: discarding token COLON ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
KW_INTEGER
Next token is token KW_INTEGER ()
Error: discarding token KW_INTEGER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 11 35 63 96 107 124 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 28: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 135
Stack now 0 2 6 11 35 63 96 107 124 135
Reducing stack by rule 95 (line 618):
   $1 = nterm decl_list ()
   $2 = nterm var_declaration ()
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 11 35 63 96 107 124 9
Reading a token
LPAREN
Next token is token LPAREN ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 11 35 63 96 107 124 19
Next token is token LPAREN ()
line 30: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Error: discarding token CONST_STRING ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 11 35 63 96 107 124 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 30: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 135
Stack now 0 2 6 11 35 63 96 107 124 135
Reducing stack by rule 95 (line 618):
   $1 = nterm decl_list ()
   $2 = nterm var_declaration ()
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
IDENTIFIER: printArray
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 9
Stack now 0 2 6 11 35 63 96 107 124 9
Reading a token
LPAREN
Next token is token LPAREN ()
Reducing stack by rule 59 (line 509):
   $1 = token IDENTIFIER ()
-> $$ = nterm ident_list ()
Entering state 19
Stack now 0 2 6 11 35 63 96 107 124 19
Next token is token LPAREN ()
line 31: syntax error
Error: popping nterm ident_list ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Next token is token LPAREN ()
Error: discarding token LPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Error: discarding token IDENTIFIER ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
COMMA
Next token is token COMMA ()
Error: discarding token COMMA ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Error: discarding token CONST_INT ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
RPAREN
Next token is token RPAREN ()
Error: discarding token RPAREN ()
Error: popping token error ()
Stack now 0 2 6 11 35 63 96 107 124
Shifting token error ()
Entering state 8
Stack now 0 2 6 11 35 63 96 107 124 8
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 31
Stack now 0 2 6 11 35 63 96 107 124 8 31
Reducing stack by rule 14 (line 235):
   $1 = token error ()
   $2 = token SEMICOLON ()
line 31: Invalid variable declaration
-> $$ = nterm var_declaration ()
Entering state 135
Stack now 0 2 6 11 35 63 96 107 124 135
Reducing stack by rule 95 (line 618):
   $1 = nterm decl_list ()
   $2 = nterm var_declaration ()
-> $$ = nterm decl_list ()
Entering state 124
Stack now 0 2 6 11 35 63 96 107 124
Reading a token
KW_FOR
Next token is token KW_FOR ()
Reducing stack by rule 23 (line 316):
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Next token is token KW_FOR ()
Shifting token KW_FOR ()
Entering state 147
Stack now 0 2 6 11 35 63 96 107 124 136 147
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 171
Stack now 0 2 6 11 35 63 96 107 124 136 147 171
Reading a token
KW_IN
Next token is token KW_IN ()
Shifting token KW_IN ()
Entering state 183
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183
Reading a token
LBRACKET
Next token is token LBRACKET ()
Shifting token LBRACKET ()
Entering state 191
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191
Reading a token
CONST_INT: 0
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 30
Reading a token
COLON
Next token is token COLON ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 195
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195
Next token is token COLON ()
Shifting token COLON ()
Entering state 198
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198
Reading a token
CONST_INT: 50
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 30
Reading a token
RBRACKET
Next token is token RBRACKET ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 202
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202
Next token is token RBRACKET ()
Shifting token RBRACKET ()
Entering state 206
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206
Reading a token
COLON
Next token is token COLON ()
Shifting token COLON ()
Entering state 209
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209
Reducing stack by rule 23 (line 316):
-> $$ = nterm stmt_list ()
Entering state 211
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Reading a token
IDENTIFIER: swap
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 145
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 169
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 20
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 30
Next token is token COMMA ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 72
Next token is token COMMA ()
Reducing stack by rule 84 (line 586):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 181
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 20
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 30
Next token is token COMMA ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116
Next token is token COMMA ()
Reducing stack by rule 85 (line 587):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 181
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100
Reading a token
CONST_INT: 99
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 30
Reading a token
OP_MINUS
Next token is token OP_MINUS ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116
Next token is token OP_MINUS ()
Shifting token OP_MINUS ()
Entering state 53
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116 53
Reading a token
IDENTIFIER: k
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116 53 20
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116 53 30
Next token is token RPAREN ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 85
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116 53 85
Next token is token RPAREN ()
Reducing stack by rule 63 (line 526):
   $1 = nterm expression ()
   $2 = token OP_MINUS ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 100 116
Next token is token RPAREN ()
Reducing stack by rule 85 (line 587):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 181
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 189
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 145 169 181 189
Reducing stack by rule 81 (line 573):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 162
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 162
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 176
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 162 176
Reducing stack by rule 38 (line 342):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 211
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211
Reading a token
KW_ENDFOR
Next token is token KW_ENDFOR ()
Shifting token KW_ENDFOR ()
Entering state 213
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 213
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 214
Stack now 0 2 6 11 35 63 96 107 124 136 147 171 183 191 195 198 202 206 209 211 213 214
Reducing stack by rule 44 (line 403):
   $1 = token KW_FOR ()
   $2 = token IDENTIFIER ()
   $3 = token KW_IN ()
   $4 = token LBRACKET ()
   $5 = nterm expression ()
   $6 = token COLON ()
   $7 = nterm expression ()
   $8 = token RBRACKET ()
   $9 = token COLON ()
   $10 = nterm stmt_list ()
   $11 = token KW_ENDFOR ()
   $12 = token SEMICOLON ()
For loop: k
-> $$ = nterm for_stmt ()
Entering state 157
Stack now 0 2 6 11 35 63 96 107 124 136 157
Reducing stack by rule 33 (line 337):
   $1 = nterm for_stmt ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Reading a token
IDENTIFIER: writeStr
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 145
Stack now 0 2 6 11 35 63 96 107 124 136 145
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 169
Stack now 0 2 6 11 35 63 96 107 124 136 145 169
Reading a token
CONST_STRING
Next token is token CONST_STRING ()
Shifting token CONST_STRING ()
Entering state 23
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 23
Reducing stack by rule 88 (line 598):
   $1 = token CONST_STRING ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 30
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 72
Next token is token RPAREN ()
Reducing stack by rule 84 (line 586):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 181
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 189
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181 189
Reducing stack by rule 81 (line 573):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 162
Stack now 0 2 6 11 35 63 96 107 124 136 162
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 176
Stack now 0 2 6 11 35 63 96 107 124 136 162 176
Reducing stack by rule 38 (line 342):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Reading a token
IDENTIFIER: printArray
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 145
Stack now 0 2 6 11 35 63 96 107 124 136 145
Reading a token
LPAREN
Next token is token LPAREN ()
Shifting token LPAREN ()
Entering state 169
Stack now 0 2 6 11 35 63 96 107 124 136 145 169
Reading a token
IDENTIFIER: a
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 20
Reading a token
COMMA
Next token is token COMMA ()
Reducing stack by rule 89 (line 599):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 30
Next token is token COMMA ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 72
Next token is token COMMA ()
Reducing stack by rule 84 (line 586):
   $1 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 181
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 100
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181 100
Reading a token
CONST_INT: 100
Next token is token CONST_INT ()
Shifting token CONST_INT ()
Entering state 21
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181 100 21
Reducing stack by rule 86 (line 596):
   $1 = token CONST_INT ()
-> $$ = nterm primary_expression ()
Entering state 30
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181 100 30
Reading a token
RPAREN
Next token is token RPAREN ()
Reducing stack by rule 61 (line 521):
   $1 = nterm primary_expression ()
-> $$ = nterm expression ()
Entering state 116
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181 100 116
Next token is token RPAREN ()
Reducing stack by rule 85 (line 587):
   $1 = nterm arg_list ()
   $2 = token COMMA ()
   $3 = nterm expression ()
-> $$ = nterm arg_list ()
Entering state 181
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181
Next token is token RPAREN ()
Shifting token RPAREN ()
Entering state 189
Stack now 0 2 6 11 35 63 96 107 124 136 145 169 181 189
Reducing stack by rule 81 (line 573):
   $1 = token IDENTIFIER ()
   $2 = token LPAREN ()
   $3 = nterm arg_list ()
   $4 = token RPAREN ()
-> $$ = nterm function_call ()
Entering state 162
Stack now 0 2 6 11 35 63 96 107 124 136 162
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 176
Stack now 0 2 6 11 35 63 96 107 124 136 162 176
Reducing stack by rule 38 (line 342):
   $1 = nterm function_call ()
   $2 = token SEMICOLON ()
-> $$ = nterm stmt ()
Entering state 153
Stack now 0 2 6 11 35 63 96 107 124 136 153
Reducing stack by rule 24 (line 317):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Entering state 136
Stack now 0 2 6 11 35 63 96 107 124 136
Reading a token
KW_ENDDEF
Next token is token KW_ENDDEF ()
Reducing stack by rule 93 (line 606):
   $1 = nterm decl_list ()
   $2 = nterm stmt_list ()
Processing block:
Declarations: int k;
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

Statements: for (int k = 0; k < 50; ++k) {
    swap(a,k,99 - k);
}
writeStr("Reversed array: ");
printArray(a,100);

-> $$ = nterm block ()
Entering state 123
Stack now 0 2 6 11 35 63 96 107 123
Next token is token KW_ENDDEF ()
Shifting token KW_ENDDEF ()
Entering state 134
Stack now 0 2 6 11 35 63 96 107 123 134
Reading a token
SEMICOLON
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 143
Stack now 0 2 6 11 35 63 96 107 123 134 143
Reducing stack by rule 22 (line 303):
   $1 = token KW_DEF ()
   $2 = token KW_MAIN ()
   $3 = token LPAREN ()
   $4 = token RPAREN ()
   $5 = token COLON ()
   $6 = nterm block ()
   $7 = token KW_ENDDEF ()
   $8 = token SEMICOLON ()
Main function
-> $$ = nterm main_function ()
Entering state 17
Stack now 0 2 6 17
Reducing stack by rule 8 (line 202):
   $1 = nterm main_function ()
Main function: int main() {
    int k;
    /* BAD DECLARATION */
    /* BAD DECLARATION */
    /* BAD DECLARATION */
    for (int k = 0; k < 50; ++k) {
        swap(a,k,99 - k);
    }
    writeStr("Reversed array: ");
    printArray(a,100);
}

-> $$ = nterm top_level ()
Entering state 13
Stack now 0 2 6 13
Reducing stack by rule 6 (line 189):
   $1 = nterm top_level_list ()
   $2 = nterm top_level ()
Top level: /* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */
/* BAD DECLARATION */

-> $$ = nterm top_level_list ()
Entering state 6
Stack now 0 2 6
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 160):
   $1 = nterm macro_def_list ()
   $2 = nterm top_level_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
