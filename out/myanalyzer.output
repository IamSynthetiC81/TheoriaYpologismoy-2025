Nonterminals useless in grammar

    decl_list


Terminals unused in grammar

    KW_OF
    OP_PLUSEQ
    OP_MINUSEQ
    OP_MULTEQ
    OP_DIVEQ
    OP_MODEQ
    OP_DEFINE
    HASH
    DECL_IDENT
    DECLARATION
    STMT
    NO_COMPARE


Rules useless in grammar

   94 decl_list: ε
   95          | decl_list var_declaration
   96          | decl_list error SEMICOLON


Grammar

    0 $accept: program $end

    1 program: macro_def_list top_level_list

    2 macro_def_list: ε
    3               | macro_def_list macro_def

    4 macro_def: KW_DEFMACRO IDENTIFIER expression

    5 top_level_list: ε
    6               | top_level_list top_level

    7 top_level: function
    8          | main_function
    9          | component
   10          | var_declaration
   11          | const_declaration

   12 var_declaration: ident_list COLON type SEMICOLON

   13 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

   16 param_list: ε
   17           | param_decl_list

   18 param_decl_list: IDENTIFIER COLON type
   19                | param_decl_list COMMA IDENTIFIER COLON type

   20 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

   21 stmt_list: ε
   22          | stmt_list stmt

   23 type: KW_INTEGER
   24     | KW_SCALAR
   25     | KW_STR
   26     | KW_BOOL
   27     | IDENTIFIER

   28 stmt: assignment_stmt
   29     | return_stmt
   30     | if_stmt
   31     | for_stmt
   32     | while_stmt
   33     | break_stmt
   34     | continue_stmt
   35     | empty_stmt
   36     | function_call SEMICOLON
   37     | error SEMICOLON

   38 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON

   39 return_stmt: KW_RETURN expression SEMICOLON
   40            | KW_RETURN SEMICOLON

   41 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

   44 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

   45 break_stmt: KW_BREAK SEMICOLON

   46 continue_stmt: KW_CONTINUE SEMICOLON

   47 empty_stmt: SEMICOLON

   48 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

   49 component_body: ε
   50               | component_body component_member

   51 component_member: hash_ident_list COLON type SEMICOLON
   52                 | hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   53                 | function
   54                 | SEMICOLON
   55                 | error SEMICOLON

   56 hash_ident_list: IDENTIFIER
   57                | hash_ident_list COMMA IDENTIFIER

   58 ident_list: IDENTIFIER
   59           | ident_list COMMA IDENTIFIER

   60 expression: primary_expression
   61           | expression OP_PLUS expression
   62           | expression OP_MINUS expression
   63           | expression OP_MULT expression
   64           | expression OP_DIV expression
   65           | expression OP_MOD expression
   66           | expression OP_POW expression
   67           | expression OP_EQ expression
   68           | expression OP_NEQ expression
   69           | expression OP_LT expression
   70           | expression OP_LEQ expression
   71           | expression OP_GT expression
   72           | expression OP_GEQ expression
   73           | expression KW_AND expression
   74           | expression KW_OR expression
   75           | KW_NOT expression
   76           | OP_MINUS expression
   77           | LPAREN expression RPAREN
   78           | CONST_BOOL_FALSE
   79           | CONST_BOOL_TRUE

   80 function_call: IDENTIFIER LPAREN arg_list RPAREN

   81 arg_list: ε
   82         | expression
   83         | arg_list COMMA expression

   84 primary_expression: CONST_INT
   85                   | CONST_FLOAT
   86                   | CONST_STRING
   87                   | IDENTIFIER
   88                   | function_call
   89                   | primary_expression LBRACKET expression RBRACKET
   90                   | primary_expression DOT IDENTIFIER

   91 block: ε
   92      | block var_declaration
   93      | block stmt


Terminals, with rules where they appear

    $end (0) 0
    error (256) 37 55
    IDENTIFIER <string> (258) 4 13 14 15 18 19 27 38 43 48 56 57 58 59 80 87 90
    CONST_INT <string> (259) 52 84
    CONST_FLOAT <string> (260) 85
    CONST_STRING <string> (261) 86
    CONST_BOOL_TRUE (262) 79
    CONST_BOOL_FALSE (263) 78
    KW_INTEGER (264) 23
    KW_SCALAR (265) 24
    KW_STR (266) 25
    KW_BOOL (267) 26
    KW_CONST (268) 13
    KW_IF (269) 41 42
    KW_ELSE (270) 42
    KW_ENDIF (271) 41 42
    KW_FOR (272) 43
    KW_IN (273) 43
    KW_ENDFOR (274) 43
    KW_WHILE (275) 44
    KW_ENDWHILE (276) 44
    KW_BREAK (277) 45
    KW_CONTINUE (278) 46
    KW_NOT (279) 75
    KW_AND (280) 73
    KW_OR (281) 74
    KW_DEF (282) 14 15 20
    KW_ENDDEF (283) 14 15 20
    KW_MAIN (284) 20
    KW_RETURN (285) 39 40
    KW_COMP (286) 48
    KW_ENDCOMP (287) 48
    KW_OF (288)
    KW_DEFMACRO (289) 4
    OP_ASSIGN (290) 13 38
    OP_PLUSEQ (291)
    OP_MINUSEQ (292)
    OP_MULTEQ (293)
    OP_DIVEQ (294)
    OP_MODEQ (295)
    OP_DEFINE (296)
    OP_POW (297) 66
    OP_EQ (298) 67
    OP_NEQ (299) 68
    OP_LT (300) 69
    OP_LEQ (301) 70
    OP_GT (302) 71
    OP_GEQ (303) 72
    OP_PLUS (304) 61
    OP_MINUS (305) 62 76
    OP_MULT (306) 63
    OP_DIV (307) 64
    OP_MOD (308) 65
    LPAREN (309) 14 15 20 41 42 44 77 80
    RPAREN (310) 14 15 20 41 42 44 77 80
    LBRACKET (311) 43 52 89
    RBRACKET (312) 43 52 89
    COLON (313) 12 13 14 15 18 19 20 41 42 43 44 48 51 52
    SEMICOLON (314) 12 13 14 15 20 36 37 38 39 40 41 42 43 44 45 46 47 48 51 52 54 55
    COMMA (315) 19 57 59 83
    DOT (316) 90
    OP_ARROW (317) 14
    HASH (318)
    DECL_IDENT <string> (319)
    UMINUS (320)
    DECLARATION (321)
    STMT (322)
    NO_COMPARE (323)


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    program <string> (70)
        on left: 1
        on right: 0
    macro_def_list <string> (71)
        on left: 2 3
        on right: 1 3
    macro_def <string> (72)
        on left: 4
        on right: 3
    top_level_list <string> (73)
        on left: 5 6
        on right: 1 6
    top_level <string> (74)
        on left: 7 8 9 10 11
        on right: 6
    var_declaration <string> (75)
        on left: 12
        on right: 10 92
    const_declaration <string> (76)
        on left: 13
        on right: 11
    function <string> (77)
        on left: 14 15
        on right: 7 53
    param_list <string> (78)
        on left: 16 17
        on right: 14 15
    param_decl_list <string> (79)
        on left: 18 19
        on right: 17 19
    main_function <string> (80)
        on left: 20
        on right: 8
    stmt_list <string> (81)
        on left: 21 22
        on right: 22 41 42 43 44
    type <string> (82)
        on left: 23 24 25 26 27
        on right: 12 13 14 18 19 51 52
    stmt <string> (83)
        on left: 28 29 30 31 32 33 34 35 36 37
        on right: 22 93
    assignment_stmt <string> (84)
        on left: 38
        on right: 28
    return_stmt <string> (85)
        on left: 39 40
        on right: 29
    if_stmt <string> (86)
        on left: 41 42
        on right: 30
    for_stmt <string> (87)
        on left: 43
        on right: 31
    while_stmt <string> (88)
        on left: 44
        on right: 32
    break_stmt <string> (89)
        on left: 45
        on right: 33
    continue_stmt <string> (90)
        on left: 46
        on right: 34
    empty_stmt <string> (91)
        on left: 47
        on right: 35
    component <string> (92)
        on left: 48
        on right: 9
    component_body <string> (93)
        on left: 49 50
        on right: 48 50
    component_member <string> (94)
        on left: 51 52 53 54 55
        on right: 50
    hash_ident_list <string> (95)
        on left: 56 57
        on right: 51 52 57
    ident_list <string> (96)
        on left: 58 59
        on right: 12 59
    expression <string> (97)
        on left: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79
        on right: 4 13 38 39 41 42 43 44 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 82 83 89
    function_call <string> (98)
        on left: 80
        on right: 36 88
    arg_list <string> (99)
        on left: 81 82 83
        on right: 80 83
    primary_expression <string> (100)
        on left: 84 85 86 87 88 89 90
        on right: 60 89 90
    block <string> (101)
        on left: 91 92 93
        on right: 14 15 20 92 93


State 0

    0 $accept: • program $end
    1 program: • macro_def_list top_level_list
    2 macro_def_list: ε •
    3               | • macro_def_list macro_def

    $default  reduce using rule 2 (macro_def_list)

    program         go to state 1
    macro_def_list  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: macro_def_list • top_level_list
    3 macro_def_list: macro_def_list • macro_def
    4 macro_def: • KW_DEFMACRO IDENTIFIER expression
    5 top_level_list: ε •  [$end, IDENTIFIER, KW_CONST, KW_DEF, KW_COMP]
    6               | • top_level_list top_level

    KW_DEFMACRO  shift, and go to state 4

    $default  reduce using rule 5 (top_level_list)

    macro_def       go to state 5
    top_level_list  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 macro_def: KW_DEFMACRO • IDENTIFIER expression

    IDENTIFIER  shift, and go to state 7


State 5

    3 macro_def_list: macro_def_list macro_def •

    $default  reduce using rule 3 (macro_def_list)


State 6

    1 program: macro_def_list top_level_list •  [$end]
    6 top_level_list: top_level_list • top_level
    7 top_level: • function
    8          | • main_function
    9          | • component
   10          | • var_declaration
   11          | • const_declaration
   12 var_declaration: • ident_list COLON type SEMICOLON
   13 const_declaration: • KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   14 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   20 main_function: • KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON
   48 component: • KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON
   58 ident_list: • IDENTIFIER
   59           | • ident_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 8
    KW_CONST    shift, and go to state 9
    KW_DEF      shift, and go to state 10
    KW_COMP     shift, and go to state 11

    $default  reduce using rule 1 (program)

    top_level          go to state 12
    var_declaration    go to state 13
    const_declaration  go to state 14
    function           go to state 15
    main_function      go to state 16
    component          go to state 17
    ident_list         go to state 18


State 7

    4 macro_def: KW_DEFMACRO IDENTIFIER • expression
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 28
    function_call       go to state 29
    primary_expression  go to state 30


State 8

   58 ident_list: IDENTIFIER •

    $default  reduce using rule 58 (ident_list)


State 9

   13 const_declaration: KW_CONST • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 31


State 10

   14 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   20 main_function: KW_DEF • KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 32
    KW_MAIN     shift, and go to state 33


State 11

   48 component: KW_COMP • IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 34


State 12

    6 top_level_list: top_level_list top_level •

    $default  reduce using rule 6 (top_level_list)


State 13

   10 top_level: var_declaration •

    $default  reduce using rule 10 (top_level)


State 14

   11 top_level: const_declaration •

    $default  reduce using rule 11 (top_level)


State 15

    7 top_level: function •

    $default  reduce using rule 7 (top_level)


State 16

    8 top_level: main_function •

    $default  reduce using rule 8 (top_level)


State 17

    9 top_level: component •

    $default  reduce using rule 9 (top_level)


State 18

   12 var_declaration: ident_list • COLON type SEMICOLON
   59 ident_list: ident_list • COMMA IDENTIFIER

    COLON  shift, and go to state 35
    COMMA  shift, and go to state 36


State 19

   80 function_call: IDENTIFIER • LPAREN arg_list RPAREN
   87 primary_expression: IDENTIFIER •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, LBRACKET, RBRACKET, COLON, SEMICOLON, COMMA, DOT]

    LPAREN  shift, and go to state 37

    $default  reduce using rule 87 (primary_expression)


State 20

   84 primary_expression: CONST_INT •

    $default  reduce using rule 84 (primary_expression)


State 21

   85 primary_expression: CONST_FLOAT •

    $default  reduce using rule 85 (primary_expression)


State 22

   86 primary_expression: CONST_STRING •

    $default  reduce using rule 86 (primary_expression)


State 23

   79 expression: CONST_BOOL_TRUE •

    $default  reduce using rule 79 (expression)


State 24

   78 expression: CONST_BOOL_FALSE •

    $default  reduce using rule 78 (expression)


State 25

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   75           | KW_NOT • expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 38
    function_call       go to state 29
    primary_expression  go to state 30


State 26

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   76           | OP_MINUS • expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 39
    function_call       go to state 29
    primary_expression  go to state 30


State 27

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   77           | LPAREN • expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 40
    function_call       go to state 29
    primary_expression  go to state 30


State 28

    4 macro_def: KW_DEFMACRO IDENTIFIER expression •  [$end, IDENTIFIER, KW_CONST, KW_DEF, KW_COMP, KW_DEFMACRO]
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 4 (macro_def)


State 29

   88 primary_expression: function_call •

    $default  reduce using rule 88 (primary_expression)


State 30

   60 expression: primary_expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   89 primary_expression: primary_expression • LBRACKET expression RBRACKET
   90                   | primary_expression • DOT IDENTIFIER

    LBRACKET  shift, and go to state 55
    DOT       shift, and go to state 56

    $default  reduce using rule 60 (expression)


State 31

   13 const_declaration: KW_CONST IDENTIFIER • OP_ASSIGN expression COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 57


State 32

   14 function: KW_DEF IDENTIFIER • LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF IDENTIFIER • LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 58


State 33

   20 main_function: KW_DEF KW_MAIN • LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 59


State 34

   48 component: KW_COMP IDENTIFIER • COLON component_body KW_ENDCOMP SEMICOLON

    COLON  shift, and go to state 60


State 35

   12 var_declaration: ident_list COLON • type SEMICOLON
   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 66


State 36

   59 ident_list: ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 67


State 37

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80              | IDENTIFIER LPAREN • arg_list RPAREN
   81 arg_list: ε •  [RPAREN, COMMA]
   82         | • expression
   83         | • arg_list COMMA expression
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    $default  reduce using rule 81 (arg_list)

    expression          go to state 68
    function_call       go to state 29
    arg_list            go to state 69
    primary_expression  go to state 30


State 38

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   75           | KW_NOT expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 75 (expression)

    Conflict between rule 75 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 75 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 75 and token OP_POW resolved as shift (KW_NOT < OP_POW).
    Conflict between rule 75 and token OP_EQ resolved as shift (KW_NOT < OP_EQ).
    Conflict between rule 75 and token OP_NEQ resolved as shift (KW_NOT < OP_NEQ).
    Conflict between rule 75 and token OP_LT resolved as shift (KW_NOT < OP_LT).
    Conflict between rule 75 and token OP_LEQ resolved as shift (KW_NOT < OP_LEQ).
    Conflict between rule 75 and token OP_GT resolved as shift (KW_NOT < OP_GT).
    Conflict between rule 75 and token OP_GEQ resolved as shift (KW_NOT < OP_GEQ).
    Conflict between rule 75 and token OP_PLUS resolved as shift (KW_NOT < OP_PLUS).
    Conflict between rule 75 and token OP_MINUS resolved as shift (KW_NOT < OP_MINUS).
    Conflict between rule 75 and token OP_MULT resolved as shift (KW_NOT < OP_MULT).
    Conflict between rule 75 and token OP_DIV resolved as shift (KW_NOT < OP_DIV).
    Conflict between rule 75 and token OP_MOD resolved as shift (KW_NOT < OP_MOD).


State 39

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   76           | OP_MINUS expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    $default  reduce using rule 76 (expression)

    Conflict between rule 76 and token KW_AND resolved as reduce (KW_AND < UMINUS).
    Conflict between rule 76 and token KW_OR resolved as reduce (KW_OR < UMINUS).
    Conflict between rule 76 and token OP_POW resolved as reduce (OP_POW < UMINUS).
    Conflict between rule 76 and token OP_EQ resolved as reduce (OP_EQ < UMINUS).
    Conflict between rule 76 and token OP_NEQ resolved as reduce (OP_NEQ < UMINUS).
    Conflict between rule 76 and token OP_LT resolved as reduce (OP_LT < UMINUS).
    Conflict between rule 76 and token OP_LEQ resolved as reduce (OP_LEQ < UMINUS).
    Conflict between rule 76 and token OP_GT resolved as reduce (OP_GT < UMINUS).
    Conflict between rule 76 and token OP_GEQ resolved as reduce (OP_GEQ < UMINUS).
    Conflict between rule 76 and token OP_PLUS resolved as reduce (OP_PLUS < UMINUS).
    Conflict between rule 76 and token OP_MINUS resolved as reduce (OP_MINUS < UMINUS).
    Conflict between rule 76 and token OP_MULT resolved as reduce (OP_MULT < UMINUS).
    Conflict between rule 76 and token OP_DIV resolved as reduce (OP_DIV < UMINUS).
    Conflict between rule 76 and token OP_MOD resolved as reduce (OP_MOD < UMINUS).


State 40

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   77           | LPAREN expression • RPAREN

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    RPAREN    shift, and go to state 70


State 41

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   73           | expression KW_AND • expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 71
    function_call       go to state 29
    primary_expression  go to state 30


State 42

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   74           | expression KW_OR • expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 72
    function_call       go to state 29
    primary_expression  go to state 30


State 43

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   66           | expression OP_POW • expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 73
    function_call       go to state 29
    primary_expression  go to state 30


State 44

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   67           | expression OP_EQ • expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 74
    function_call       go to state 29
    primary_expression  go to state 30


State 45

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   68           | expression OP_NEQ • expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 75
    function_call       go to state 29
    primary_expression  go to state 30


State 46

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   69           | expression OP_LT • expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 76
    function_call       go to state 29
    primary_expression  go to state 30


State 47

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   70           | expression OP_LEQ • expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 77
    function_call       go to state 29
    primary_expression  go to state 30


State 48

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   71           | expression OP_GT • expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 78
    function_call       go to state 29
    primary_expression  go to state 30


State 49

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   72           | expression OP_GEQ • expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 79
    function_call       go to state 29
    primary_expression  go to state 30


State 50

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   61           | expression OP_PLUS • expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 80
    function_call       go to state 29
    primary_expression  go to state 30


State 51

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   62           | expression OP_MINUS • expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 81
    function_call       go to state 29
    primary_expression  go to state 30


State 52

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   63           | expression OP_MULT • expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 82
    function_call       go to state 29
    primary_expression  go to state 30


State 53

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   64           | expression OP_DIV • expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 83
    function_call       go to state 29
    primary_expression  go to state 30


State 54

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   65           | expression OP_MOD • expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 84
    function_call       go to state 29
    primary_expression  go to state 30


State 55

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   89                   | primary_expression LBRACKET • expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 85
    function_call       go to state 29
    primary_expression  go to state 30


State 56

   90 primary_expression: primary_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 86


State 57

   13 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN • expression COLON type SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 87
    function_call       go to state 29
    primary_expression  go to state 30


State 58

   14 function: KW_DEF IDENTIFIER LPAREN • param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF IDENTIFIER LPAREN • param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   16 param_list: ε •  [RPAREN]
   17           | • param_decl_list
   18 param_decl_list: • IDENTIFIER COLON type
   19                | • param_decl_list COMMA IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 88

    $default  reduce using rule 16 (param_list)

    param_list       go to state 89
    param_decl_list  go to state 90


State 59

   20 main_function: KW_DEF KW_MAIN LPAREN • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 91


State 60

   48 component: KW_COMP IDENTIFIER COLON • component_body KW_ENDCOMP SEMICOLON
   49 component_body: ε •
   50               | • component_body component_member

    $default  reduce using rule 49 (component_body)

    component_body  go to state 92


State 61

   27 type: IDENTIFIER •

    $default  reduce using rule 27 (type)


State 62

   23 type: KW_INTEGER •

    $default  reduce using rule 23 (type)


State 63

   24 type: KW_SCALAR •

    $default  reduce using rule 24 (type)


State 64

   25 type: KW_STR •

    $default  reduce using rule 25 (type)


State 65

   26 type: KW_BOOL •

    $default  reduce using rule 26 (type)


State 66

   12 var_declaration: ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 93


State 67

   59 ident_list: ident_list COMMA IDENTIFIER •

    $default  reduce using rule 59 (ident_list)


State 68

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   82 arg_list: expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 82 (arg_list)


State 69

   80 function_call: IDENTIFIER LPAREN arg_list • RPAREN
   83 arg_list: arg_list • COMMA expression

    RPAREN  shift, and go to state 94
    COMMA   shift, and go to state 95


State 70

   77 expression: LPAREN expression RPAREN •

    $default  reduce using rule 77 (expression)


State 71

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   73           | expression KW_AND expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 73 (expression)

    Conflict between rule 73 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 73 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 73 and token OP_POW resolved as shift (KW_AND < OP_POW).
    Conflict between rule 73 and token OP_EQ resolved as shift (KW_AND < OP_EQ).
    Conflict between rule 73 and token OP_NEQ resolved as shift (KW_AND < OP_NEQ).
    Conflict between rule 73 and token OP_LT resolved as shift (KW_AND < OP_LT).
    Conflict between rule 73 and token OP_LEQ resolved as shift (KW_AND < OP_LEQ).
    Conflict between rule 73 and token OP_GT resolved as shift (KW_AND < OP_GT).
    Conflict between rule 73 and token OP_GEQ resolved as shift (KW_AND < OP_GEQ).
    Conflict between rule 73 and token OP_PLUS resolved as shift (KW_AND < OP_PLUS).
    Conflict between rule 73 and token OP_MINUS resolved as shift (KW_AND < OP_MINUS).
    Conflict between rule 73 and token OP_MULT resolved as shift (KW_AND < OP_MULT).
    Conflict between rule 73 and token OP_DIV resolved as shift (KW_AND < OP_DIV).
    Conflict between rule 73 and token OP_MOD resolved as shift (KW_AND < OP_MOD).


State 72

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   74           | expression KW_OR expression •  [$end, IDENTIFIER, KW_CONST, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    KW_AND    shift, and go to state 41
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 74 (expression)

    Conflict between rule 74 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 74 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 74 and token OP_POW resolved as shift (KW_OR < OP_POW).
    Conflict between rule 74 and token OP_EQ resolved as shift (KW_OR < OP_EQ).
    Conflict between rule 74 and token OP_NEQ resolved as shift (KW_OR < OP_NEQ).
    Conflict between rule 74 and token OP_LT resolved as shift (KW_OR < OP_LT).
    Conflict between rule 74 and token OP_LEQ resolved as shift (KW_OR < OP_LEQ).
    Conflict between rule 74 and token OP_GT resolved as shift (KW_OR < OP_GT).
    Conflict between rule 74 and token OP_GEQ resolved as shift (KW_OR < OP_GEQ).
    Conflict between rule 74 and token OP_PLUS resolved as shift (KW_OR < OP_PLUS).
    Conflict between rule 74 and token OP_MINUS resolved as shift (KW_OR < OP_MINUS).
    Conflict between rule 74 and token OP_MULT resolved as shift (KW_OR < OP_MULT).
    Conflict between rule 74 and token OP_DIV resolved as shift (KW_OR < OP_DIV).
    Conflict between rule 74 and token OP_MOD resolved as shift (KW_OR < OP_MOD).


State 73

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   66           | expression OP_POW expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW  shift, and go to state 43

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token KW_AND resolved as reduce (KW_AND < OP_POW).
    Conflict between rule 66 and token KW_OR resolved as reduce (KW_OR < OP_POW).
    Conflict between rule 66 and token OP_POW resolved as shift (%right OP_POW).
    Conflict between rule 66 and token OP_EQ resolved as reduce (OP_EQ < OP_POW).
    Conflict between rule 66 and token OP_NEQ resolved as reduce (OP_NEQ < OP_POW).
    Conflict between rule 66 and token OP_LT resolved as reduce (OP_LT < OP_POW).
    Conflict between rule 66 and token OP_LEQ resolved as reduce (OP_LEQ < OP_POW).
    Conflict between rule 66 and token OP_GT resolved as reduce (OP_GT < OP_POW).
    Conflict between rule 66 and token OP_GEQ resolved as reduce (OP_GEQ < OP_POW).
    Conflict between rule 66 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POW).
    Conflict between rule 66 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POW).
    Conflict between rule 66 and token OP_MULT resolved as reduce (OP_MULT < OP_POW).
    Conflict between rule 66 and token OP_DIV resolved as reduce (OP_DIV < OP_POW).
    Conflict between rule 66 and token OP_MOD resolved as reduce (OP_MOD < OP_POW).


State 74

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   67           | expression OP_EQ expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token KW_AND resolved as reduce (KW_AND < OP_EQ).
    Conflict between rule 67 and token KW_OR resolved as reduce (KW_OR < OP_EQ).
    Conflict between rule 67 and token OP_POW resolved as shift (OP_EQ < OP_POW).
    Conflict between rule 67 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 67 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 67 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 67 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 67 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 67 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 67 and token OP_PLUS resolved as shift (OP_EQ < OP_PLUS).
    Conflict between rule 67 and token OP_MINUS resolved as shift (OP_EQ < OP_MINUS).
    Conflict between rule 67 and token OP_MULT resolved as shift (OP_EQ < OP_MULT).
    Conflict between rule 67 and token OP_DIV resolved as shift (OP_EQ < OP_DIV).
    Conflict between rule 67 and token OP_MOD resolved as shift (OP_EQ < OP_MOD).


State 75

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   68           | expression OP_NEQ expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token KW_AND resolved as reduce (KW_AND < OP_NEQ).
    Conflict between rule 68 and token KW_OR resolved as reduce (KW_OR < OP_NEQ).
    Conflict between rule 68 and token OP_POW resolved as shift (OP_NEQ < OP_POW).
    Conflict between rule 68 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 68 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 68 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 68 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 68 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 68 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 68 and token OP_PLUS resolved as shift (OP_NEQ < OP_PLUS).
    Conflict between rule 68 and token OP_MINUS resolved as shift (OP_NEQ < OP_MINUS).
    Conflict between rule 68 and token OP_MULT resolved as shift (OP_NEQ < OP_MULT).
    Conflict between rule 68 and token OP_DIV resolved as shift (OP_NEQ < OP_DIV).
    Conflict between rule 68 and token OP_MOD resolved as shift (OP_NEQ < OP_MOD).


State 76

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   69           | expression OP_LT expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token KW_AND resolved as reduce (KW_AND < OP_LT).
    Conflict between rule 69 and token KW_OR resolved as reduce (KW_OR < OP_LT).
    Conflict between rule 69 and token OP_POW resolved as shift (OP_LT < OP_POW).
    Conflict between rule 69 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 69 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 69 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 69 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 69 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 69 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 69 and token OP_PLUS resolved as shift (OP_LT < OP_PLUS).
    Conflict between rule 69 and token OP_MINUS resolved as shift (OP_LT < OP_MINUS).
    Conflict between rule 69 and token OP_MULT resolved as shift (OP_LT < OP_MULT).
    Conflict between rule 69 and token OP_DIV resolved as shift (OP_LT < OP_DIV).
    Conflict between rule 69 and token OP_MOD resolved as shift (OP_LT < OP_MOD).


State 77

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   70           | expression OP_LEQ expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token KW_AND resolved as reduce (KW_AND < OP_LEQ).
    Conflict between rule 70 and token KW_OR resolved as reduce (KW_OR < OP_LEQ).
    Conflict between rule 70 and token OP_POW resolved as shift (OP_LEQ < OP_POW).
    Conflict between rule 70 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 70 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 70 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 70 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 70 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 70 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 70 and token OP_PLUS resolved as shift (OP_LEQ < OP_PLUS).
    Conflict between rule 70 and token OP_MINUS resolved as shift (OP_LEQ < OP_MINUS).
    Conflict between rule 70 and token OP_MULT resolved as shift (OP_LEQ < OP_MULT).
    Conflict between rule 70 and token OP_DIV resolved as shift (OP_LEQ < OP_DIV).
    Conflict between rule 70 and token OP_MOD resolved as shift (OP_LEQ < OP_MOD).


State 78

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   71           | expression OP_GT expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token KW_AND resolved as reduce (KW_AND < OP_GT).
    Conflict between rule 71 and token KW_OR resolved as reduce (KW_OR < OP_GT).
    Conflict between rule 71 and token OP_POW resolved as shift (OP_GT < OP_POW).
    Conflict between rule 71 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 71 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 71 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 71 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 71 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 71 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 71 and token OP_PLUS resolved as shift (OP_GT < OP_PLUS).
    Conflict between rule 71 and token OP_MINUS resolved as shift (OP_GT < OP_MINUS).
    Conflict between rule 71 and token OP_MULT resolved as shift (OP_GT < OP_MULT).
    Conflict between rule 71 and token OP_DIV resolved as shift (OP_GT < OP_DIV).
    Conflict between rule 71 and token OP_MOD resolved as shift (OP_GT < OP_MOD).


State 79

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   72           | expression OP_GEQ expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW    shift, and go to state 43
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token KW_AND resolved as reduce (KW_AND < OP_GEQ).
    Conflict between rule 72 and token KW_OR resolved as reduce (KW_OR < OP_GEQ).
    Conflict between rule 72 and token OP_POW resolved as shift (OP_GEQ < OP_POW).
    Conflict between rule 72 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 72 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 72 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 72 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 72 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 72 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 72 and token OP_PLUS resolved as shift (OP_GEQ < OP_PLUS).
    Conflict between rule 72 and token OP_MINUS resolved as shift (OP_GEQ < OP_MINUS).
    Conflict between rule 72 and token OP_MULT resolved as shift (OP_GEQ < OP_MULT).
    Conflict between rule 72 and token OP_DIV resolved as shift (OP_GEQ < OP_DIV).
    Conflict between rule 72 and token OP_MOD resolved as shift (OP_GEQ < OP_MOD).


State 80

   61 expression: expression • OP_PLUS expression
   61           | expression OP_PLUS expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW   shift, and go to state 43
    OP_MULT  shift, and go to state 52
    OP_DIV   shift, and go to state 53
    OP_MOD   shift, and go to state 54

    $default  reduce using rule 61 (expression)

    Conflict between rule 61 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 61 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).
    Conflict between rule 61 and token OP_POW resolved as shift (OP_PLUS < OP_POW).
    Conflict between rule 61 and token OP_EQ resolved as reduce (OP_EQ < OP_PLUS).
    Conflict between rule 61 and token OP_NEQ resolved as reduce (OP_NEQ < OP_PLUS).
    Conflict between rule 61 and token OP_LT resolved as reduce (OP_LT < OP_PLUS).
    Conflict between rule 61 and token OP_LEQ resolved as reduce (OP_LEQ < OP_PLUS).
    Conflict between rule 61 and token OP_GT resolved as reduce (OP_GT < OP_PLUS).
    Conflict between rule 61 and token OP_GEQ resolved as reduce (OP_GEQ < OP_PLUS).
    Conflict between rule 61 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 61 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 61 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 61 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 61 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).


State 81

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   62           | expression OP_MINUS expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW   shift, and go to state 43
    OP_MULT  shift, and go to state 52
    OP_DIV   shift, and go to state 53
    OP_MOD   shift, and go to state 54

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 62 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).
    Conflict between rule 62 and token OP_POW resolved as shift (OP_MINUS < OP_POW).
    Conflict between rule 62 and token OP_EQ resolved as reduce (OP_EQ < OP_MINUS).
    Conflict between rule 62 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MINUS).
    Conflict between rule 62 and token OP_LT resolved as reduce (OP_LT < OP_MINUS).
    Conflict between rule 62 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MINUS).
    Conflict between rule 62 and token OP_GT resolved as reduce (OP_GT < OP_MINUS).
    Conflict between rule 62 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MINUS).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 62 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 62 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 62 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).


State 82

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   63           | expression OP_MULT expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW  shift, and go to state 43

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token KW_AND resolved as reduce (KW_AND < OP_MULT).
    Conflict between rule 63 and token KW_OR resolved as reduce (KW_OR < OP_MULT).
    Conflict between rule 63 and token OP_POW resolved as shift (OP_MULT < OP_POW).
    Conflict between rule 63 and token OP_EQ resolved as reduce (OP_EQ < OP_MULT).
    Conflict between rule 63 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MULT).
    Conflict between rule 63 and token OP_LT resolved as reduce (OP_LT < OP_MULT).
    Conflict between rule 63 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MULT).
    Conflict between rule 63 and token OP_GT resolved as reduce (OP_GT < OP_MULT).
    Conflict between rule 63 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MULT).
    Conflict between rule 63 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 63 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 63 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 63 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 63 and token OP_MOD resolved as reduce (%left OP_MOD).


State 83

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   64           | expression OP_DIV expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW  shift, and go to state 43

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token KW_AND resolved as reduce (KW_AND < OP_DIV).
    Conflict between rule 64 and token KW_OR resolved as reduce (KW_OR < OP_DIV).
    Conflict between rule 64 and token OP_POW resolved as shift (OP_DIV < OP_POW).
    Conflict between rule 64 and token OP_EQ resolved as reduce (OP_EQ < OP_DIV).
    Conflict between rule 64 and token OP_NEQ resolved as reduce (OP_NEQ < OP_DIV).
    Conflict between rule 64 and token OP_LT resolved as reduce (OP_LT < OP_DIV).
    Conflict between rule 64 and token OP_LEQ resolved as reduce (OP_LEQ < OP_DIV).
    Conflict between rule 64 and token OP_GT resolved as reduce (OP_GT < OP_DIV).
    Conflict between rule 64 and token OP_GEQ resolved as reduce (OP_GEQ < OP_DIV).
    Conflict between rule 64 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 64 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 64 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 64 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 64 and token OP_MOD resolved as reduce (%left OP_MOD).


State 84

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   65           | expression OP_MOD expression •  [$end, IDENTIFIER, KW_CONST, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    OP_POW  shift, and go to state 43

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token KW_AND resolved as reduce (KW_AND < OP_MOD).
    Conflict between rule 65 and token KW_OR resolved as reduce (KW_OR < OP_MOD).
    Conflict between rule 65 and token OP_POW resolved as shift (OP_MOD < OP_POW).
    Conflict between rule 65 and token OP_EQ resolved as reduce (OP_EQ < OP_MOD).
    Conflict between rule 65 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MOD).
    Conflict between rule 65 and token OP_LT resolved as reduce (OP_LT < OP_MOD).
    Conflict between rule 65 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MOD).
    Conflict between rule 65 and token OP_GT resolved as reduce (OP_GT < OP_MOD).
    Conflict between rule 65 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MOD).
    Conflict between rule 65 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 65 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 65 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 65 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 65 and token OP_MOD resolved as reduce (%left OP_MOD).


State 85

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   89 primary_expression: primary_expression LBRACKET expression • RBRACKET

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    RBRACKET  shift, and go to state 96


State 86

   90 primary_expression: primary_expression DOT IDENTIFIER •

    $default  reduce using rule 90 (primary_expression)


State 87

   13 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression • COLON type SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    COLON     shift, and go to state 97


State 88

   18 param_decl_list: IDENTIFIER • COLON type

    COLON  shift, and go to state 98


State 89

   14 function: KW_DEF IDENTIFIER LPAREN param_list • RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF IDENTIFIER LPAREN param_list • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 99


State 90

   17 param_list: param_decl_list •  [RPAREN]
   19 param_decl_list: param_decl_list • COMMA IDENTIFIER COLON type

    COMMA  shift, and go to state 100

    $default  reduce using rule 17 (param_list)


State 91

   20 main_function: KW_DEF KW_MAIN LPAREN RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 101


State 92

   14 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   48 component: KW_COMP IDENTIFIER COLON component_body • KW_ENDCOMP SEMICOLON
   50 component_body: component_body • component_member
   51 component_member: • hash_ident_list COLON type SEMICOLON
   52                 | • hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   53                 | • function
   54                 | • SEMICOLON
   55                 | • error SEMICOLON
   56 hash_ident_list: • IDENTIFIER
   57                | • hash_ident_list COMMA IDENTIFIER

    error       shift, and go to state 102
    IDENTIFIER  shift, and go to state 103
    KW_DEF      shift, and go to state 104
    KW_ENDCOMP  shift, and go to state 105
    SEMICOLON   shift, and go to state 106

    function          go to state 107
    component_member  go to state 108
    hash_ident_list   go to state 109


State 93

   12 var_declaration: ident_list COLON type SEMICOLON •

    $default  reduce using rule 12 (var_declaration)


State 94

   80 function_call: IDENTIFIER LPAREN arg_list RPAREN •

    $default  reduce using rule 80 (function_call)


State 95

   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   83 arg_list: arg_list COMMA • expression
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 110
    function_call       go to state 29
    primary_expression  go to state 30


State 96

   89 primary_expression: primary_expression LBRACKET expression RBRACKET •

    $default  reduce using rule 89 (primary_expression)


State 97

   13 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON • type SEMICOLON
   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 111


State 98

   18 param_decl_list: IDENTIFIER COLON • type
   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 112


State 99

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN • OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF IDENTIFIER LPAREN param_list RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON     shift, and go to state 113
    OP_ARROW  shift, and go to state 114


State 100

   19 param_decl_list: param_decl_list COMMA • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 115


State 101

   20 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON • block KW_ENDDEF SEMICOLON
   91 block: ε •
   92      | • block var_declaration
   93      | • block stmt

    $default  reduce using rule 91 (block)

    block  go to state 116


State 102

   55 component_member: error • SEMICOLON

    SEMICOLON  shift, and go to state 117


State 103

   56 hash_ident_list: IDENTIFIER •

    $default  reduce using rule 56 (hash_ident_list)


State 104

   14 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   15         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 32


State 105

   48 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 118


State 106

   54 component_member: SEMICOLON •

    $default  reduce using rule 54 (component_member)


State 107

   53 component_member: function •

    $default  reduce using rule 53 (component_member)


State 108

   50 component_body: component_body component_member •

    $default  reduce using rule 50 (component_body)


State 109

   51 component_member: hash_ident_list • COLON type SEMICOLON
   52                 | hash_ident_list • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   57 hash_ident_list: hash_ident_list • COMMA IDENTIFIER

    LBRACKET  shift, and go to state 119
    COLON     shift, and go to state 120
    COMMA     shift, and go to state 121


State 110

   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression
   83 arg_list: arg_list COMMA expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54

    $default  reduce using rule 83 (arg_list)


State 111

   13 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 122


State 112

   18 param_decl_list: IDENTIFIER COLON type •

    $default  reduce using rule 18 (param_decl_list)


State 113

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON • block KW_ENDDEF SEMICOLON
   91 block: ε •
   92      | • block var_declaration
   93      | • block stmt

    $default  reduce using rule 91 (block)

    block  go to state 123


State 114

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW • type COLON block KW_ENDDEF SEMICOLON
   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 124


State 115

   19 param_decl_list: param_decl_list COMMA IDENTIFIER • COLON type

    COLON  shift, and go to state 125


State 116

   12 var_declaration: • ident_list COLON type SEMICOLON
   20 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block • KW_ENDDEF SEMICOLON
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   58 ident_list: • IDENTIFIER
   59           | • ident_list COMMA IDENTIFIER
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 block: block • var_declaration
   93      | block • stmt

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 127
    KW_IF        shift, and go to state 128
    KW_FOR       shift, and go to state 129
    KW_WHILE     shift, and go to state 130
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_ENDDEF    shift, and go to state 133
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    var_declaration  go to state 136
    stmt             go to state 137
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    ident_list       go to state 18
    function_call    go to state 146


State 117

   55 component_member: error SEMICOLON •

    $default  reduce using rule 55 (component_member)


State 118

   48 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON •

    $default  reduce using rule 48 (component)


State 119

   52 component_member: hash_ident_list LBRACKET • CONST_INT RBRACKET COLON type SEMICOLON

    CONST_INT  shift, and go to state 147


State 120

   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER
   51 component_member: hash_ident_list COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 148


State 121

   57 hash_ident_list: hash_ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 149


State 122

   13 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON •

    $default  reduce using rule 13 (const_declaration)


State 123

   12 var_declaration: • ident_list COLON type SEMICOLON
   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block • KW_ENDDEF SEMICOLON
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   58 ident_list: • IDENTIFIER
   59           | • ident_list COMMA IDENTIFIER
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 block: block • var_declaration
   93      | block • stmt

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 127
    KW_IF        shift, and go to state 128
    KW_FOR       shift, and go to state 129
    KW_WHILE     shift, and go to state 130
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_ENDDEF    shift, and go to state 150
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    var_declaration  go to state 136
    stmt             go to state 137
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    ident_list       go to state 18
    function_call    go to state 146


State 124

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 151


State 125

   19 param_decl_list: param_decl_list COMMA IDENTIFIER COLON • type
   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 152


State 126

   37 stmt: error • SEMICOLON

    SEMICOLON  shift, and go to state 153


State 127

   38 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   58 ident_list: IDENTIFIER •  [COLON, COMMA]
   80 function_call: IDENTIFIER • LPAREN arg_list RPAREN

    OP_ASSIGN  shift, and go to state 154
    LPAREN     shift, and go to state 37

    $default  reduce using rule 58 (ident_list)


State 128

   41 if_stmt: KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    LPAREN  shift, and go to state 155


State 129

   43 for_stmt: KW_FOR • IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 156


State 130

   44 while_stmt: KW_WHILE • LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

    LPAREN  shift, and go to state 157


State 131

   45 break_stmt: KW_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 158


State 132

   46 continue_stmt: KW_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 159


State 133

   20 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 160


State 134

   39 return_stmt: KW_RETURN • expression SEMICOLON
   40            | KW_RETURN • SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    SEMICOLON         shift, and go to state 161

    expression          go to state 162
    function_call       go to state 29
    primary_expression  go to state 30


State 135

   47 empty_stmt: SEMICOLON •

    $default  reduce using rule 47 (empty_stmt)


State 136

   92 block: block var_declaration •

    $default  reduce using rule 92 (block)


State 137

   93 block: block stmt •

    $default  reduce using rule 93 (block)


State 138

   28 stmt: assignment_stmt •

    $default  reduce using rule 28 (stmt)


State 139

   29 stmt: return_stmt •

    $default  reduce using rule 29 (stmt)


State 140

   30 stmt: if_stmt •

    $default  reduce using rule 30 (stmt)


State 141

   31 stmt: for_stmt •

    $default  reduce using rule 31 (stmt)


State 142

   32 stmt: while_stmt •

    $default  reduce using rule 32 (stmt)


State 143

   33 stmt: break_stmt •

    $default  reduce using rule 33 (stmt)


State 144

   34 stmt: continue_stmt •

    $default  reduce using rule 34 (stmt)


State 145

   35 stmt: empty_stmt •

    $default  reduce using rule 35 (stmt)


State 146

   36 stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 163


State 147

   52 component_member: hash_ident_list LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 164


State 148

   51 component_member: hash_ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 165


State 149

   57 hash_ident_list: hash_ident_list COMMA IDENTIFIER •

    $default  reduce using rule 57 (hash_ident_list)


State 150

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 166


State 151

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON • block KW_ENDDEF SEMICOLON
   91 block: ε •
   92      | • block var_declaration
   93      | • block stmt

    $default  reduce using rule 91 (block)

    block  go to state 167


State 152

   19 param_decl_list: param_decl_list COMMA IDENTIFIER COLON type •

    $default  reduce using rule 19 (param_decl_list)


State 153

   37 stmt: error SEMICOLON •

    $default  reduce using rule 37 (stmt)


State 154

   38 assignment_stmt: IDENTIFIER OP_ASSIGN • expression SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 168
    function_call       go to state 29
    primary_expression  go to state 30


State 155

   41 if_stmt: KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 169
    function_call       go to state 29
    primary_expression  go to state 30


State 156

   43 for_stmt: KW_FOR IDENTIFIER • KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 170


State 157

   44 while_stmt: KW_WHILE LPAREN • expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 171
    function_call       go to state 29
    primary_expression  go to state 30


State 158

   45 break_stmt: KW_BREAK SEMICOLON •

    $default  reduce using rule 45 (break_stmt)


State 159

   46 continue_stmt: KW_CONTINUE SEMICOLON •

    $default  reduce using rule 46 (continue_stmt)


State 160

   20 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 20 (main_function)


State 161

   40 return_stmt: KW_RETURN SEMICOLON •

    $default  reduce using rule 40 (return_stmt)


State 162

   39 return_stmt: KW_RETURN expression • SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND     shift, and go to state 41
    KW_OR      shift, and go to state 42
    OP_POW     shift, and go to state 43
    OP_EQ      shift, and go to state 44
    OP_NEQ     shift, and go to state 45
    OP_LT      shift, and go to state 46
    OP_LEQ     shift, and go to state 47
    OP_GT      shift, and go to state 48
    OP_GEQ     shift, and go to state 49
    OP_PLUS    shift, and go to state 50
    OP_MINUS   shift, and go to state 51
    OP_MULT    shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54
    SEMICOLON  shift, and go to state 172


State 163

   36 stmt: function_call SEMICOLON •

    $default  reduce using rule 36 (stmt)


State 164

   52 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 173


State 165

   51 component_member: hash_ident_list COLON type SEMICOLON •

    $default  reduce using rule 51 (component_member)


State 166

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 15 (function)


State 167

   12 var_declaration: • ident_list COLON type SEMICOLON
   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block • KW_ENDDEF SEMICOLON
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   58 ident_list: • IDENTIFIER
   59           | • ident_list COMMA IDENTIFIER
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 block: block • var_declaration
   93      | block • stmt

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 127
    KW_IF        shift, and go to state 128
    KW_FOR       shift, and go to state 129
    KW_WHILE     shift, and go to state 130
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_ENDDEF    shift, and go to state 174
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    var_declaration  go to state 136
    stmt             go to state 137
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    ident_list       go to state 18
    function_call    go to state 146


State 168

   38 assignment_stmt: IDENTIFIER OP_ASSIGN expression • SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND     shift, and go to state 41
    KW_OR      shift, and go to state 42
    OP_POW     shift, and go to state 43
    OP_EQ      shift, and go to state 44
    OP_NEQ     shift, and go to state 45
    OP_LT      shift, and go to state 46
    OP_LEQ     shift, and go to state 47
    OP_GT      shift, and go to state 48
    OP_GEQ     shift, and go to state 49
    OP_PLUS    shift, and go to state 50
    OP_MINUS   shift, and go to state 51
    OP_MULT    shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54
    SEMICOLON  shift, and go to state 175


State 169

   41 if_stmt: KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    RPAREN    shift, and go to state 176


State 170

   43 for_stmt: KW_FOR IDENTIFIER KW_IN • LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 177


State 171

   44 while_stmt: KW_WHILE LPAREN expression • RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    RPAREN    shift, and go to state 178


State 172

   39 return_stmt: KW_RETURN expression SEMICOLON •

    $default  reduce using rule 39 (return_stmt)


State 173

   23 type: • KW_INTEGER
   24     | • KW_SCALAR
   25     | • KW_STR
   26     | • KW_BOOL
   27     | • IDENTIFIER
   52 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 61
    KW_INTEGER  shift, and go to state 62
    KW_SCALAR   shift, and go to state 63
    KW_STR      shift, and go to state 64
    KW_BOOL     shift, and go to state 65

    type  go to state 179


State 174

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 180


State 175

   38 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 38 (assignment_stmt)


State 176

   41 if_stmt: KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 181


State 177

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET • expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 182
    function_call       go to state 29
    primary_expression  go to state 30


State 178

   44 while_stmt: KW_WHILE LPAREN expression RPAREN • COLON stmt_list KW_ENDWHILE SEMICOLON

    COLON  shift, and go to state 183


State 179

   52 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 184


State 180

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 14 (function)


State 181

   21 stmt_list: ε •
   22          | • stmt_list stmt
   41 if_stmt: KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 21 (stmt_list)

    stmt_list  go to state 185


State 182

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression • COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    COLON     shift, and go to state 186


State 183

   21 stmt_list: ε •
   22          | • stmt_list stmt
   44 while_stmt: KW_WHILE LPAREN expression RPAREN COLON • stmt_list KW_ENDWHILE SEMICOLON

    $default  reduce using rule 21 (stmt_list)

    stmt_list  go to state 187


State 184

   52 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 52 (component_member)


State 185

   22 stmt_list: stmt_list • stmt
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   41        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 188
    KW_IF        shift, and go to state 128
    KW_ELSE      shift, and go to state 189
    KW_ENDIF     shift, and go to state 190
    KW_FOR       shift, and go to state 129
    KW_WHILE     shift, and go to state 130
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    stmt             go to state 191
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    function_call    go to state 146


State 186

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON • expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   60 expression: • primary_expression
   61           | • expression OP_PLUS expression
   62           | • expression OP_MINUS expression
   63           | • expression OP_MULT expression
   64           | • expression OP_DIV expression
   65           | • expression OP_MOD expression
   66           | • expression OP_POW expression
   67           | • expression OP_EQ expression
   68           | • expression OP_NEQ expression
   69           | • expression OP_LT expression
   70           | • expression OP_LEQ expression
   71           | • expression OP_GT expression
   72           | • expression OP_GEQ expression
   73           | • expression KW_AND expression
   74           | • expression KW_OR expression
   75           | • KW_NOT expression
   76           | • OP_MINUS expression
   77           | • LPAREN expression RPAREN
   78           | • CONST_BOOL_FALSE
   79           | • CONST_BOOL_TRUE
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   84 primary_expression: • CONST_INT
   85                   | • CONST_FLOAT
   86                   | • CONST_STRING
   87                   | • IDENTIFIER
   88                   | • function_call
   89                   | • primary_expression LBRACKET expression RBRACKET
   90                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27

    expression          go to state 192
    function_call       go to state 29
    primary_expression  go to state 30


State 187

   22 stmt_list: stmt_list • stmt
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   44           | KW_WHILE LPAREN expression RPAREN COLON stmt_list • KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 188
    KW_IF        shift, and go to state 128
    KW_FOR       shift, and go to state 129
    KW_WHILE     shift, and go to state 130
    KW_ENDWHILE  shift, and go to state 193
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    stmt             go to state 191
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    function_call    go to state 146


State 188

   38 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   80 function_call: IDENTIFIER • LPAREN arg_list RPAREN

    OP_ASSIGN  shift, and go to state 154
    LPAREN     shift, and go to state 37


State 189

   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE • COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 194


State 190

   41 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 195


State 191

   22 stmt_list: stmt_list stmt •

    $default  reduce using rule 22 (stmt_list)


State 192

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression • RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   61 expression: expression • OP_PLUS expression
   62           | expression • OP_MINUS expression
   63           | expression • OP_MULT expression
   64           | expression • OP_DIV expression
   65           | expression • OP_MOD expression
   66           | expression • OP_POW expression
   67           | expression • OP_EQ expression
   68           | expression • OP_NEQ expression
   69           | expression • OP_LT expression
   70           | expression • OP_LEQ expression
   71           | expression • OP_GT expression
   72           | expression • OP_GEQ expression
   73           | expression • KW_AND expression
   74           | expression • KW_OR expression

    KW_AND    shift, and go to state 41
    KW_OR     shift, and go to state 42
    OP_POW    shift, and go to state 43
    OP_EQ     shift, and go to state 44
    OP_NEQ    shift, and go to state 45
    OP_LT     shift, and go to state 46
    OP_LEQ    shift, and go to state 47
    OP_GT     shift, and go to state 48
    OP_GEQ    shift, and go to state 49
    OP_PLUS   shift, and go to state 50
    OP_MINUS  shift, and go to state 51
    OP_MULT   shift, and go to state 52
    OP_DIV    shift, and go to state 53
    OP_MOD    shift, and go to state 54
    RBRACKET  shift, and go to state 196


State 193

   44 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 197


State 194

   21 stmt_list: ε •
   22          | • stmt_list stmt
   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON • stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 21 (stmt_list)

    stmt_list  go to state 198


State 195

   41 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 41 (if_stmt)


State 196

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET • COLON stmt_list KW_ENDFOR SEMICOLON

    COLON  shift, and go to state 199


State 197

   44 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON •

    $default  reduce using rule 44 (while_stmt)


State 198

   22 stmt_list: stmt_list • stmt
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list • KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 188
    KW_IF        shift, and go to state 128
    KW_ENDIF     shift, and go to state 200
    KW_FOR       shift, and go to state 129
    KW_WHILE     shift, and go to state 130
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    stmt             go to state 191
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    function_call    go to state 146


State 199

   21 stmt_list: ε •
   22          | • stmt_list stmt
   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON • stmt_list KW_ENDFOR SEMICOLON

    $default  reduce using rule 21 (stmt_list)

    stmt_list  go to state 201


State 200

   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 202


State 201

   22 stmt_list: stmt_list • stmt
   28 stmt: • assignment_stmt
   29     | • return_stmt
   30     | • if_stmt
   31     | • for_stmt
   32     | • while_stmt
   33     | • break_stmt
   34     | • continue_stmt
   35     | • empty_stmt
   36     | • function_call SEMICOLON
   37     | • error SEMICOLON
   38 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   39 return_stmt: • KW_RETURN expression SEMICOLON
   40            | • KW_RETURN SEMICOLON
   41 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   43         | KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list • KW_ENDFOR SEMICOLON
   44 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45 break_stmt: • KW_BREAK SEMICOLON
   46 continue_stmt: • KW_CONTINUE SEMICOLON
   47 empty_stmt: • SEMICOLON
   80 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 126
    IDENTIFIER   shift, and go to state 188
    KW_IF        shift, and go to state 128
    KW_FOR       shift, and go to state 129
    KW_ENDFOR    shift, and go to state 203
    KW_WHILE     shift, and go to state 130
    KW_BREAK     shift, and go to state 131
    KW_CONTINUE  shift, and go to state 132
    KW_RETURN    shift, and go to state 134
    SEMICOLON    shift, and go to state 135

    stmt             go to state 191
    assignment_stmt  go to state 138
    return_stmt      go to state 139
    if_stmt          go to state 140
    for_stmt         go to state 141
    while_stmt       go to state 142
    break_stmt       go to state 143
    continue_stmt    go to state 144
    empty_stmt       go to state 145
    function_call    go to state 146


State 202

   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 42 (if_stmt)


State 203

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 204


State 204

   43 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON •

    $default  reduce using rule 43 (for_stmt)
