Terminals unused in grammar

    KW_OF
    OP_PLUSEQ
    OP_MINUSEQ
    OP_MULTEQ
    OP_DIVEQ
    OP_MODEQ
    OP_DEFINE
    HASH
    DECLARATION
    STMT
    NO_COMPARE


State 124 conflicts: 2 shift/reduce
State 169 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: macro_def_list top_level_list

    2 macro_def_list: ε
    3               | macro_def_list macro_def

    4 macro_def: KW_DEFMACRO IDENTIFIER expression SEMICOLON

    5 top_level_list: ε
    6               | top_level_list top_level

    7 top_level: function
    8          | main_function
    9          | component
   10          | var_declaration
   11          | const_declaration

   12 var_declaration: ident_list COLON type SEMICOLON
   13                | IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   14                | error SEMICOLON

   15 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

   18 param_list: ε
   19           | param_decl_list

   20 param_decl_list: IDENTIFIER COLON type
   21                | param_decl_list COMMA IDENTIFIER COLON type

   22 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

   23 stmt_list: ε
   24          | stmt_list stmt

   25 type: KW_INTEGER
   26     | KW_SCALAR
   27     | KW_STR
   28     | KW_BOOL
   29     | IDENTIFIER

   30 stmt: assignment_stmt
   31     | return_stmt
   32     | if_stmt
   33     | for_stmt
   34     | while_stmt
   35     | break_stmt
   36     | continue_stmt
   37     | empty_stmt
   38     | function_call SEMICOLON
   39     | error SEMICOLON

   40 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON

   41 return_stmt: KW_RETURN expression SEMICOLON

   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

   45 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

   46 break_stmt: KW_BREAK SEMICOLON

   47 continue_stmt: KW_CONTINUE SEMICOLON

   48 empty_stmt: SEMICOLON

   49 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

   50 component_body: ε
   51               | component_body component_member

   52 component_member: hash_ident_list COLON type SEMICOLON
   53                 | hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   54                 | function
   55                 | SEMICOLON
   56                 | error SEMICOLON

   57 hash_ident_list: IDENTIFIER
   58                | hash_ident_list COMMA IDENTIFIER

   59 ident_list: IDENTIFIER
   60           | ident_list COMMA IDENTIFIER

   61 expression: primary_expression
   62           | expression OP_PLUS expression
   63           | expression OP_MINUS expression
   64           | expression OP_MULT expression
   65           | expression OP_DIV expression
   66           | expression OP_MOD expression
   67           | expression OP_POW expression
   68           | expression OP_EQ expression
   69           | expression OP_NEQ expression
   70           | expression OP_LT expression
   71           | expression OP_LEQ expression
   72           | expression OP_GT expression
   73           | expression OP_GEQ expression
   74           | expression KW_AND expression
   75           | expression KW_OR expression
   76           | KW_NOT expression
   77           | OP_MINUS expression
   78           | LPAREN expression RPAREN
   79           | CONST_BOOL_FALSE
   80           | CONST_BOOL_TRUE

   81 function_call: IDENTIFIER LPAREN arg_list RPAREN
   82              | IDENTIFIER LPAREN RPAREN

   83 arg_list: ε
   84         | expression
   85         | arg_list COMMA expression

   86 primary_expression: CONST_INT
   87                   | CONST_FLOAT
   88                   | CONST_STRING
   89                   | IDENTIFIER
   90                   | IDENTIFIER LPAREN arg_list RPAREN
   91                   | primary_expression LBRACKET expression RBRACKET
   92                   | primary_expression DOT IDENTIFIER

   93 block: decl_list stmt_list

   94 decl_list: ε
   95          | decl_list var_declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256) 14 39 56
    IDENTIFIER <string> (258) 4 13 15 16 17 20 21 29 40 44 49 57 58 59 60 81 82 89 90 92
    CONST_INT <string> (259) 53 86
    CONST_FLOAT <string> (260) 87
    CONST_STRING <string> (261) 88
    CONST_BOOL_TRUE (262) 80
    CONST_BOOL_FALSE (263) 79
    KW_INTEGER (264) 25
    KW_SCALAR (265) 26
    KW_STR (266) 27
    KW_BOOL (267) 28
    KW_CONST (268) 15
    KW_IF (269) 42 43
    KW_ELSE (270) 43
    KW_ENDIF (271) 42 43
    KW_FOR (272) 44
    KW_IN (273) 44
    KW_ENDFOR (274) 44
    KW_WHILE (275) 45
    KW_ENDWHILE (276) 45
    KW_BREAK (277) 46
    KW_CONTINUE (278) 47
    KW_NOT (279) 76
    KW_AND (280) 74
    KW_OR (281) 75
    KW_DEF (282) 16 17 22
    KW_ENDDEF (283) 16 17 22
    KW_MAIN (284) 22
    KW_RETURN (285) 41
    KW_COMP (286) 49
    KW_ENDCOMP (287) 49
    KW_OF (288)
    KW_DEFMACRO (289) 4
    OP_ASSIGN (290) 13 15 40
    OP_PLUSEQ (291)
    OP_MINUSEQ (292)
    OP_MULTEQ (293)
    OP_DIVEQ (294)
    OP_MODEQ (295)
    OP_DEFINE (296)
    OP_POW (297) 67
    OP_EQ (298) 68
    OP_NEQ (299) 69
    OP_LT (300) 70
    OP_LEQ (301) 71
    OP_GT (302) 72
    OP_GEQ (303) 73
    OP_PLUS (304) 62
    OP_MINUS (305) 63 77
    OP_MULT (306) 64
    OP_DIV (307) 65
    OP_MOD (308) 66
    LPAREN (309) 16 17 22 42 43 45 78 81 82 90
    RPAREN (310) 16 17 22 42 43 45 78 81 82 90
    LBRACKET (311) 44 53 91
    RBRACKET (312) 44 53 91
    COLON (313) 12 13 15 16 17 20 21 22 42 43 44 45 49 52 53
    SEMICOLON (314) 4 12 13 14 15 16 17 22 38 39 40 41 42 43 44 45 46 47 48 49 52 53 55 56
    COMMA (315) 21 58 60 85
    DOT (316) 92
    OP_ARROW (317) 16
    HASH (318)
    UMINUS (319)
    DECLARATION (320)
    STMT (321)
    NO_COMPARE (322)


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    program <string> (69)
        on left: 1
        on right: 0
    macro_def_list <string> (70)
        on left: 2 3
        on right: 1 3
    macro_def <string> (71)
        on left: 4
        on right: 3
    top_level_list <string> (72)
        on left: 5 6
        on right: 1 6
    top_level <string> (73)
        on left: 7 8 9 10 11
        on right: 6
    var_declaration <string> (74)
        on left: 12 13 14
        on right: 10 95
    const_declaration <string> (75)
        on left: 15
        on right: 11
    function <string> (76)
        on left: 16 17
        on right: 7 54
    param_list <string> (77)
        on left: 18 19
        on right: 16 17
    param_decl_list <string> (78)
        on left: 20 21
        on right: 19 21
    main_function <string> (79)
        on left: 22
        on right: 8
    stmt_list <string> (80)
        on left: 23 24
        on right: 24 42 43 44 45 93
    type <string> (81)
        on left: 25 26 27 28 29
        on right: 12 13 15 16 20 21 52 53
    stmt <string> (82)
        on left: 30 31 32 33 34 35 36 37 38 39
        on right: 24
    assignment_stmt <string> (83)
        on left: 40
        on right: 30
    return_stmt <string> (84)
        on left: 41
        on right: 31
    if_stmt <string> (85)
        on left: 42 43
        on right: 32
    for_stmt <string> (86)
        on left: 44
        on right: 33
    while_stmt <string> (87)
        on left: 45
        on right: 34
    break_stmt <string> (88)
        on left: 46
        on right: 35
    continue_stmt <string> (89)
        on left: 47
        on right: 36
    empty_stmt <string> (90)
        on left: 48
        on right: 37
    component <string> (91)
        on left: 49
        on right: 9
    component_body <string> (92)
        on left: 50 51
        on right: 49 51
    component_member <string> (93)
        on left: 52 53 54 55 56
        on right: 51
    hash_ident_list <string> (94)
        on left: 57 58
        on right: 52 53 58
    ident_list <string> (95)
        on left: 59 60
        on right: 12 60
    expression <string> (96)
        on left: 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
        on right: 4 13 15 40 41 42 43 44 45 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 84 85 91
    function_call <string> (97)
        on left: 81 82
        on right: 38
    arg_list <string> (98)
        on left: 83 84 85
        on right: 81 85 90
    primary_expression <string> (99)
        on left: 86 87 88 89 90 91 92
        on right: 61 91 92
    block <string> (100)
        on left: 93
        on right: 16 17 22
    decl_list <string> (101)
        on left: 94 95
        on right: 93 95


State 0

    0 $accept: • program $end
    1 program: • macro_def_list top_level_list
    2 macro_def_list: ε •
    3               | • macro_def_list macro_def

    $default  reduce using rule 2 (macro_def_list)

    program         go to state 1
    macro_def_list  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: macro_def_list • top_level_list
    3 macro_def_list: macro_def_list • macro_def
    4 macro_def: • KW_DEFMACRO IDENTIFIER expression SEMICOLON
    5 top_level_list: ε •  [$end, error, IDENTIFIER, KW_CONST, KW_DEF, KW_COMP]
    6               | • top_level_list top_level

    KW_DEFMACRO  shift, and go to state 4

    $default  reduce using rule 5 (top_level_list)

    macro_def       go to state 5
    top_level_list  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 macro_def: KW_DEFMACRO • IDENTIFIER expression SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    3 macro_def_list: macro_def_list macro_def •

    $default  reduce using rule 3 (macro_def_list)


State 6

    1 program: macro_def_list top_level_list •  [$end]
    6 top_level_list: top_level_list • top_level
    7 top_level: • function
    8          | • main_function
    9          | • component
   10          | • var_declaration
   11          | • const_declaration
   12 var_declaration: • ident_list COLON type SEMICOLON
   13                | • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   14                | • error SEMICOLON
   15 const_declaration: • KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   16 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   22 main_function: • KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON
   49 component: • KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON
   59 ident_list: • IDENTIFIER
   60           | • ident_list COMMA IDENTIFIER

    error       shift, and go to state 8
    IDENTIFIER  shift, and go to state 9
    KW_CONST    shift, and go to state 10
    KW_DEF      shift, and go to state 11
    KW_COMP     shift, and go to state 12

    $end  reduce using rule 1 (program)

    top_level          go to state 13
    var_declaration    go to state 14
    const_declaration  go to state 15
    function           go to state 16
    main_function      go to state 17
    component          go to state 18
    ident_list         go to state 19


State 7

    4 macro_def: KW_DEFMACRO IDENTIFIER • expression SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 29
    primary_expression  go to state 30


State 8

   14 var_declaration: error • SEMICOLON

    SEMICOLON  shift, and go to state 31


State 9

   13 var_declaration: IDENTIFIER • OP_ASSIGN expression COLON type SEMICOLON
   59 ident_list: IDENTIFIER •  [COLON, COMMA]

    OP_ASSIGN  shift, and go to state 32

    $default  reduce using rule 59 (ident_list)


State 10

   15 const_declaration: KW_CONST • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 33


State 11

   16 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   22 main_function: KW_DEF • KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 34
    KW_MAIN     shift, and go to state 35


State 12

   49 component: KW_COMP • IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 36


State 13

    6 top_level_list: top_level_list top_level •

    $default  reduce using rule 6 (top_level_list)


State 14

   10 top_level: var_declaration •

    $default  reduce using rule 10 (top_level)


State 15

   11 top_level: const_declaration •

    $default  reduce using rule 11 (top_level)


State 16

    7 top_level: function •

    $default  reduce using rule 7 (top_level)


State 17

    8 top_level: main_function •

    $default  reduce using rule 8 (top_level)


State 18

    9 top_level: component •

    $default  reduce using rule 9 (top_level)


State 19

   12 var_declaration: ident_list • COLON type SEMICOLON
   60 ident_list: ident_list • COMMA IDENTIFIER

    COLON  shift, and go to state 37
    COMMA  shift, and go to state 38


State 20

   89 primary_expression: IDENTIFIER •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, LBRACKET, RBRACKET, COLON, SEMICOLON, COMMA, DOT]
   90                   | IDENTIFIER • LPAREN arg_list RPAREN

    LPAREN  shift, and go to state 39

    $default  reduce using rule 89 (primary_expression)


State 21

   86 primary_expression: CONST_INT •

    $default  reduce using rule 86 (primary_expression)


State 22

   87 primary_expression: CONST_FLOAT •

    $default  reduce using rule 87 (primary_expression)


State 23

   88 primary_expression: CONST_STRING •

    $default  reduce using rule 88 (primary_expression)


State 24

   80 expression: CONST_BOOL_TRUE •

    $default  reduce using rule 80 (expression)


State 25

   79 expression: CONST_BOOL_FALSE •

    $default  reduce using rule 79 (expression)


State 26

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   76           | KW_NOT • expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 40
    primary_expression  go to state 30


State 27

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   77           | OP_MINUS • expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 41
    primary_expression  go to state 30


State 28

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   78           | LPAREN • expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 42
    primary_expression  go to state 30


State 29

    4 macro_def: KW_DEFMACRO IDENTIFIER expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 43
    KW_OR      shift, and go to state 44
    OP_POW     shift, and go to state 45
    OP_EQ      shift, and go to state 46
    OP_NEQ     shift, and go to state 47
    OP_LT      shift, and go to state 48
    OP_LEQ     shift, and go to state 49
    OP_GT      shift, and go to state 50
    OP_GEQ     shift, and go to state 51
    OP_PLUS    shift, and go to state 52
    OP_MINUS   shift, and go to state 53
    OP_MULT    shift, and go to state 54
    OP_DIV     shift, and go to state 55
    OP_MOD     shift, and go to state 56
    SEMICOLON  shift, and go to state 57


State 30

   61 expression: primary_expression •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   91 primary_expression: primary_expression • LBRACKET expression RBRACKET
   92                   | primary_expression • DOT IDENTIFIER

    LBRACKET  shift, and go to state 58
    DOT       shift, and go to state 59

    $default  reduce using rule 61 (expression)


State 31

   14 var_declaration: error SEMICOLON •

    $default  reduce using rule 14 (var_declaration)


State 32

   13 var_declaration: IDENTIFIER OP_ASSIGN • expression COLON type SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 60
    primary_expression  go to state 30


State 33

   15 const_declaration: KW_CONST IDENTIFIER • OP_ASSIGN expression COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 61


State 34

   16 function: KW_DEF IDENTIFIER • LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF IDENTIFIER • LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 62


State 35

   22 main_function: KW_DEF KW_MAIN • LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 63


State 36

   49 component: KW_COMP IDENTIFIER • COLON component_body KW_ENDCOMP SEMICOLON

    COLON  shift, and go to state 64


State 37

   12 var_declaration: ident_list COLON • type SEMICOLON
   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 70


State 38

   60 ident_list: ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 71


State 39

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   83 arg_list: ε •  [RPAREN, COMMA]
   84         | • expression
   85         | • arg_list COMMA expression
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   90                   | IDENTIFIER LPAREN • arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    $default  reduce using rule 83 (arg_list)

    expression          go to state 72
    arg_list            go to state 73
    primary_expression  go to state 30


State 40

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   76           | KW_NOT expression •  [KW_AND, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 76 (expression)

    Conflict between rule 76 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 76 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 76 and token OP_POW resolved as shift (KW_NOT < OP_POW).
    Conflict between rule 76 and token OP_EQ resolved as shift (KW_NOT < OP_EQ).
    Conflict between rule 76 and token OP_NEQ resolved as shift (KW_NOT < OP_NEQ).
    Conflict between rule 76 and token OP_LT resolved as shift (KW_NOT < OP_LT).
    Conflict between rule 76 and token OP_LEQ resolved as shift (KW_NOT < OP_LEQ).
    Conflict between rule 76 and token OP_GT resolved as shift (KW_NOT < OP_GT).
    Conflict between rule 76 and token OP_GEQ resolved as shift (KW_NOT < OP_GEQ).
    Conflict between rule 76 and token OP_PLUS resolved as shift (KW_NOT < OP_PLUS).
    Conflict between rule 76 and token OP_MINUS resolved as shift (KW_NOT < OP_MINUS).
    Conflict between rule 76 and token OP_MULT resolved as shift (KW_NOT < OP_MULT).
    Conflict between rule 76 and token OP_DIV resolved as shift (KW_NOT < OP_DIV).
    Conflict between rule 76 and token OP_MOD resolved as shift (KW_NOT < OP_MOD).


State 41

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   77           | OP_MINUS expression •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    $default  reduce using rule 77 (expression)

    Conflict between rule 77 and token KW_AND resolved as reduce (KW_AND < UMINUS).
    Conflict between rule 77 and token KW_OR resolved as reduce (KW_OR < UMINUS).
    Conflict between rule 77 and token OP_POW resolved as reduce (OP_POW < UMINUS).
    Conflict between rule 77 and token OP_EQ resolved as reduce (OP_EQ < UMINUS).
    Conflict between rule 77 and token OP_NEQ resolved as reduce (OP_NEQ < UMINUS).
    Conflict between rule 77 and token OP_LT resolved as reduce (OP_LT < UMINUS).
    Conflict between rule 77 and token OP_LEQ resolved as reduce (OP_LEQ < UMINUS).
    Conflict between rule 77 and token OP_GT resolved as reduce (OP_GT < UMINUS).
    Conflict between rule 77 and token OP_GEQ resolved as reduce (OP_GEQ < UMINUS).
    Conflict between rule 77 and token OP_PLUS resolved as reduce (OP_PLUS < UMINUS).
    Conflict between rule 77 and token OP_MINUS resolved as reduce (OP_MINUS < UMINUS).
    Conflict between rule 77 and token OP_MULT resolved as reduce (OP_MULT < UMINUS).
    Conflict between rule 77 and token OP_DIV resolved as reduce (OP_DIV < UMINUS).
    Conflict between rule 77 and token OP_MOD resolved as reduce (OP_MOD < UMINUS).


State 42

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   78           | LPAREN expression • RPAREN

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    RPAREN    shift, and go to state 74


State 43

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   74           | expression KW_AND • expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 75
    primary_expression  go to state 30


State 44

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   75           | expression KW_OR • expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 76
    primary_expression  go to state 30


State 45

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   67           | expression OP_POW • expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 77
    primary_expression  go to state 30


State 46

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   68           | expression OP_EQ • expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 78
    primary_expression  go to state 30


State 47

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   69           | expression OP_NEQ • expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 79
    primary_expression  go to state 30


State 48

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   70           | expression OP_LT • expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 80
    primary_expression  go to state 30


State 49

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   71           | expression OP_LEQ • expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 81
    primary_expression  go to state 30


State 50

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   72           | expression OP_GT • expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 82
    primary_expression  go to state 30


State 51

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   73           | expression OP_GEQ • expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 83
    primary_expression  go to state 30


State 52

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   62           | expression OP_PLUS • expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 84
    primary_expression  go to state 30


State 53

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   63           | expression OP_MINUS • expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 85
    primary_expression  go to state 30


State 54

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   64           | expression OP_MULT • expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 86
    primary_expression  go to state 30


State 55

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   65           | expression OP_DIV • expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 87
    primary_expression  go to state 30


State 56

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   66           | expression OP_MOD • expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 88
    primary_expression  go to state 30


State 57

    4 macro_def: KW_DEFMACRO IDENTIFIER expression SEMICOLON •

    $default  reduce using rule 4 (macro_def)


State 58

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   91                   | primary_expression LBRACKET • expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 89
    primary_expression  go to state 30


State 59

   92 primary_expression: primary_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 90


State 60

   13 var_declaration: IDENTIFIER OP_ASSIGN expression • COLON type SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    COLON     shift, and go to state 91


State 61

   15 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN • expression COLON type SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 92
    primary_expression  go to state 30


State 62

   16 function: KW_DEF IDENTIFIER LPAREN • param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF IDENTIFIER LPAREN • param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   18 param_list: ε •  [RPAREN]
   19           | • param_decl_list
   20 param_decl_list: • IDENTIFIER COLON type
   21                | • param_decl_list COMMA IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 93

    $default  reduce using rule 18 (param_list)

    param_list       go to state 94
    param_decl_list  go to state 95


State 63

   22 main_function: KW_DEF KW_MAIN LPAREN • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 96


State 64

   49 component: KW_COMP IDENTIFIER COLON • component_body KW_ENDCOMP SEMICOLON
   50 component_body: ε •
   51               | • component_body component_member

    $default  reduce using rule 50 (component_body)

    component_body  go to state 97


State 65

   29 type: IDENTIFIER •

    $default  reduce using rule 29 (type)


State 66

   25 type: KW_INTEGER •

    $default  reduce using rule 25 (type)


State 67

   26 type: KW_SCALAR •

    $default  reduce using rule 26 (type)


State 68

   27 type: KW_STR •

    $default  reduce using rule 27 (type)


State 69

   28 type: KW_BOOL •

    $default  reduce using rule 28 (type)


State 70

   12 var_declaration: ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 98


State 71

   60 ident_list: ident_list COMMA IDENTIFIER •

    $default  reduce using rule 60 (ident_list)


State 72

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   84 arg_list: expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 84 (arg_list)


State 73

   85 arg_list: arg_list • COMMA expression
   90 primary_expression: IDENTIFIER LPAREN arg_list • RPAREN

    RPAREN  shift, and go to state 99
    COMMA   shift, and go to state 100


State 74

   78 expression: LPAREN expression RPAREN •

    $default  reduce using rule 78 (expression)


State 75

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   74           | expression KW_AND expression •  [KW_AND, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 74 (expression)

    Conflict between rule 74 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 74 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 74 and token OP_POW resolved as shift (KW_AND < OP_POW).
    Conflict between rule 74 and token OP_EQ resolved as shift (KW_AND < OP_EQ).
    Conflict between rule 74 and token OP_NEQ resolved as shift (KW_AND < OP_NEQ).
    Conflict between rule 74 and token OP_LT resolved as shift (KW_AND < OP_LT).
    Conflict between rule 74 and token OP_LEQ resolved as shift (KW_AND < OP_LEQ).
    Conflict between rule 74 and token OP_GT resolved as shift (KW_AND < OP_GT).
    Conflict between rule 74 and token OP_GEQ resolved as shift (KW_AND < OP_GEQ).
    Conflict between rule 74 and token OP_PLUS resolved as shift (KW_AND < OP_PLUS).
    Conflict between rule 74 and token OP_MINUS resolved as shift (KW_AND < OP_MINUS).
    Conflict between rule 74 and token OP_MULT resolved as shift (KW_AND < OP_MULT).
    Conflict between rule 74 and token OP_DIV resolved as shift (KW_AND < OP_DIV).
    Conflict between rule 74 and token OP_MOD resolved as shift (KW_AND < OP_MOD).


State 76

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   75           | expression KW_OR expression •  [KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    KW_AND    shift, and go to state 43
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 75 (expression)

    Conflict between rule 75 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 75 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 75 and token OP_POW resolved as shift (KW_OR < OP_POW).
    Conflict between rule 75 and token OP_EQ resolved as shift (KW_OR < OP_EQ).
    Conflict between rule 75 and token OP_NEQ resolved as shift (KW_OR < OP_NEQ).
    Conflict between rule 75 and token OP_LT resolved as shift (KW_OR < OP_LT).
    Conflict between rule 75 and token OP_LEQ resolved as shift (KW_OR < OP_LEQ).
    Conflict between rule 75 and token OP_GT resolved as shift (KW_OR < OP_GT).
    Conflict between rule 75 and token OP_GEQ resolved as shift (KW_OR < OP_GEQ).
    Conflict between rule 75 and token OP_PLUS resolved as shift (KW_OR < OP_PLUS).
    Conflict between rule 75 and token OP_MINUS resolved as shift (KW_OR < OP_MINUS).
    Conflict between rule 75 and token OP_MULT resolved as shift (KW_OR < OP_MULT).
    Conflict between rule 75 and token OP_DIV resolved as shift (KW_OR < OP_DIV).
    Conflict between rule 75 and token OP_MOD resolved as shift (KW_OR < OP_MOD).


State 77

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   67           | expression OP_POW expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 45

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token KW_AND resolved as reduce (KW_AND < OP_POW).
    Conflict between rule 67 and token KW_OR resolved as reduce (KW_OR < OP_POW).
    Conflict between rule 67 and token OP_POW resolved as shift (%right OP_POW).
    Conflict between rule 67 and token OP_EQ resolved as reduce (OP_EQ < OP_POW).
    Conflict between rule 67 and token OP_NEQ resolved as reduce (OP_NEQ < OP_POW).
    Conflict between rule 67 and token OP_LT resolved as reduce (OP_LT < OP_POW).
    Conflict between rule 67 and token OP_LEQ resolved as reduce (OP_LEQ < OP_POW).
    Conflict between rule 67 and token OP_GT resolved as reduce (OP_GT < OP_POW).
    Conflict between rule 67 and token OP_GEQ resolved as reduce (OP_GEQ < OP_POW).
    Conflict between rule 67 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POW).
    Conflict between rule 67 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POW).
    Conflict between rule 67 and token OP_MULT resolved as reduce (OP_MULT < OP_POW).
    Conflict between rule 67 and token OP_DIV resolved as reduce (OP_DIV < OP_POW).
    Conflict between rule 67 and token OP_MOD resolved as reduce (OP_MOD < OP_POW).


State 78

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   68           | expression OP_EQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token KW_AND resolved as reduce (KW_AND < OP_EQ).
    Conflict between rule 68 and token KW_OR resolved as reduce (KW_OR < OP_EQ).
    Conflict between rule 68 and token OP_POW resolved as shift (OP_EQ < OP_POW).
    Conflict between rule 68 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 68 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 68 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 68 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 68 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 68 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 68 and token OP_PLUS resolved as shift (OP_EQ < OP_PLUS).
    Conflict between rule 68 and token OP_MINUS resolved as shift (OP_EQ < OP_MINUS).
    Conflict between rule 68 and token OP_MULT resolved as shift (OP_EQ < OP_MULT).
    Conflict between rule 68 and token OP_DIV resolved as shift (OP_EQ < OP_DIV).
    Conflict between rule 68 and token OP_MOD resolved as shift (OP_EQ < OP_MOD).


State 79

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   69           | expression OP_NEQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token KW_AND resolved as reduce (KW_AND < OP_NEQ).
    Conflict between rule 69 and token KW_OR resolved as reduce (KW_OR < OP_NEQ).
    Conflict between rule 69 and token OP_POW resolved as shift (OP_NEQ < OP_POW).
    Conflict between rule 69 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 69 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 69 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 69 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 69 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 69 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 69 and token OP_PLUS resolved as shift (OP_NEQ < OP_PLUS).
    Conflict between rule 69 and token OP_MINUS resolved as shift (OP_NEQ < OP_MINUS).
    Conflict between rule 69 and token OP_MULT resolved as shift (OP_NEQ < OP_MULT).
    Conflict between rule 69 and token OP_DIV resolved as shift (OP_NEQ < OP_DIV).
    Conflict between rule 69 and token OP_MOD resolved as shift (OP_NEQ < OP_MOD).


State 80

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   70           | expression OP_LT expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token KW_AND resolved as reduce (KW_AND < OP_LT).
    Conflict between rule 70 and token KW_OR resolved as reduce (KW_OR < OP_LT).
    Conflict between rule 70 and token OP_POW resolved as shift (OP_LT < OP_POW).
    Conflict between rule 70 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 70 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 70 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 70 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 70 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 70 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 70 and token OP_PLUS resolved as shift (OP_LT < OP_PLUS).
    Conflict between rule 70 and token OP_MINUS resolved as shift (OP_LT < OP_MINUS).
    Conflict between rule 70 and token OP_MULT resolved as shift (OP_LT < OP_MULT).
    Conflict between rule 70 and token OP_DIV resolved as shift (OP_LT < OP_DIV).
    Conflict between rule 70 and token OP_MOD resolved as shift (OP_LT < OP_MOD).


State 81

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   71           | expression OP_LEQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token KW_AND resolved as reduce (KW_AND < OP_LEQ).
    Conflict between rule 71 and token KW_OR resolved as reduce (KW_OR < OP_LEQ).
    Conflict between rule 71 and token OP_POW resolved as shift (OP_LEQ < OP_POW).
    Conflict between rule 71 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 71 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 71 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 71 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 71 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 71 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 71 and token OP_PLUS resolved as shift (OP_LEQ < OP_PLUS).
    Conflict between rule 71 and token OP_MINUS resolved as shift (OP_LEQ < OP_MINUS).
    Conflict between rule 71 and token OP_MULT resolved as shift (OP_LEQ < OP_MULT).
    Conflict between rule 71 and token OP_DIV resolved as shift (OP_LEQ < OP_DIV).
    Conflict between rule 71 and token OP_MOD resolved as shift (OP_LEQ < OP_MOD).


State 82

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   72           | expression OP_GT expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token KW_AND resolved as reduce (KW_AND < OP_GT).
    Conflict between rule 72 and token KW_OR resolved as reduce (KW_OR < OP_GT).
    Conflict between rule 72 and token OP_POW resolved as shift (OP_GT < OP_POW).
    Conflict between rule 72 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 72 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 72 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 72 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 72 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 72 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 72 and token OP_PLUS resolved as shift (OP_GT < OP_PLUS).
    Conflict between rule 72 and token OP_MINUS resolved as shift (OP_GT < OP_MINUS).
    Conflict between rule 72 and token OP_MULT resolved as shift (OP_GT < OP_MULT).
    Conflict between rule 72 and token OP_DIV resolved as shift (OP_GT < OP_DIV).
    Conflict between rule 72 and token OP_MOD resolved as shift (OP_GT < OP_MOD).


State 83

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   73           | expression OP_GEQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 45
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 73 (expression)

    Conflict between rule 73 and token KW_AND resolved as reduce (KW_AND < OP_GEQ).
    Conflict between rule 73 and token KW_OR resolved as reduce (KW_OR < OP_GEQ).
    Conflict between rule 73 and token OP_POW resolved as shift (OP_GEQ < OP_POW).
    Conflict between rule 73 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 73 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 73 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 73 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 73 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 73 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 73 and token OP_PLUS resolved as shift (OP_GEQ < OP_PLUS).
    Conflict between rule 73 and token OP_MINUS resolved as shift (OP_GEQ < OP_MINUS).
    Conflict between rule 73 and token OP_MULT resolved as shift (OP_GEQ < OP_MULT).
    Conflict between rule 73 and token OP_DIV resolved as shift (OP_GEQ < OP_DIV).
    Conflict between rule 73 and token OP_MOD resolved as shift (OP_GEQ < OP_MOD).


State 84

   62 expression: expression • OP_PLUS expression
   62           | expression OP_PLUS expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW   shift, and go to state 45
    OP_MULT  shift, and go to state 54
    OP_DIV   shift, and go to state 55
    OP_MOD   shift, and go to state 56

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 62 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).
    Conflict between rule 62 and token OP_POW resolved as shift (OP_PLUS < OP_POW).
    Conflict between rule 62 and token OP_EQ resolved as reduce (OP_EQ < OP_PLUS).
    Conflict between rule 62 and token OP_NEQ resolved as reduce (OP_NEQ < OP_PLUS).
    Conflict between rule 62 and token OP_LT resolved as reduce (OP_LT < OP_PLUS).
    Conflict between rule 62 and token OP_LEQ resolved as reduce (OP_LEQ < OP_PLUS).
    Conflict between rule 62 and token OP_GT resolved as reduce (OP_GT < OP_PLUS).
    Conflict between rule 62 and token OP_GEQ resolved as reduce (OP_GEQ < OP_PLUS).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 62 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 62 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 62 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).


State 85

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   63           | expression OP_MINUS expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW   shift, and go to state 45
    OP_MULT  shift, and go to state 54
    OP_DIV   shift, and go to state 55
    OP_MOD   shift, and go to state 56

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 63 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).
    Conflict between rule 63 and token OP_POW resolved as shift (OP_MINUS < OP_POW).
    Conflict between rule 63 and token OP_EQ resolved as reduce (OP_EQ < OP_MINUS).
    Conflict between rule 63 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MINUS).
    Conflict between rule 63 and token OP_LT resolved as reduce (OP_LT < OP_MINUS).
    Conflict between rule 63 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MINUS).
    Conflict between rule 63 and token OP_GT resolved as reduce (OP_GT < OP_MINUS).
    Conflict between rule 63 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MINUS).
    Conflict between rule 63 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 63 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 63 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 63 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 63 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).


State 86

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   64           | expression OP_MULT expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 45

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token KW_AND resolved as reduce (KW_AND < OP_MULT).
    Conflict between rule 64 and token KW_OR resolved as reduce (KW_OR < OP_MULT).
    Conflict between rule 64 and token OP_POW resolved as shift (OP_MULT < OP_POW).
    Conflict between rule 64 and token OP_EQ resolved as reduce (OP_EQ < OP_MULT).
    Conflict between rule 64 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MULT).
    Conflict between rule 64 and token OP_LT resolved as reduce (OP_LT < OP_MULT).
    Conflict between rule 64 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MULT).
    Conflict between rule 64 and token OP_GT resolved as reduce (OP_GT < OP_MULT).
    Conflict between rule 64 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MULT).
    Conflict between rule 64 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 64 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 64 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 64 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 64 and token OP_MOD resolved as reduce (%left OP_MOD).


State 87

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   65           | expression OP_DIV expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 45

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token KW_AND resolved as reduce (KW_AND < OP_DIV).
    Conflict between rule 65 and token KW_OR resolved as reduce (KW_OR < OP_DIV).
    Conflict between rule 65 and token OP_POW resolved as shift (OP_DIV < OP_POW).
    Conflict between rule 65 and token OP_EQ resolved as reduce (OP_EQ < OP_DIV).
    Conflict between rule 65 and token OP_NEQ resolved as reduce (OP_NEQ < OP_DIV).
    Conflict between rule 65 and token OP_LT resolved as reduce (OP_LT < OP_DIV).
    Conflict between rule 65 and token OP_LEQ resolved as reduce (OP_LEQ < OP_DIV).
    Conflict between rule 65 and token OP_GT resolved as reduce (OP_GT < OP_DIV).
    Conflict between rule 65 and token OP_GEQ resolved as reduce (OP_GEQ < OP_DIV).
    Conflict between rule 65 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 65 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 65 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 65 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 65 and token OP_MOD resolved as reduce (%left OP_MOD).


State 88

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   66           | expression OP_MOD expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 45

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token KW_AND resolved as reduce (KW_AND < OP_MOD).
    Conflict between rule 66 and token KW_OR resolved as reduce (KW_OR < OP_MOD).
    Conflict between rule 66 and token OP_POW resolved as shift (OP_MOD < OP_POW).
    Conflict between rule 66 and token OP_EQ resolved as reduce (OP_EQ < OP_MOD).
    Conflict between rule 66 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MOD).
    Conflict between rule 66 and token OP_LT resolved as reduce (OP_LT < OP_MOD).
    Conflict between rule 66 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MOD).
    Conflict between rule 66 and token OP_GT resolved as reduce (OP_GT < OP_MOD).
    Conflict between rule 66 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MOD).
    Conflict between rule 66 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 66 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 66 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 66 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 66 and token OP_MOD resolved as reduce (%left OP_MOD).


State 89

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   91 primary_expression: primary_expression LBRACKET expression • RBRACKET

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    RBRACKET  shift, and go to state 101


State 90

   92 primary_expression: primary_expression DOT IDENTIFIER •

    $default  reduce using rule 92 (primary_expression)


State 91

   13 var_declaration: IDENTIFIER OP_ASSIGN expression COLON • type SEMICOLON
   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 102


State 92

   15 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression • COLON type SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    COLON     shift, and go to state 103


State 93

   20 param_decl_list: IDENTIFIER • COLON type

    COLON  shift, and go to state 104


State 94

   16 function: KW_DEF IDENTIFIER LPAREN param_list • RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF IDENTIFIER LPAREN param_list • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 105


State 95

   19 param_list: param_decl_list •  [RPAREN]
   21 param_decl_list: param_decl_list • COMMA IDENTIFIER COLON type

    COMMA  shift, and go to state 106

    $default  reduce using rule 19 (param_list)


State 96

   22 main_function: KW_DEF KW_MAIN LPAREN RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 107


State 97

   16 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   49 component: KW_COMP IDENTIFIER COLON component_body • KW_ENDCOMP SEMICOLON
   51 component_body: component_body • component_member
   52 component_member: • hash_ident_list COLON type SEMICOLON
   53                 | • hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   54                 | • function
   55                 | • SEMICOLON
   56                 | • error SEMICOLON
   57 hash_ident_list: • IDENTIFIER
   58                | • hash_ident_list COMMA IDENTIFIER

    error       shift, and go to state 108
    IDENTIFIER  shift, and go to state 109
    KW_DEF      shift, and go to state 110
    KW_ENDCOMP  shift, and go to state 111
    SEMICOLON   shift, and go to state 112

    function          go to state 113
    component_member  go to state 114
    hash_ident_list   go to state 115


State 98

   12 var_declaration: ident_list COLON type SEMICOLON •

    $default  reduce using rule 12 (var_declaration)


State 99

   90 primary_expression: IDENTIFIER LPAREN arg_list RPAREN •

    $default  reduce using rule 90 (primary_expression)


State 100

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   85 arg_list: arg_list COMMA • expression
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 116
    primary_expression  go to state 30


State 101

   91 primary_expression: primary_expression LBRACKET expression RBRACKET •

    $default  reduce using rule 91 (primary_expression)


State 102

   13 var_declaration: IDENTIFIER OP_ASSIGN expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 117


State 103

   15 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON • type SEMICOLON
   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 118


State 104

   20 param_decl_list: IDENTIFIER COLON • type
   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 119


State 105

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN • OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF IDENTIFIER LPAREN param_list RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON     shift, and go to state 120
    OP_ARROW  shift, and go to state 121


State 106

   21 param_decl_list: param_decl_list COMMA • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 122


State 107

   22 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON • block KW_ENDDEF SEMICOLON
   93 block: • decl_list stmt_list
   94 decl_list: ε •
   95          | • decl_list var_declaration

    $default  reduce using rule 94 (decl_list)

    block      go to state 123
    decl_list  go to state 124


State 108

   56 component_member: error • SEMICOLON

    SEMICOLON  shift, and go to state 125


State 109

   57 hash_ident_list: IDENTIFIER •

    $default  reduce using rule 57 (hash_ident_list)


State 110

   16 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   17         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 34


State 111

   49 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 126


State 112

   55 component_member: SEMICOLON •

    $default  reduce using rule 55 (component_member)


State 113

   54 component_member: function •

    $default  reduce using rule 54 (component_member)


State 114

   51 component_body: component_body component_member •

    $default  reduce using rule 51 (component_body)


State 115

   52 component_member: hash_ident_list • COLON type SEMICOLON
   53                 | hash_ident_list • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   58 hash_ident_list: hash_ident_list • COMMA IDENTIFIER

    LBRACKET  shift, and go to state 127
    COLON     shift, and go to state 128
    COMMA     shift, and go to state 129


State 116

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   85 arg_list: arg_list COMMA expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56

    $default  reduce using rule 85 (arg_list)


State 117

   13 var_declaration: IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON •

    $default  reduce using rule 13 (var_declaration)


State 118

   15 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 130


State 119

   20 param_decl_list: IDENTIFIER COLON type •

    $default  reduce using rule 20 (param_decl_list)


State 120

   17 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON • block KW_ENDDEF SEMICOLON
   93 block: • decl_list stmt_list
   94 decl_list: ε •
   95          | • decl_list var_declaration

    $default  reduce using rule 94 (decl_list)

    block      go to state 131
    decl_list  go to state 124


State 121

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW • type COLON block KW_ENDDEF SEMICOLON
   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 132


State 122

   21 param_decl_list: param_decl_list COMMA IDENTIFIER • COLON type

    COLON  shift, and go to state 133


State 123

   22 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block • KW_ENDDEF SEMICOLON

    KW_ENDDEF  shift, and go to state 134


State 124

   12 var_declaration: • ident_list COLON type SEMICOLON
   13                | • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   14                | • error SEMICOLON
   23 stmt_list: ε •  [error, IDENTIFIER, KW_IF, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_ENDDEF, KW_RETURN, SEMICOLON]
   24          | • stmt_list stmt
   59 ident_list: • IDENTIFIER
   60           | • ident_list COMMA IDENTIFIER
   93 block: decl_list • stmt_list
   95 decl_list: decl_list • var_declaration

    error       shift, and go to state 8
    IDENTIFIER  shift, and go to state 9

    error        [reduce using rule 23 (stmt_list)]
    IDENTIFIER   [reduce using rule 23 (stmt_list)]
    KW_IF        reduce using rule 23 (stmt_list)
    KW_FOR       reduce using rule 23 (stmt_list)
    KW_WHILE     reduce using rule 23 (stmt_list)
    KW_BREAK     reduce using rule 23 (stmt_list)
    KW_CONTINUE  reduce using rule 23 (stmt_list)
    KW_ENDDEF    reduce using rule 23 (stmt_list)
    KW_RETURN    reduce using rule 23 (stmt_list)
    SEMICOLON    reduce using rule 23 (stmt_list)

    var_declaration  go to state 135
    stmt_list        go to state 136
    ident_list       go to state 19

    shift/reduce conflict on token IDENTIFIER:
       23 stmt_list: ε •
       13 var_declaration: • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
      First example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON decl_list • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON stmt_list KW_ENDDEF SEMICOLON $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                           $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list main_function
                                                     ↳ 22: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                                        KW_ENDDEF SEMICOLON
                                                                                              ↳ 93: decl_list                                                                    stmt_list
                                                                                                    ↳ 95: decl_list var_declaration
                                                                                                                    ↳ 13: • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
      Second example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON decl_list • IDENTIFIER OP_ASSIGN expression SEMICOLON KW_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                         $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list top_level
                                                     ↳ 8: main_function
                                                          ↳ 22: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                                 KW_ENDDEF SEMICOLON
                                                                                                   ↳ 93: decl_list stmt_list
                                                                                                                   ↳ 24: stmt_list stmt
                                                                                                                         ↳ 23: ε • ↳ 30: assignment_stmt
                                                                                                                                         ↳ 40: IDENTIFIER OP_ASSIGN expression SEMICOLON

    shift/reduce conflict on token error:
       23 stmt_list: ε •
       14 var_declaration: • error SEMICOLON
      First example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON decl_list • error SEMICOLON stmt_list KW_ENDDEF SEMICOLON $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                      $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list main_function
                                                     ↳ 22: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                   KW_ENDDEF SEMICOLON
                                                                                              ↳ 93: decl_list                               stmt_list
                                                                                                    ↳ 95: decl_list var_declaration
                                                                                                                    ↳ 14: • error SEMICOLON
      Second example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON decl_list • error SEMICOLON KW_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                         $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list top_level
                                                     ↳ 8: main_function
                                                          ↳ 22: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                 KW_ENDDEF SEMICOLON
                                                                                                   ↳ 93: decl_list stmt_list
                                                                                                                   ↳ 24: stmt_list stmt
                                                                                                                         ↳ 23: ε • ↳ 39: error SEMICOLON

    shift/reduce conflict on token IDENTIFIER:
       23 stmt_list: ε •
       59 ident_list: • IDENTIFIER
      First example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON decl_list • IDENTIFIER COLON type SEMICOLON stmt_list KW_ENDDEF SEMICOLON $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                            $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list main_function
                                                     ↳ 22: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                         KW_ENDDEF SEMICOLON
                                                                                              ↳ 93: decl_list                                                     stmt_list
                                                                                                    ↳ 95: decl_list var_declaration
                                                                                                                    ↳ 12: ident_list         COLON type SEMICOLON
                                                                                                                          ↳ 59: • IDENTIFIER
      Second example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON decl_list • IDENTIFIER OP_ASSIGN expression SEMICOLON KW_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                         $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list top_level
                                                     ↳ 8: main_function
                                                          ↳ 22: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                                 KW_ENDDEF SEMICOLON
                                                                                                   ↳ 93: decl_list stmt_list
                                                                                                                   ↳ 24: stmt_list stmt
                                                                                                                         ↳ 23: ε • ↳ 30: assignment_stmt
                                                                                                                                         ↳ 40: IDENTIFIER OP_ASSIGN expression SEMICOLON



State 125

   56 component_member: error SEMICOLON •

    $default  reduce using rule 56 (component_member)


State 126

   49 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON •

    $default  reduce using rule 49 (component)


State 127

   53 component_member: hash_ident_list LBRACKET • CONST_INT RBRACKET COLON type SEMICOLON

    CONST_INT  shift, and go to state 137


State 128

   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER
   52 component_member: hash_ident_list COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 138


State 129

   58 hash_ident_list: hash_ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 139


State 130

   15 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON •

    $default  reduce using rule 15 (const_declaration)


State 131

   17 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block • KW_ENDDEF SEMICOLON

    KW_ENDDEF  shift, and go to state 140


State 132

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 141


State 133

   21 param_decl_list: param_decl_list COMMA IDENTIFIER COLON • type
   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 142


State 134

   22 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 143


State 135

   95 decl_list: decl_list var_declaration •

    $default  reduce using rule 95 (decl_list)


State 136

   24 stmt_list: stmt_list • stmt
   30 stmt: • assignment_stmt
   31     | • return_stmt
   32     | • if_stmt
   33     | • for_stmt
   34     | • while_stmt
   35     | • break_stmt
   36     | • continue_stmt
   37     | • empty_stmt
   38     | • function_call SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41 return_stmt: • KW_RETURN expression SEMICOLON
   42 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   44 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   45 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   46 break_stmt: • KW_BREAK SEMICOLON
   47 continue_stmt: • KW_CONTINUE SEMICOLON
   48 empty_stmt: • SEMICOLON
   81 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   82              | • IDENTIFIER LPAREN RPAREN
   93 block: decl_list stmt_list •  [KW_ENDDEF]

    error        shift, and go to state 144
    IDENTIFIER   shift, and go to state 145
    KW_IF        shift, and go to state 146
    KW_FOR       shift, and go to state 147
    KW_WHILE     shift, and go to state 148
    KW_BREAK     shift, and go to state 149
    KW_CONTINUE  shift, and go to state 150
    KW_RETURN    shift, and go to state 151
    SEMICOLON    shift, and go to state 152

    KW_ENDDEF  reduce using rule 93 (block)

    stmt             go to state 153
    assignment_stmt  go to state 154
    return_stmt      go to state 155
    if_stmt          go to state 156
    for_stmt         go to state 157
    while_stmt       go to state 158
    break_stmt       go to state 159
    continue_stmt    go to state 160
    empty_stmt       go to state 161
    function_call    go to state 162


State 137

   53 component_member: hash_ident_list LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 163


State 138

   52 component_member: hash_ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 164


State 139

   58 hash_ident_list: hash_ident_list COMMA IDENTIFIER •

    $default  reduce using rule 58 (hash_ident_list)


State 140

   17 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 165


State 141

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON • block KW_ENDDEF SEMICOLON
   93 block: • decl_list stmt_list
   94 decl_list: ε •
   95          | • decl_list var_declaration

    $default  reduce using rule 94 (decl_list)

    block      go to state 166
    decl_list  go to state 124


State 142

   21 param_decl_list: param_decl_list COMMA IDENTIFIER COLON type •

    $default  reduce using rule 21 (param_decl_list)


State 143

   22 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 22 (main_function)


State 144

   39 stmt: error • SEMICOLON

    SEMICOLON  shift, and go to state 167


State 145

   40 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   81 function_call: IDENTIFIER • LPAREN arg_list RPAREN
   82              | IDENTIFIER • LPAREN RPAREN

    OP_ASSIGN  shift, and go to state 168
    LPAREN     shift, and go to state 169


State 146

   42 if_stmt: KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    LPAREN  shift, and go to state 170


State 147

   44 for_stmt: KW_FOR • IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 171


State 148

   45 while_stmt: KW_WHILE • LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

    LPAREN  shift, and go to state 172


State 149

   46 break_stmt: KW_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 173


State 150

   47 continue_stmt: KW_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 174


State 151

   41 return_stmt: KW_RETURN • expression SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 175
    primary_expression  go to state 30


State 152

   48 empty_stmt: SEMICOLON •

    $default  reduce using rule 48 (empty_stmt)


State 153

   24 stmt_list: stmt_list stmt •

    $default  reduce using rule 24 (stmt_list)


State 154

   30 stmt: assignment_stmt •

    $default  reduce using rule 30 (stmt)


State 155

   31 stmt: return_stmt •

    $default  reduce using rule 31 (stmt)


State 156

   32 stmt: if_stmt •

    $default  reduce using rule 32 (stmt)


State 157

   33 stmt: for_stmt •

    $default  reduce using rule 33 (stmt)


State 158

   34 stmt: while_stmt •

    $default  reduce using rule 34 (stmt)


State 159

   35 stmt: break_stmt •

    $default  reduce using rule 35 (stmt)


State 160

   36 stmt: continue_stmt •

    $default  reduce using rule 36 (stmt)


State 161

   37 stmt: empty_stmt •

    $default  reduce using rule 37 (stmt)


State 162

   38 stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 176


State 163

   53 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 177


State 164

   52 component_member: hash_ident_list COLON type SEMICOLON •

    $default  reduce using rule 52 (component_member)


State 165

   17 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 17 (function)


State 166

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block • KW_ENDDEF SEMICOLON

    KW_ENDDEF  shift, and go to state 178


State 167

   39 stmt: error SEMICOLON •

    $default  reduce using rule 39 (stmt)


State 168

   40 assignment_stmt: IDENTIFIER OP_ASSIGN • expression SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 179
    primary_expression  go to state 30


State 169

   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   81 function_call: IDENTIFIER LPAREN • arg_list RPAREN
   82              | IDENTIFIER LPAREN • RPAREN
   83 arg_list: ε •  [RPAREN, COMMA]
   84         | • expression
   85         | • arg_list COMMA expression
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28
    RPAREN            shift, and go to state 180

    RPAREN    [reduce using rule 83 (arg_list)]
    $default  reduce using rule 83 (arg_list)

    expression          go to state 72
    arg_list            go to state 181
    primary_expression  go to state 30

    shift/reduce conflict on token RPAREN:
       83 arg_list: ε •
       82 function_call: IDENTIFIER LPAREN • RPAREN
      Example: IDENTIFIER LPAREN • RPAREN
      Shift derivation
        function_call
        ↳ 82: IDENTIFIER LPAREN • RPAREN
      Reduce derivation
        function_call
        ↳ 81: IDENTIFIER LPAREN arg_list  RPAREN
                                ↳ 83: ε •



State 170

   42 if_stmt: KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 182
    primary_expression  go to state 30


State 171

   44 for_stmt: KW_FOR IDENTIFIER • KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 183


State 172

   45 while_stmt: KW_WHILE LPAREN • expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 184
    primary_expression  go to state 30


State 173

   46 break_stmt: KW_BREAK SEMICOLON •

    $default  reduce using rule 46 (break_stmt)


State 174

   47 continue_stmt: KW_CONTINUE SEMICOLON •

    $default  reduce using rule 47 (continue_stmt)


State 175

   41 return_stmt: KW_RETURN expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 43
    KW_OR      shift, and go to state 44
    OP_POW     shift, and go to state 45
    OP_EQ      shift, and go to state 46
    OP_NEQ     shift, and go to state 47
    OP_LT      shift, and go to state 48
    OP_LEQ     shift, and go to state 49
    OP_GT      shift, and go to state 50
    OP_GEQ     shift, and go to state 51
    OP_PLUS    shift, and go to state 52
    OP_MINUS   shift, and go to state 53
    OP_MULT    shift, and go to state 54
    OP_DIV     shift, and go to state 55
    OP_MOD     shift, and go to state 56
    SEMICOLON  shift, and go to state 185


State 176

   38 stmt: function_call SEMICOLON •

    $default  reduce using rule 38 (stmt)


State 177

   25 type: • KW_INTEGER
   26     | • KW_SCALAR
   27     | • KW_STR
   28     | • KW_BOOL
   29     | • IDENTIFIER
   53 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 186


State 178

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 187


State 179

   40 assignment_stmt: IDENTIFIER OP_ASSIGN expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 43
    KW_OR      shift, and go to state 44
    OP_POW     shift, and go to state 45
    OP_EQ      shift, and go to state 46
    OP_NEQ     shift, and go to state 47
    OP_LT      shift, and go to state 48
    OP_LEQ     shift, and go to state 49
    OP_GT      shift, and go to state 50
    OP_GEQ     shift, and go to state 51
    OP_PLUS    shift, and go to state 52
    OP_MINUS   shift, and go to state 53
    OP_MULT    shift, and go to state 54
    OP_DIV     shift, and go to state 55
    OP_MOD     shift, and go to state 56
    SEMICOLON  shift, and go to state 188


State 180

   82 function_call: IDENTIFIER LPAREN RPAREN •

    $default  reduce using rule 82 (function_call)


State 181

   81 function_call: IDENTIFIER LPAREN arg_list • RPAREN
   85 arg_list: arg_list • COMMA expression

    RPAREN  shift, and go to state 189
    COMMA   shift, and go to state 100


State 182

   42 if_stmt: KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    RPAREN    shift, and go to state 190


State 183

   44 for_stmt: KW_FOR IDENTIFIER KW_IN • LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 191


State 184

   45 while_stmt: KW_WHILE LPAREN expression • RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    RPAREN    shift, and go to state 192


State 185

   41 return_stmt: KW_RETURN expression SEMICOLON •

    $default  reduce using rule 41 (return_stmt)


State 186

   53 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 193


State 187

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 16 (function)


State 188

   40 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 40 (assignment_stmt)


State 189

   81 function_call: IDENTIFIER LPAREN arg_list RPAREN •

    $default  reduce using rule 81 (function_call)


State 190

   42 if_stmt: KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 194


State 191

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET • expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 195
    primary_expression  go to state 30


State 192

   45 while_stmt: KW_WHILE LPAREN expression RPAREN • COLON stmt_list KW_ENDWHILE SEMICOLON

    COLON  shift, and go to state 196


State 193

   53 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 53 (component_member)


State 194

   23 stmt_list: ε •
   24          | • stmt_list stmt
   42 if_stmt: KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 23 (stmt_list)

    stmt_list  go to state 197


State 195

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression • COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    COLON     shift, and go to state 198


State 196

   23 stmt_list: ε •
   24          | • stmt_list stmt
   45 while_stmt: KW_WHILE LPAREN expression RPAREN COLON • stmt_list KW_ENDWHILE SEMICOLON

    $default  reduce using rule 23 (stmt_list)

    stmt_list  go to state 199


State 197

   24 stmt_list: stmt_list • stmt
   30 stmt: • assignment_stmt
   31     | • return_stmt
   32     | • if_stmt
   33     | • for_stmt
   34     | • while_stmt
   35     | • break_stmt
   36     | • continue_stmt
   37     | • empty_stmt
   38     | • function_call SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41 return_stmt: • KW_RETURN expression SEMICOLON
   42 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   42        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ENDIF SEMICOLON
   43        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   44 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   45 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   46 break_stmt: • KW_BREAK SEMICOLON
   47 continue_stmt: • KW_CONTINUE SEMICOLON
   48 empty_stmt: • SEMICOLON
   81 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   82              | • IDENTIFIER LPAREN RPAREN

    error        shift, and go to state 144
    IDENTIFIER   shift, and go to state 145
    KW_IF        shift, and go to state 146
    KW_ELSE      shift, and go to state 200
    KW_ENDIF     shift, and go to state 201
    KW_FOR       shift, and go to state 147
    KW_WHILE     shift, and go to state 148
    KW_BREAK     shift, and go to state 149
    KW_CONTINUE  shift, and go to state 150
    KW_RETURN    shift, and go to state 151
    SEMICOLON    shift, and go to state 152

    stmt             go to state 153
    assignment_stmt  go to state 154
    return_stmt      go to state 155
    if_stmt          go to state 156
    for_stmt         go to state 157
    while_stmt       go to state 158
    break_stmt       go to state 159
    continue_stmt    go to state 160
    empty_stmt       go to state 161
    function_call    go to state 162


State 198

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON • expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   61 expression: • primary_expression
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   79           | • CONST_BOOL_FALSE
   80           | • CONST_BOOL_TRUE
   86 primary_expression: • CONST_INT
   87                   | • CONST_FLOAT
   88                   | • CONST_STRING
   89                   | • IDENTIFIER
   90                   | • IDENTIFIER LPAREN arg_list RPAREN
   91                   | • primary_expression LBRACKET expression RBRACKET
   92                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 20
    CONST_INT         shift, and go to state 21
    CONST_FLOAT       shift, and go to state 22
    CONST_STRING      shift, and go to state 23
    CONST_BOOL_TRUE   shift, and go to state 24
    CONST_BOOL_FALSE  shift, and go to state 25
    KW_NOT            shift, and go to state 26
    OP_MINUS          shift, and go to state 27
    LPAREN            shift, and go to state 28

    expression          go to state 202
    primary_expression  go to state 30


State 199

   24 stmt_list: stmt_list • stmt
   30 stmt: • assignment_stmt
   31     | • return_stmt
   32     | • if_stmt
   33     | • for_stmt
   34     | • while_stmt
   35     | • break_stmt
   36     | • continue_stmt
   37     | • empty_stmt
   38     | • function_call SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41 return_stmt: • KW_RETURN expression SEMICOLON
   42 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   44 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   45 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   45           | KW_WHILE LPAREN expression RPAREN COLON stmt_list • KW_ENDWHILE SEMICOLON
   46 break_stmt: • KW_BREAK SEMICOLON
   47 continue_stmt: • KW_CONTINUE SEMICOLON
   48 empty_stmt: • SEMICOLON
   81 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   82              | • IDENTIFIER LPAREN RPAREN

    error        shift, and go to state 144
    IDENTIFIER   shift, and go to state 145
    KW_IF        shift, and go to state 146
    KW_FOR       shift, and go to state 147
    KW_WHILE     shift, and go to state 148
    KW_ENDWHILE  shift, and go to state 203
    KW_BREAK     shift, and go to state 149
    KW_CONTINUE  shift, and go to state 150
    KW_RETURN    shift, and go to state 151
    SEMICOLON    shift, and go to state 152

    stmt             go to state 153
    assignment_stmt  go to state 154
    return_stmt      go to state 155
    if_stmt          go to state 156
    for_stmt         go to state 157
    while_stmt       go to state 158
    break_stmt       go to state 159
    continue_stmt    go to state 160
    empty_stmt       go to state 161
    function_call    go to state 162


State 200

   43 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE • COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 204


State 201

   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 205


State 202

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression • RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 43
    KW_OR     shift, and go to state 44
    OP_POW    shift, and go to state 45
    OP_EQ     shift, and go to state 46
    OP_NEQ    shift, and go to state 47
    OP_LT     shift, and go to state 48
    OP_LEQ    shift, and go to state 49
    OP_GT     shift, and go to state 50
    OP_GEQ    shift, and go to state 51
    OP_PLUS   shift, and go to state 52
    OP_MINUS  shift, and go to state 53
    OP_MULT   shift, and go to state 54
    OP_DIV    shift, and go to state 55
    OP_MOD    shift, and go to state 56
    RBRACKET  shift, and go to state 206


State 203

   45 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 207


State 204

   23 stmt_list: ε •
   24          | • stmt_list stmt
   43 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON • stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 23 (stmt_list)

    stmt_list  go to state 208


State 205

   42 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 42 (if_stmt)


State 206

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET • COLON stmt_list KW_ENDFOR SEMICOLON

    COLON  shift, and go to state 209


State 207

   45 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON •

    $default  reduce using rule 45 (while_stmt)


State 208

   24 stmt_list: stmt_list • stmt
   30 stmt: • assignment_stmt
   31     | • return_stmt
   32     | • if_stmt
   33     | • for_stmt
   34     | • while_stmt
   35     | • break_stmt
   36     | • continue_stmt
   37     | • empty_stmt
   38     | • function_call SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41 return_stmt: • KW_RETURN expression SEMICOLON
   42 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   43        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list • KW_ENDIF SEMICOLON
   44 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   45 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   46 break_stmt: • KW_BREAK SEMICOLON
   47 continue_stmt: • KW_CONTINUE SEMICOLON
   48 empty_stmt: • SEMICOLON
   81 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   82              | • IDENTIFIER LPAREN RPAREN

    error        shift, and go to state 144
    IDENTIFIER   shift, and go to state 145
    KW_IF        shift, and go to state 146
    KW_ENDIF     shift, and go to state 210
    KW_FOR       shift, and go to state 147
    KW_WHILE     shift, and go to state 148
    KW_BREAK     shift, and go to state 149
    KW_CONTINUE  shift, and go to state 150
    KW_RETURN    shift, and go to state 151
    SEMICOLON    shift, and go to state 152

    stmt             go to state 153
    assignment_stmt  go to state 154
    return_stmt      go to state 155
    if_stmt          go to state 156
    for_stmt         go to state 157
    while_stmt       go to state 158
    break_stmt       go to state 159
    continue_stmt    go to state 160
    empty_stmt       go to state 161
    function_call    go to state 162


State 209

   23 stmt_list: ε •
   24          | • stmt_list stmt
   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON • stmt_list KW_ENDFOR SEMICOLON

    $default  reduce using rule 23 (stmt_list)

    stmt_list  go to state 211


State 210

   43 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 212


State 211

   24 stmt_list: stmt_list • stmt
   30 stmt: • assignment_stmt
   31     | • return_stmt
   32     | • if_stmt
   33     | • for_stmt
   34     | • while_stmt
   35     | • break_stmt
   36     | • continue_stmt
   37     | • empty_stmt
   38     | • function_call SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41 return_stmt: • KW_RETURN expression SEMICOLON
   42 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   43        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   44 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   44         | KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list • KW_ENDFOR SEMICOLON
   45 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   46 break_stmt: • KW_BREAK SEMICOLON
   47 continue_stmt: • KW_CONTINUE SEMICOLON
   48 empty_stmt: • SEMICOLON
   81 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   82              | • IDENTIFIER LPAREN RPAREN

    error        shift, and go to state 144
    IDENTIFIER   shift, and go to state 145
    KW_IF        shift, and go to state 146
    KW_FOR       shift, and go to state 147
    KW_ENDFOR    shift, and go to state 213
    KW_WHILE     shift, and go to state 148
    KW_BREAK     shift, and go to state 149
    KW_CONTINUE  shift, and go to state 150
    KW_RETURN    shift, and go to state 151
    SEMICOLON    shift, and go to state 152

    stmt             go to state 153
    assignment_stmt  go to state 154
    return_stmt      go to state 155
    if_stmt          go to state 156
    for_stmt         go to state 157
    while_stmt       go to state 158
    break_stmt       go to state 159
    continue_stmt    go to state 160
    empty_stmt       go to state 161
    function_call    go to state 162


State 212

   43 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 43 (if_stmt)


State 213

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 214


State 214

   44 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON •

    $default  reduce using rule 44 (for_stmt)
