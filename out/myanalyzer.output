Terminals unused in grammar

    KW_OF
    DOT


Grammar

    0 $accept: program $end

    1 program: macro_def_list top_level_list main_function

    2 macro_def_list: ε
    3               | macro_def_list macro_def

    4 macro_def: KW_DEFMACRO IDENTIFIER CONST_FLOAT

    5 top_level_list: ε
    6               | top_level_list top_level

    7 top_level: function
    8          | component
    9          | var_declaration
   10          | const_declaration

   11 var_declaration: ident_list COLON type SEMICOLON

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON

   14 param_list: ε
   15           | param_decl_list

   16 param_decl_list: IDENTIFIER COLON type
   17                | param_decl_list COMMA IDENTIFIER COLON type

   18 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON stmt_list KW_ENDDEF SEMICOLON

   19 stmt_list: ε
   20          | stmt_list stmt

   21 type: KW_INTEGER
   22     | KW_SCALAR
   23     | KW_STR
   24     | KW_BOOL

   25 stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | KW_RETURN expression SEMICOLON
   29     | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   31     | KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   32     | KW_BREAK SEMICOLON
   33     | KW_CONTINUE SEMICOLON
   34     | SEMICOLON
   35     | KW_RETURN SEMICOLON
   36     | IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   38     | IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | error SEMICOLON
   44     | var_declaration

   45 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

   46 component_body: ε
   47               | component_body component_member

   48 component_member: hash_ident_list COLON type SEMICOLON
   49                 | function

   50 hash_ident_list: HASH IDENTIFIER
   51                | hash_ident_list COMMA HASH IDENTIFIER

   52 ident_list: IDENTIFIER
   53           | ident_list COMMA IDENTIFIER

   54 arg_list: expression
   55         | arg_list COMMA expression

   56 expression: CONST_INT
   57           | CONST_FLOAT
   58           | CONST_STRING
   59           | CONST_BOOL_TRUE
   60           | CONST_BOOL_FALSE
   61           | IDENTIFIER
   62           | expression OP_PLUS expression
   63           | expression OP_MINUS expression
   64           | expression OP_MULT expression
   65           | expression OP_DIV expression
   66           | expression OP_MOD expression
   67           | expression OP_POW expression
   68           | expression OP_EQ expression
   69           | expression OP_NEQ expression
   70           | expression OP_LT expression
   71           | expression OP_LEQ expression
   72           | expression OP_GT expression
   73           | expression OP_GEQ expression
   74           | expression KW_AND expression
   75           | expression KW_OR expression
   76           | KW_NOT expression
   77           | OP_MINUS expression
   78           | LPAREN expression RPAREN


Terminals, with rules where they appear

    $end (0) 0
    error (256) 43
    IDENTIFIER <string> (258) 4 12 13 16 17 25 26 27 31 36 38 39 40 41 42 45 50 51 52 53 61
    CONST_INT <string> (259) 56
    CONST_FLOAT <string> (260) 4 57
    CONST_STRING <string> (261) 58
    CONST_BOOL_TRUE (262) 59
    CONST_BOOL_FALSE (263) 60
    KW_INTEGER (264) 21
    KW_SCALAR (265) 22
    KW_STR (266) 23
    KW_BOOL (267) 24
    KW_CONST (268) 12
    KW_IF (269) 29 30
    KW_ELSE (270) 30
    KW_ENDIF (271) 29 30
    KW_FOR (272) 31 36
    KW_IN (273) 31
    KW_ENDFOR (274) 31
    KW_WHILE (275) 37
    KW_ENDWHILE (276) 37
    KW_BREAK (277) 32
    KW_CONTINUE (278) 33
    KW_NOT (279) 76
    KW_AND (280) 74
    KW_OR (281) 75
    KW_DEF (282) 13 18
    KW_ENDDEF (283) 13 18
    KW_MAIN (284) 18
    KW_RETURN (285) 28 35
    KW_COMP (286) 45
    KW_ENDCOMP (287) 45
    KW_OF (288)
    KW_DEFMACRO (289) 4
    OP_ASSIGN (290) 12 25
    OP_PLUSEQ (291) 38
    OP_MINUSEQ (292) 39
    OP_MULTEQ (293) 40
    OP_DIVEQ (294) 41
    OP_MODEQ (295) 42
    OP_DEFINE (296) 36
    OP_POW (297) 67
    OP_EQ (298) 68
    OP_NEQ (299) 69
    OP_LT (300) 70
    OP_LEQ (301) 71
    OP_GT (302) 72
    OP_GEQ (303) 73
    OP_PLUS (304) 62
    OP_MINUS (305) 63 77
    OP_MULT (306) 64
    OP_DIV (307) 65
    OP_MOD (308) 66
    LPAREN (309) 13 18 26 27 29 30 37 78
    RPAREN (310) 13 18 26 27 29 30 37 78
    LBRACKET (311) 31 36
    RBRACKET (312) 31 36
    COLON (313) 11 12 13 16 17 18 29 30 31 36 37 45 48
    SEMICOLON (314) 11 12 13 18 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 48
    COMMA (315) 17 51 53 55
    DOT (316)
    OP_ARROW (317) 13
    HASH (318) 50 51
    UMINUS (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 1
        on right: 0
    macro_def_list (67)
        on left: 2 3
        on right: 1 3
    macro_def (68)
        on left: 4
        on right: 3
    top_level_list (69)
        on left: 5 6
        on right: 1 6
    top_level (70)
        on left: 7 8 9 10
        on right: 6
    var_declaration <string> (71)
        on left: 11
        on right: 9 44
    const_declaration (72)
        on left: 12
        on right: 10
    function <string> (73)
        on left: 13
        on right: 7 49
    param_list <string> (74)
        on left: 14 15
        on right: 13
    param_decl_list <string> (75)
        on left: 16 17
        on right: 15 17
    main_function <string> (76)
        on left: 18
        on right: 1
    stmt_list <string> (77)
        on left: 19 20
        on right: 13 18 20 29 30 31 37
    type <string> (78)
        on left: 21 22 23 24
        on right: 11 12 13 16 17 36 48
    stmt <string> (79)
        on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
        on right: 20
    component (80)
        on left: 45
        on right: 8
    component_body (81)
        on left: 46 47
        on right: 45 47
    component_member (82)
        on left: 48 49
        on right: 47
    hash_ident_list (83)
        on left: 50 51
        on right: 48 51
    ident_list <string> (84)
        on left: 52 53
        on right: 11 53
    arg_list <string> (85)
        on left: 54 55
        on right: 27 55
    expression <string> (86)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
        on right: 12 25 28 29 30 31 36 37 38 39 40 41 42 54 55 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78


State 0

    0 $accept: • program $end
    1 program: • macro_def_list top_level_list main_function
    2 macro_def_list: ε •
    3               | • macro_def_list macro_def

    $default  reduce using rule 2 (macro_def_list)

    program         go to state 1
    macro_def_list  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: macro_def_list • top_level_list main_function
    3 macro_def_list: macro_def_list • macro_def
    4 macro_def: • KW_DEFMACRO IDENTIFIER CONST_FLOAT
    5 top_level_list: ε •  [IDENTIFIER, KW_CONST, KW_DEF, KW_COMP]
    6               | • top_level_list top_level

    KW_DEFMACRO  shift, and go to state 4

    $default  reduce using rule 5 (top_level_list)

    macro_def       go to state 5
    top_level_list  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 macro_def: KW_DEFMACRO • IDENTIFIER CONST_FLOAT

    IDENTIFIER  shift, and go to state 7


State 5

    3 macro_def_list: macro_def_list macro_def •

    $default  reduce using rule 3 (macro_def_list)


State 6

    1 program: macro_def_list top_level_list • main_function
    6 top_level_list: top_level_list • top_level
    7 top_level: • function
    8          | • component
    9          | • var_declaration
   10          | • const_declaration
   11 var_declaration: • ident_list COLON type SEMICOLON
   12 const_declaration: • KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   13 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON
   18 main_function: • KW_DEF KW_MAIN LPAREN RPAREN COLON stmt_list KW_ENDDEF SEMICOLON
   45 component: • KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 8
    KW_CONST    shift, and go to state 9
    KW_DEF      shift, and go to state 10
    KW_COMP     shift, and go to state 11

    top_level          go to state 12
    var_declaration    go to state 13
    const_declaration  go to state 14
    function           go to state 15
    main_function      go to state 16
    component          go to state 17
    ident_list         go to state 18


State 7

    4 macro_def: KW_DEFMACRO IDENTIFIER • CONST_FLOAT

    CONST_FLOAT  shift, and go to state 19


State 8

   52 ident_list: IDENTIFIER •

    $default  reduce using rule 52 (ident_list)


State 9

   12 const_declaration: KW_CONST • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 20


State 10

   13 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON
   18 main_function: KW_DEF • KW_MAIN LPAREN RPAREN COLON stmt_list KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 21
    KW_MAIN     shift, and go to state 22


State 11

   45 component: KW_COMP • IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 23


State 12

    6 top_level_list: top_level_list top_level •

    $default  reduce using rule 6 (top_level_list)


State 13

    9 top_level: var_declaration •

    $default  reduce using rule 9 (top_level)


State 14

   10 top_level: const_declaration •

    $default  reduce using rule 10 (top_level)


State 15

    7 top_level: function •

    $default  reduce using rule 7 (top_level)


State 16

    1 program: macro_def_list top_level_list main_function •

    $default  reduce using rule 1 (program)


State 17

    8 top_level: component •

    $default  reduce using rule 8 (top_level)


State 18

   11 var_declaration: ident_list • COLON type SEMICOLON
   53 ident_list: ident_list • COMMA IDENTIFIER

    COLON  shift, and go to state 24
    COMMA  shift, and go to state 25


State 19

    4 macro_def: KW_DEFMACRO IDENTIFIER CONST_FLOAT •

    $default  reduce using rule 4 (macro_def)


State 20

   12 const_declaration: KW_CONST IDENTIFIER • OP_ASSIGN expression COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 26


State 21

   13 function: KW_DEF IDENTIFIER • LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 27


State 22

   18 main_function: KW_DEF KW_MAIN • LPAREN RPAREN COLON stmt_list KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 28


State 23

   45 component: KW_COMP IDENTIFIER • COLON component_body KW_ENDCOMP SEMICOLON

    COLON  shift, and go to state 29


State 24

   11 var_declaration: ident_list COLON • type SEMICOLON
   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 34


State 25

   53 ident_list: ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 35


State 26

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN • expression COLON type SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 45


State 27

   13 function: KW_DEF IDENTIFIER LPAREN • param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON
   14 param_list: ε •  [RPAREN]
   15           | • param_decl_list
   16 param_decl_list: • IDENTIFIER COLON type
   17                | • param_decl_list COMMA IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 46

    $default  reduce using rule 14 (param_list)

    param_list       go to state 47
    param_decl_list  go to state 48


State 28

   18 main_function: KW_DEF KW_MAIN LPAREN • RPAREN COLON stmt_list KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 49


State 29

   45 component: KW_COMP IDENTIFIER COLON • component_body KW_ENDCOMP SEMICOLON
   46 component_body: ε •
   47               | • component_body component_member

    $default  reduce using rule 46 (component_body)

    component_body  go to state 50


State 30

   21 type: KW_INTEGER •

    $default  reduce using rule 21 (type)


State 31

   22 type: KW_SCALAR •

    $default  reduce using rule 22 (type)


State 32

   23 type: KW_STR •

    $default  reduce using rule 23 (type)


State 33

   24 type: KW_BOOL •

    $default  reduce using rule 24 (type)


State 34

   11 var_declaration: ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 51


State 35

   53 ident_list: ident_list COMMA IDENTIFIER •

    $default  reduce using rule 53 (ident_list)


State 36

   61 expression: IDENTIFIER •

    $default  reduce using rule 61 (expression)


State 37

   56 expression: CONST_INT •

    $default  reduce using rule 56 (expression)


State 38

   57 expression: CONST_FLOAT •

    $default  reduce using rule 57 (expression)


State 39

   58 expression: CONST_STRING •

    $default  reduce using rule 58 (expression)


State 40

   59 expression: CONST_BOOL_TRUE •

    $default  reduce using rule 59 (expression)


State 41

   60 expression: CONST_BOOL_FALSE •

    $default  reduce using rule 60 (expression)


State 42

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   76           | KW_NOT • expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 52


State 43

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   77           | OP_MINUS • expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 53


State 44

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN
   78           | LPAREN • expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 54


State 45

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression • COLON type SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    COLON     shift, and go to state 69


State 46

   16 param_decl_list: IDENTIFIER • COLON type

    COLON  shift, and go to state 70


State 47

   13 function: KW_DEF IDENTIFIER LPAREN param_list • RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 71


State 48

   15 param_list: param_decl_list •  [RPAREN]
   17 param_decl_list: param_decl_list • COMMA IDENTIFIER COLON type

    COMMA  shift, and go to state 72

    $default  reduce using rule 15 (param_list)


State 49

   18 main_function: KW_DEF KW_MAIN LPAREN RPAREN • COLON stmt_list KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 73


State 50

   13 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON
   45 component: KW_COMP IDENTIFIER COLON component_body • KW_ENDCOMP SEMICOLON
   47 component_body: component_body • component_member
   48 component_member: • hash_ident_list COLON type SEMICOLON
   49                 | • function
   50 hash_ident_list: • HASH IDENTIFIER
   51                | • hash_ident_list COMMA HASH IDENTIFIER

    KW_DEF      shift, and go to state 74
    KW_ENDCOMP  shift, and go to state 75
    HASH        shift, and go to state 76

    function          go to state 77
    component_member  go to state 78
    hash_ident_list   go to state 79


State 51

   11 var_declaration: ident_list COLON type SEMICOLON •

    $default  reduce using rule 11 (var_declaration)


State 52

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   76           | KW_NOT expression •  [KW_FOR, KW_AND, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 76 (expression)

    Conflict between rule 76 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 76 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 76 and token OP_POW resolved as shift (KW_NOT < OP_POW).
    Conflict between rule 76 and token OP_EQ resolved as shift (KW_NOT < OP_EQ).
    Conflict between rule 76 and token OP_NEQ resolved as shift (KW_NOT < OP_NEQ).
    Conflict between rule 76 and token OP_LT resolved as shift (KW_NOT < OP_LT).
    Conflict between rule 76 and token OP_LEQ resolved as shift (KW_NOT < OP_LEQ).
    Conflict between rule 76 and token OP_GT resolved as shift (KW_NOT < OP_GT).
    Conflict between rule 76 and token OP_GEQ resolved as shift (KW_NOT < OP_GEQ).
    Conflict between rule 76 and token OP_PLUS resolved as shift (KW_NOT < OP_PLUS).
    Conflict between rule 76 and token OP_MINUS resolved as shift (KW_NOT < OP_MINUS).
    Conflict between rule 76 and token OP_MULT resolved as shift (KW_NOT < OP_MULT).
    Conflict between rule 76 and token OP_DIV resolved as shift (KW_NOT < OP_DIV).
    Conflict between rule 76 and token OP_MOD resolved as shift (KW_NOT < OP_MOD).


State 53

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   77           | OP_MINUS expression •  [KW_FOR, KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    $default  reduce using rule 77 (expression)

    Conflict between rule 77 and token KW_AND resolved as reduce (KW_AND < UMINUS).
    Conflict between rule 77 and token KW_OR resolved as reduce (KW_OR < UMINUS).
    Conflict between rule 77 and token OP_POW resolved as reduce (OP_POW < UMINUS).
    Conflict between rule 77 and token OP_EQ resolved as reduce (OP_EQ < UMINUS).
    Conflict between rule 77 and token OP_NEQ resolved as reduce (OP_NEQ < UMINUS).
    Conflict between rule 77 and token OP_LT resolved as reduce (OP_LT < UMINUS).
    Conflict between rule 77 and token OP_LEQ resolved as reduce (OP_LEQ < UMINUS).
    Conflict between rule 77 and token OP_GT resolved as reduce (OP_GT < UMINUS).
    Conflict between rule 77 and token OP_GEQ resolved as reduce (OP_GEQ < UMINUS).
    Conflict between rule 77 and token OP_PLUS resolved as reduce (OP_PLUS < UMINUS).
    Conflict between rule 77 and token OP_MINUS resolved as reduce (OP_MINUS < UMINUS).
    Conflict between rule 77 and token OP_MULT resolved as reduce (OP_MULT < UMINUS).
    Conflict between rule 77 and token OP_DIV resolved as reduce (OP_DIV < UMINUS).
    Conflict between rule 77 and token OP_MOD resolved as reduce (OP_MOD < UMINUS).


State 54

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   78           | LPAREN expression • RPAREN

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    RPAREN    shift, and go to state 80


State 55

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   74           | expression KW_AND • expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 81


State 56

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   75           | expression KW_OR • expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 82


State 57

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   67           | expression OP_POW • expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 83


State 58

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   68           | expression OP_EQ • expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 84


State 59

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   69           | expression OP_NEQ • expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 85


State 60

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   70           | expression OP_LT • expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 86


State 61

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   71           | expression OP_LEQ • expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 87


State 62

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   72           | expression OP_GT • expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 88


State 63

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   73           | expression OP_GEQ • expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 89


State 64

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   62           | expression OP_PLUS • expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 90


State 65

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   63           | expression OP_MINUS • expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 91


State 66

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   64           | expression OP_MULT • expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 92


State 67

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   65           | expression OP_DIV • expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 93


State 68

   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   66           | expression OP_MOD • expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 94


State 69

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON • type SEMICOLON
   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 95


State 70

   16 param_decl_list: IDENTIFIER COLON • type
   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 96


State 71

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN • OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON

    OP_ARROW  shift, and go to state 97


State 72

   17 param_decl_list: param_decl_list COMMA • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 98


State 73

   18 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON • stmt_list KW_ENDDEF SEMICOLON
   19 stmt_list: ε •
   20          | • stmt_list stmt

    $default  reduce using rule 19 (stmt_list)

    stmt_list  go to state 99


State 74

   13 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 21


State 75

   45 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 100


State 76

   50 hash_ident_list: HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 101


State 77

   49 component_member: function •

    $default  reduce using rule 49 (component_member)


State 78

   47 component_body: component_body component_member •

    $default  reduce using rule 47 (component_body)


State 79

   48 component_member: hash_ident_list • COLON type SEMICOLON
   51 hash_ident_list: hash_ident_list • COMMA HASH IDENTIFIER

    COLON  shift, and go to state 102
    COMMA  shift, and go to state 103


State 80

   78 expression: LPAREN expression RPAREN •

    $default  reduce using rule 78 (expression)


State 81

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   74           | expression KW_AND expression •  [KW_FOR, KW_AND, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 74 (expression)

    Conflict between rule 74 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 74 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 74 and token OP_POW resolved as shift (KW_AND < OP_POW).
    Conflict between rule 74 and token OP_EQ resolved as shift (KW_AND < OP_EQ).
    Conflict between rule 74 and token OP_NEQ resolved as shift (KW_AND < OP_NEQ).
    Conflict between rule 74 and token OP_LT resolved as shift (KW_AND < OP_LT).
    Conflict between rule 74 and token OP_LEQ resolved as shift (KW_AND < OP_LEQ).
    Conflict between rule 74 and token OP_GT resolved as shift (KW_AND < OP_GT).
    Conflict between rule 74 and token OP_GEQ resolved as shift (KW_AND < OP_GEQ).
    Conflict between rule 74 and token OP_PLUS resolved as shift (KW_AND < OP_PLUS).
    Conflict between rule 74 and token OP_MINUS resolved as shift (KW_AND < OP_MINUS).
    Conflict between rule 74 and token OP_MULT resolved as shift (KW_AND < OP_MULT).
    Conflict between rule 74 and token OP_DIV resolved as shift (KW_AND < OP_DIV).
    Conflict between rule 74 and token OP_MOD resolved as shift (KW_AND < OP_MOD).


State 82

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression
   75           | expression KW_OR expression •  [KW_FOR, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    KW_AND    shift, and go to state 55
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 75 (expression)

    Conflict between rule 75 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 75 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 75 and token OP_POW resolved as shift (KW_OR < OP_POW).
    Conflict between rule 75 and token OP_EQ resolved as shift (KW_OR < OP_EQ).
    Conflict between rule 75 and token OP_NEQ resolved as shift (KW_OR < OP_NEQ).
    Conflict between rule 75 and token OP_LT resolved as shift (KW_OR < OP_LT).
    Conflict between rule 75 and token OP_LEQ resolved as shift (KW_OR < OP_LEQ).
    Conflict between rule 75 and token OP_GT resolved as shift (KW_OR < OP_GT).
    Conflict between rule 75 and token OP_GEQ resolved as shift (KW_OR < OP_GEQ).
    Conflict between rule 75 and token OP_PLUS resolved as shift (KW_OR < OP_PLUS).
    Conflict between rule 75 and token OP_MINUS resolved as shift (KW_OR < OP_MINUS).
    Conflict between rule 75 and token OP_MULT resolved as shift (KW_OR < OP_MULT).
    Conflict between rule 75 and token OP_DIV resolved as shift (KW_OR < OP_DIV).
    Conflict between rule 75 and token OP_MOD resolved as shift (KW_OR < OP_MOD).


State 83

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   67           | expression OP_POW expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 57

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token KW_AND resolved as reduce (KW_AND < OP_POW).
    Conflict between rule 67 and token KW_OR resolved as reduce (KW_OR < OP_POW).
    Conflict between rule 67 and token OP_POW resolved as shift (%right OP_POW).
    Conflict between rule 67 and token OP_EQ resolved as reduce (OP_EQ < OP_POW).
    Conflict between rule 67 and token OP_NEQ resolved as reduce (OP_NEQ < OP_POW).
    Conflict between rule 67 and token OP_LT resolved as reduce (OP_LT < OP_POW).
    Conflict between rule 67 and token OP_LEQ resolved as reduce (OP_LEQ < OP_POW).
    Conflict between rule 67 and token OP_GT resolved as reduce (OP_GT < OP_POW).
    Conflict between rule 67 and token OP_GEQ resolved as reduce (OP_GEQ < OP_POW).
    Conflict between rule 67 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POW).
    Conflict between rule 67 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POW).
    Conflict between rule 67 and token OP_MULT resolved as reduce (OP_MULT < OP_POW).
    Conflict between rule 67 and token OP_DIV resolved as reduce (OP_DIV < OP_POW).
    Conflict between rule 67 and token OP_MOD resolved as reduce (OP_MOD < OP_POW).


State 84

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   68           | expression OP_EQ expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token KW_AND resolved as reduce (KW_AND < OP_EQ).
    Conflict between rule 68 and token KW_OR resolved as reduce (KW_OR < OP_EQ).
    Conflict between rule 68 and token OP_POW resolved as shift (OP_EQ < OP_POW).
    Conflict between rule 68 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 68 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 68 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 68 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 68 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 68 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 68 and token OP_PLUS resolved as shift (OP_EQ < OP_PLUS).
    Conflict between rule 68 and token OP_MINUS resolved as shift (OP_EQ < OP_MINUS).
    Conflict between rule 68 and token OP_MULT resolved as shift (OP_EQ < OP_MULT).
    Conflict between rule 68 and token OP_DIV resolved as shift (OP_EQ < OP_DIV).
    Conflict between rule 68 and token OP_MOD resolved as shift (OP_EQ < OP_MOD).


State 85

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   69           | expression OP_NEQ expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token KW_AND resolved as reduce (KW_AND < OP_NEQ).
    Conflict between rule 69 and token KW_OR resolved as reduce (KW_OR < OP_NEQ).
    Conflict between rule 69 and token OP_POW resolved as shift (OP_NEQ < OP_POW).
    Conflict between rule 69 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 69 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 69 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 69 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 69 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 69 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 69 and token OP_PLUS resolved as shift (OP_NEQ < OP_PLUS).
    Conflict between rule 69 and token OP_MINUS resolved as shift (OP_NEQ < OP_MINUS).
    Conflict between rule 69 and token OP_MULT resolved as shift (OP_NEQ < OP_MULT).
    Conflict between rule 69 and token OP_DIV resolved as shift (OP_NEQ < OP_DIV).
    Conflict between rule 69 and token OP_MOD resolved as shift (OP_NEQ < OP_MOD).


State 86

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   70           | expression OP_LT expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token KW_AND resolved as reduce (KW_AND < OP_LT).
    Conflict between rule 70 and token KW_OR resolved as reduce (KW_OR < OP_LT).
    Conflict between rule 70 and token OP_POW resolved as shift (OP_LT < OP_POW).
    Conflict between rule 70 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 70 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 70 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 70 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 70 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 70 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 70 and token OP_PLUS resolved as shift (OP_LT < OP_PLUS).
    Conflict between rule 70 and token OP_MINUS resolved as shift (OP_LT < OP_MINUS).
    Conflict between rule 70 and token OP_MULT resolved as shift (OP_LT < OP_MULT).
    Conflict between rule 70 and token OP_DIV resolved as shift (OP_LT < OP_DIV).
    Conflict between rule 70 and token OP_MOD resolved as shift (OP_LT < OP_MOD).


State 87

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   71           | expression OP_LEQ expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token KW_AND resolved as reduce (KW_AND < OP_LEQ).
    Conflict between rule 71 and token KW_OR resolved as reduce (KW_OR < OP_LEQ).
    Conflict between rule 71 and token OP_POW resolved as shift (OP_LEQ < OP_POW).
    Conflict between rule 71 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 71 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 71 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 71 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 71 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 71 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 71 and token OP_PLUS resolved as shift (OP_LEQ < OP_PLUS).
    Conflict between rule 71 and token OP_MINUS resolved as shift (OP_LEQ < OP_MINUS).
    Conflict between rule 71 and token OP_MULT resolved as shift (OP_LEQ < OP_MULT).
    Conflict between rule 71 and token OP_DIV resolved as shift (OP_LEQ < OP_DIV).
    Conflict between rule 71 and token OP_MOD resolved as shift (OP_LEQ < OP_MOD).


State 88

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   72           | expression OP_GT expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token KW_AND resolved as reduce (KW_AND < OP_GT).
    Conflict between rule 72 and token KW_OR resolved as reduce (KW_OR < OP_GT).
    Conflict between rule 72 and token OP_POW resolved as shift (OP_GT < OP_POW).
    Conflict between rule 72 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 72 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 72 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 72 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 72 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 72 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 72 and token OP_PLUS resolved as shift (OP_GT < OP_PLUS).
    Conflict between rule 72 and token OP_MINUS resolved as shift (OP_GT < OP_MINUS).
    Conflict between rule 72 and token OP_MULT resolved as shift (OP_GT < OP_MULT).
    Conflict between rule 72 and token OP_DIV resolved as shift (OP_GT < OP_DIV).
    Conflict between rule 72 and token OP_MOD resolved as shift (OP_GT < OP_MOD).


State 89

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   73           | expression OP_GEQ expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW    shift, and go to state 57
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 73 (expression)

    Conflict between rule 73 and token KW_AND resolved as reduce (KW_AND < OP_GEQ).
    Conflict between rule 73 and token KW_OR resolved as reduce (KW_OR < OP_GEQ).
    Conflict between rule 73 and token OP_POW resolved as shift (OP_GEQ < OP_POW).
    Conflict between rule 73 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 73 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 73 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 73 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 73 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 73 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 73 and token OP_PLUS resolved as shift (OP_GEQ < OP_PLUS).
    Conflict between rule 73 and token OP_MINUS resolved as shift (OP_GEQ < OP_MINUS).
    Conflict between rule 73 and token OP_MULT resolved as shift (OP_GEQ < OP_MULT).
    Conflict between rule 73 and token OP_DIV resolved as shift (OP_GEQ < OP_DIV).
    Conflict between rule 73 and token OP_MOD resolved as shift (OP_GEQ < OP_MOD).


State 90

   62 expression: expression • OP_PLUS expression
   62           | expression OP_PLUS expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW   shift, and go to state 57
    OP_MULT  shift, and go to state 66
    OP_DIV   shift, and go to state 67
    OP_MOD   shift, and go to state 68

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 62 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).
    Conflict between rule 62 and token OP_POW resolved as shift (OP_PLUS < OP_POW).
    Conflict between rule 62 and token OP_EQ resolved as reduce (OP_EQ < OP_PLUS).
    Conflict between rule 62 and token OP_NEQ resolved as reduce (OP_NEQ < OP_PLUS).
    Conflict between rule 62 and token OP_LT resolved as reduce (OP_LT < OP_PLUS).
    Conflict between rule 62 and token OP_LEQ resolved as reduce (OP_LEQ < OP_PLUS).
    Conflict between rule 62 and token OP_GT resolved as reduce (OP_GT < OP_PLUS).
    Conflict between rule 62 and token OP_GEQ resolved as reduce (OP_GEQ < OP_PLUS).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 62 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 62 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 62 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).


State 91

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   63           | expression OP_MINUS expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW   shift, and go to state 57
    OP_MULT  shift, and go to state 66
    OP_DIV   shift, and go to state 67
    OP_MOD   shift, and go to state 68

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 63 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).
    Conflict between rule 63 and token OP_POW resolved as shift (OP_MINUS < OP_POW).
    Conflict between rule 63 and token OP_EQ resolved as reduce (OP_EQ < OP_MINUS).
    Conflict between rule 63 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MINUS).
    Conflict between rule 63 and token OP_LT resolved as reduce (OP_LT < OP_MINUS).
    Conflict between rule 63 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MINUS).
    Conflict between rule 63 and token OP_GT resolved as reduce (OP_GT < OP_MINUS).
    Conflict between rule 63 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MINUS).
    Conflict between rule 63 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 63 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 63 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 63 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 63 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).


State 92

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   64           | expression OP_MULT expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 57

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token KW_AND resolved as reduce (KW_AND < OP_MULT).
    Conflict between rule 64 and token KW_OR resolved as reduce (KW_OR < OP_MULT).
    Conflict between rule 64 and token OP_POW resolved as shift (OP_MULT < OP_POW).
    Conflict between rule 64 and token OP_EQ resolved as reduce (OP_EQ < OP_MULT).
    Conflict between rule 64 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MULT).
    Conflict between rule 64 and token OP_LT resolved as reduce (OP_LT < OP_MULT).
    Conflict between rule 64 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MULT).
    Conflict between rule 64 and token OP_GT resolved as reduce (OP_GT < OP_MULT).
    Conflict between rule 64 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MULT).
    Conflict between rule 64 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 64 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 64 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 64 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 64 and token OP_MOD resolved as reduce (%left OP_MOD).


State 93

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   65           | expression OP_DIV expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 57

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token KW_AND resolved as reduce (KW_AND < OP_DIV).
    Conflict between rule 65 and token KW_OR resolved as reduce (KW_OR < OP_DIV).
    Conflict between rule 65 and token OP_POW resolved as shift (OP_DIV < OP_POW).
    Conflict between rule 65 and token OP_EQ resolved as reduce (OP_EQ < OP_DIV).
    Conflict between rule 65 and token OP_NEQ resolved as reduce (OP_NEQ < OP_DIV).
    Conflict between rule 65 and token OP_LT resolved as reduce (OP_LT < OP_DIV).
    Conflict between rule 65 and token OP_LEQ resolved as reduce (OP_LEQ < OP_DIV).
    Conflict between rule 65 and token OP_GT resolved as reduce (OP_GT < OP_DIV).
    Conflict between rule 65 and token OP_GEQ resolved as reduce (OP_GEQ < OP_DIV).
    Conflict between rule 65 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 65 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 65 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 65 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 65 and token OP_MOD resolved as reduce (%left OP_MOD).


State 94

   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   66           | expression OP_MOD expression •  [KW_FOR, KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    OP_POW  shift, and go to state 57

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token KW_AND resolved as reduce (KW_AND < OP_MOD).
    Conflict between rule 66 and token KW_OR resolved as reduce (KW_OR < OP_MOD).
    Conflict between rule 66 and token OP_POW resolved as shift (OP_MOD < OP_POW).
    Conflict between rule 66 and token OP_EQ resolved as reduce (OP_EQ < OP_MOD).
    Conflict between rule 66 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MOD).
    Conflict between rule 66 and token OP_LT resolved as reduce (OP_LT < OP_MOD).
    Conflict between rule 66 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MOD).
    Conflict between rule 66 and token OP_GT resolved as reduce (OP_GT < OP_MOD).
    Conflict between rule 66 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MOD).
    Conflict between rule 66 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 66 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 66 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 66 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 66 and token OP_MOD resolved as reduce (%left OP_MOD).


State 95

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 104


State 96

   16 param_decl_list: IDENTIFIER COLON type •

    $default  reduce using rule 16 (param_decl_list)


State 97

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW • type COLON stmt_list KW_ENDDEF SEMICOLON
   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 105


State 98

   17 param_decl_list: param_decl_list COMMA IDENTIFIER • COLON type

    COLON  shift, and go to state 106


State 99

   11 var_declaration: • ident_list COLON type SEMICOLON
   18 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON stmt_list • KW_ENDDEF SEMICOLON
   20 stmt_list: stmt_list • stmt
   25 stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | • IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | • IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | • KW_RETURN expression SEMICOLON
   29     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   31     | • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   32     | • KW_BREAK SEMICOLON
   33     | • KW_CONTINUE SEMICOLON
   34     | • SEMICOLON
   35     | • KW_RETURN SEMICOLON
   36     | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   38     | • IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | • IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | • IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | • IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | • IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | • error SEMICOLON
   44     | • var_declaration
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    error        shift, and go to state 107
    IDENTIFIER   shift, and go to state 108
    KW_IF        shift, and go to state 109
    KW_FOR       shift, and go to state 110
    KW_WHILE     shift, and go to state 111
    KW_BREAK     shift, and go to state 112
    KW_CONTINUE  shift, and go to state 113
    KW_ENDDEF    shift, and go to state 114
    KW_RETURN    shift, and go to state 115
    SEMICOLON    shift, and go to state 116

    var_declaration  go to state 117
    stmt             go to state 118
    ident_list       go to state 18


State 100

   45 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON •

    $default  reduce using rule 45 (component)


State 101

   50 hash_ident_list: HASH IDENTIFIER •

    $default  reduce using rule 50 (hash_ident_list)


State 102

   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL
   48 component_member: hash_ident_list COLON • type SEMICOLON

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 119


State 103

   51 hash_ident_list: hash_ident_list COMMA • HASH IDENTIFIER

    HASH  shift, and go to state 120


State 104

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON •

    $default  reduce using rule 12 (const_declaration)


State 105

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type • COLON stmt_list KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 121


State 106

   17 param_decl_list: param_decl_list COMMA IDENTIFIER COLON • type
   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 122


State 107

   43 stmt: error • SEMICOLON

    SEMICOLON  shift, and go to state 123


State 108

   25 stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   26     | IDENTIFIER • LPAREN RPAREN SEMICOLON
   27     | IDENTIFIER • LPAREN arg_list RPAREN SEMICOLON
   36     | IDENTIFIER • OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   38     | IDENTIFIER • OP_PLUSEQ expression SEMICOLON
   39     | IDENTIFIER • OP_MINUSEQ expression SEMICOLON
   40     | IDENTIFIER • OP_MULTEQ expression SEMICOLON
   41     | IDENTIFIER • OP_DIVEQ expression SEMICOLON
   42     | IDENTIFIER • OP_MODEQ expression SEMICOLON
   52 ident_list: IDENTIFIER •  [COLON, COMMA]

    OP_ASSIGN   shift, and go to state 124
    OP_PLUSEQ   shift, and go to state 125
    OP_MINUSEQ  shift, and go to state 126
    OP_MULTEQ   shift, and go to state 127
    OP_DIVEQ    shift, and go to state 128
    OP_MODEQ    shift, and go to state 129
    OP_DEFINE   shift, and go to state 130
    LPAREN      shift, and go to state 131

    $default  reduce using rule 52 (ident_list)


State 109

   29 stmt: KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    LPAREN  shift, and go to state 132


State 110

   31 stmt: KW_FOR • IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 133


State 111

   37 stmt: KW_WHILE • LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

    LPAREN  shift, and go to state 134


State 112

   32 stmt: KW_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 135


State 113

   33 stmt: KW_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 136


State 114

   18 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON stmt_list KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 137


State 115

   28 stmt: KW_RETURN • expression SEMICOLON
   35     | KW_RETURN • SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44
    SEMICOLON         shift, and go to state 138

    expression  go to state 139


State 116

   34 stmt: SEMICOLON •

    $default  reduce using rule 34 (stmt)


State 117

   44 stmt: var_declaration •

    $default  reduce using rule 44 (stmt)


State 118

   20 stmt_list: stmt_list stmt •

    $default  reduce using rule 20 (stmt_list)


State 119

   48 component_member: hash_ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 140


State 120

   51 hash_ident_list: hash_ident_list COMMA HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 141


State 121

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON • stmt_list KW_ENDDEF SEMICOLON
   19 stmt_list: ε •
   20          | • stmt_list stmt

    $default  reduce using rule 19 (stmt_list)

    stmt_list  go to state 142


State 122

   17 param_decl_list: param_decl_list COMMA IDENTIFIER COLON type •

    $default  reduce using rule 17 (param_decl_list)


State 123

   43 stmt: error SEMICOLON •

    $default  reduce using rule 43 (stmt)


State 124

   25 stmt: IDENTIFIER OP_ASSIGN • expression SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 143


State 125

   38 stmt: IDENTIFIER OP_PLUSEQ • expression SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 144


State 126

   39 stmt: IDENTIFIER OP_MINUSEQ • expression SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 145


State 127

   40 stmt: IDENTIFIER OP_MULTEQ • expression SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 146


State 128

   41 stmt: IDENTIFIER OP_DIVEQ • expression SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 147


State 129

   42 stmt: IDENTIFIER OP_MODEQ • expression SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 148


State 130

   36 stmt: IDENTIFIER OP_DEFINE • LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON

    LBRACKET  shift, and go to state 149


State 131

   26 stmt: IDENTIFIER LPAREN • RPAREN SEMICOLON
   27     | IDENTIFIER LPAREN • arg_list RPAREN SEMICOLON
   54 arg_list: • expression
   55         | • arg_list COMMA expression
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44
    RPAREN            shift, and go to state 150

    arg_list    go to state 151
    expression  go to state 152


State 132

   29 stmt: KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 153


State 133

   31 stmt: KW_FOR IDENTIFIER • KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 154


State 134

   37 stmt: KW_WHILE LPAREN • expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 155


State 135

   32 stmt: KW_BREAK SEMICOLON •

    $default  reduce using rule 32 (stmt)


State 136

   33 stmt: KW_CONTINUE SEMICOLON •

    $default  reduce using rule 33 (stmt)


State 137

   18 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON stmt_list KW_ENDDEF SEMICOLON •

    $default  reduce using rule 18 (main_function)


State 138

   35 stmt: KW_RETURN SEMICOLON •

    $default  reduce using rule 35 (stmt)


State 139

   28 stmt: KW_RETURN expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 156


State 140

   48 component_member: hash_ident_list COLON type SEMICOLON •

    $default  reduce using rule 48 (component_member)


State 141

   51 hash_ident_list: hash_ident_list COMMA HASH IDENTIFIER •

    $default  reduce using rule 51 (hash_ident_list)


State 142

   11 var_declaration: • ident_list COLON type SEMICOLON
   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list • KW_ENDDEF SEMICOLON
   20 stmt_list: stmt_list • stmt
   25 stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | • IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | • IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | • KW_RETURN expression SEMICOLON
   29     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   31     | • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   32     | • KW_BREAK SEMICOLON
   33     | • KW_CONTINUE SEMICOLON
   34     | • SEMICOLON
   35     | • KW_RETURN SEMICOLON
   36     | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   38     | • IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | • IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | • IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | • IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | • IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | • error SEMICOLON
   44     | • var_declaration
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    error        shift, and go to state 107
    IDENTIFIER   shift, and go to state 108
    KW_IF        shift, and go to state 109
    KW_FOR       shift, and go to state 110
    KW_WHILE     shift, and go to state 111
    KW_BREAK     shift, and go to state 112
    KW_CONTINUE  shift, and go to state 113
    KW_ENDDEF    shift, and go to state 157
    KW_RETURN    shift, and go to state 115
    SEMICOLON    shift, and go to state 116

    var_declaration  go to state 117
    stmt             go to state 118
    ident_list       go to state 18


State 143

   25 stmt: IDENTIFIER OP_ASSIGN expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 158


State 144

   38 stmt: IDENTIFIER OP_PLUSEQ expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 159


State 145

   39 stmt: IDENTIFIER OP_MINUSEQ expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 160


State 146

   40 stmt: IDENTIFIER OP_MULTEQ expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 161


State 147

   41 stmt: IDENTIFIER OP_DIVEQ expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 162


State 148

   42 stmt: IDENTIFIER OP_MODEQ expression • SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND     shift, and go to state 55
    KW_OR      shift, and go to state 56
    OP_POW     shift, and go to state 57
    OP_EQ      shift, and go to state 58
    OP_NEQ     shift, and go to state 59
    OP_LT      shift, and go to state 60
    OP_LEQ     shift, and go to state 61
    OP_GT      shift, and go to state 62
    OP_GEQ     shift, and go to state 63
    OP_PLUS    shift, and go to state 64
    OP_MINUS   shift, and go to state 65
    OP_MULT    shift, and go to state 66
    OP_DIV     shift, and go to state 67
    OP_MOD     shift, and go to state 68
    SEMICOLON  shift, and go to state 163


State 149

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET • expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 164


State 150

   26 stmt: IDENTIFIER LPAREN RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 165


State 151

   27 stmt: IDENTIFIER LPAREN arg_list • RPAREN SEMICOLON
   55 arg_list: arg_list • COMMA expression

    RPAREN  shift, and go to state 166
    COMMA   shift, and go to state 167


State 152

   54 arg_list: expression •  [RPAREN, COMMA]
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 54 (arg_list)


State 153

   29 stmt: KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    RPAREN    shift, and go to state 168


State 154

   31 stmt: KW_FOR IDENTIFIER KW_IN • LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 169


State 155

   37 stmt: KW_WHILE LPAREN expression • RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    RPAREN    shift, and go to state 170


State 156

   28 stmt: KW_RETURN expression SEMICOLON •

    $default  reduce using rule 28 (stmt)


State 157

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 171


State 158

   25 stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 25 (stmt)


State 159

   38 stmt: IDENTIFIER OP_PLUSEQ expression SEMICOLON •

    $default  reduce using rule 38 (stmt)


State 160

   39 stmt: IDENTIFIER OP_MINUSEQ expression SEMICOLON •

    $default  reduce using rule 39 (stmt)


State 161

   40 stmt: IDENTIFIER OP_MULTEQ expression SEMICOLON •

    $default  reduce using rule 40 (stmt)


State 162

   41 stmt: IDENTIFIER OP_DIVEQ expression SEMICOLON •

    $default  reduce using rule 41 (stmt)


State 163

   42 stmt: IDENTIFIER OP_MODEQ expression SEMICOLON •

    $default  reduce using rule 42 (stmt)


State 164

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression • KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_FOR    shift, and go to state 172
    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68


State 165

   26 stmt: IDENTIFIER LPAREN RPAREN SEMICOLON •

    $default  reduce using rule 26 (stmt)


State 166

   27 stmt: IDENTIFIER LPAREN arg_list RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 173


State 167

   55 arg_list: arg_list COMMA • expression
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 174


State 168

   29 stmt: KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 175


State 169

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET • expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 176


State 170

   37 stmt: KW_WHILE LPAREN expression RPAREN • COLON stmt_list KW_ENDWHILE SEMICOLON

    COLON  shift, and go to state 177


State 171

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON stmt_list KW_ENDDEF SEMICOLON •

    $default  reduce using rule 13 (function)


State 172

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR • IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 178


State 173

   27 stmt: IDENTIFIER LPAREN arg_list RPAREN SEMICOLON •

    $default  reduce using rule 27 (stmt)


State 174

   55 arg_list: arg_list COMMA expression •  [RPAREN, COMMA]
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68

    $default  reduce using rule 55 (arg_list)


State 175

   19 stmt_list: ε •
   20          | • stmt_list stmt
   29 stmt: KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 19 (stmt_list)

    stmt_list  go to state 179


State 176

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression • COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    COLON     shift, and go to state 180


State 177

   19 stmt_list: ε •
   20          | • stmt_list stmt
   37 stmt: KW_WHILE LPAREN expression RPAREN COLON • stmt_list KW_ENDWHILE SEMICOLON

    $default  reduce using rule 19 (stmt_list)

    stmt_list  go to state 181


State 178

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER • COLON expression RBRACKET COLON type SEMICOLON

    COLON  shift, and go to state 182


State 179

   11 var_declaration: • ident_list COLON type SEMICOLON
   20 stmt_list: stmt_list • stmt
   25 stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | • IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | • IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | • KW_RETURN expression SEMICOLON
   29     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   29     | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ENDIF SEMICOLON
   30     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   31     | • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   32     | • KW_BREAK SEMICOLON
   33     | • KW_CONTINUE SEMICOLON
   34     | • SEMICOLON
   35     | • KW_RETURN SEMICOLON
   36     | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   38     | • IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | • IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | • IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | • IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | • IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | • error SEMICOLON
   44     | • var_declaration
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    error        shift, and go to state 107
    IDENTIFIER   shift, and go to state 108
    KW_IF        shift, and go to state 109
    KW_ELSE      shift, and go to state 183
    KW_ENDIF     shift, and go to state 184
    KW_FOR       shift, and go to state 110
    KW_WHILE     shift, and go to state 111
    KW_BREAK     shift, and go to state 112
    KW_CONTINUE  shift, and go to state 113
    KW_RETURN    shift, and go to state 115
    SEMICOLON    shift, and go to state 116

    var_declaration  go to state 117
    stmt             go to state 118
    ident_list       go to state 18


State 180

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON • expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 185


State 181

   11 var_declaration: • ident_list COLON type SEMICOLON
   20 stmt_list: stmt_list • stmt
   25 stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | • IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | • IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | • KW_RETURN expression SEMICOLON
   29     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   31     | • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   32     | • KW_BREAK SEMICOLON
   33     | • KW_CONTINUE SEMICOLON
   34     | • SEMICOLON
   35     | • KW_RETURN SEMICOLON
   36     | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   37     | KW_WHILE LPAREN expression RPAREN COLON stmt_list • KW_ENDWHILE SEMICOLON
   38     | • IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | • IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | • IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | • IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | • IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | • error SEMICOLON
   44     | • var_declaration
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    error        shift, and go to state 107
    IDENTIFIER   shift, and go to state 108
    KW_IF        shift, and go to state 109
    KW_FOR       shift, and go to state 110
    KW_WHILE     shift, and go to state 111
    KW_ENDWHILE  shift, and go to state 186
    KW_BREAK     shift, and go to state 112
    KW_CONTINUE  shift, and go to state 113
    KW_RETURN    shift, and go to state 115
    SEMICOLON    shift, and go to state 116

    var_declaration  go to state 117
    stmt             go to state 118
    ident_list       go to state 18


State 182

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON • expression RBRACKET COLON type SEMICOLON
   56 expression: • CONST_INT
   57           | • CONST_FLOAT
   58           | • CONST_STRING
   59           | • CONST_BOOL_TRUE
   60           | • CONST_BOOL_FALSE
   61           | • IDENTIFIER
   62           | • expression OP_PLUS expression
   63           | • expression OP_MINUS expression
   64           | • expression OP_MULT expression
   65           | • expression OP_DIV expression
   66           | • expression OP_MOD expression
   67           | • expression OP_POW expression
   68           | • expression OP_EQ expression
   69           | • expression OP_NEQ expression
   70           | • expression OP_LT expression
   71           | • expression OP_LEQ expression
   72           | • expression OP_GT expression
   73           | • expression OP_GEQ expression
   74           | • expression KW_AND expression
   75           | • expression KW_OR expression
   76           | • KW_NOT expression
   77           | • OP_MINUS expression
   78           | • LPAREN expression RPAREN

    IDENTIFIER        shift, and go to state 36
    CONST_INT         shift, and go to state 37
    CONST_FLOAT       shift, and go to state 38
    CONST_STRING      shift, and go to state 39
    CONST_BOOL_TRUE   shift, and go to state 40
    CONST_BOOL_FALSE  shift, and go to state 41
    KW_NOT            shift, and go to state 42
    OP_MINUS          shift, and go to state 43
    LPAREN            shift, and go to state 44

    expression  go to state 187


State 183

   30 stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE • COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 188


State 184

   29 stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 189


State 185

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression • RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    RBRACKET  shift, and go to state 190


State 186

   37 stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 191


State 187

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression • RBRACKET COLON type SEMICOLON
   62 expression: expression • OP_PLUS expression
   63           | expression • OP_MINUS expression
   64           | expression • OP_MULT expression
   65           | expression • OP_DIV expression
   66           | expression • OP_MOD expression
   67           | expression • OP_POW expression
   68           | expression • OP_EQ expression
   69           | expression • OP_NEQ expression
   70           | expression • OP_LT expression
   71           | expression • OP_LEQ expression
   72           | expression • OP_GT expression
   73           | expression • OP_GEQ expression
   74           | expression • KW_AND expression
   75           | expression • KW_OR expression

    KW_AND    shift, and go to state 55
    KW_OR     shift, and go to state 56
    OP_POW    shift, and go to state 57
    OP_EQ     shift, and go to state 58
    OP_NEQ    shift, and go to state 59
    OP_LT     shift, and go to state 60
    OP_LEQ    shift, and go to state 61
    OP_GT     shift, and go to state 62
    OP_GEQ    shift, and go to state 63
    OP_PLUS   shift, and go to state 64
    OP_MINUS  shift, and go to state 65
    OP_MULT   shift, and go to state 66
    OP_DIV    shift, and go to state 67
    OP_MOD    shift, and go to state 68
    RBRACKET  shift, and go to state 192


State 188

   19 stmt_list: ε •
   20          | • stmt_list stmt
   30 stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON • stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 19 (stmt_list)

    stmt_list  go to state 193


State 189

   29 stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 29 (stmt)


State 190

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET • COLON stmt_list KW_ENDFOR SEMICOLON

    COLON  shift, and go to state 194


State 191

   37 stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON •

    $default  reduce using rule 37 (stmt)


State 192

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 195


State 193

   11 var_declaration: • ident_list COLON type SEMICOLON
   20 stmt_list: stmt_list • stmt
   25 stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | • IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | • IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | • KW_RETURN expression SEMICOLON
   29     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   30     | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list • KW_ENDIF SEMICOLON
   31     | • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   32     | • KW_BREAK SEMICOLON
   33     | • KW_CONTINUE SEMICOLON
   34     | • SEMICOLON
   35     | • KW_RETURN SEMICOLON
   36     | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   38     | • IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | • IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | • IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | • IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | • IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | • error SEMICOLON
   44     | • var_declaration
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    error        shift, and go to state 107
    IDENTIFIER   shift, and go to state 108
    KW_IF        shift, and go to state 109
    KW_ENDIF     shift, and go to state 196
    KW_FOR       shift, and go to state 110
    KW_WHILE     shift, and go to state 111
    KW_BREAK     shift, and go to state 112
    KW_CONTINUE  shift, and go to state 113
    KW_RETURN    shift, and go to state 115
    SEMICOLON    shift, and go to state 116

    var_declaration  go to state 117
    stmt             go to state 118
    ident_list       go to state 18


State 194

   19 stmt_list: ε •
   20          | • stmt_list stmt
   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON • stmt_list KW_ENDFOR SEMICOLON

    $default  reduce using rule 19 (stmt_list)

    stmt_list  go to state 197


State 195

   21 type: • KW_INTEGER
   22     | • KW_SCALAR
   23     | • KW_STR
   24     | • KW_BOOL
   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON • type SEMICOLON

    KW_INTEGER  shift, and go to state 30
    KW_SCALAR   shift, and go to state 31
    KW_STR      shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    type  go to state 198


State 196

   30 stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 199


State 197

   11 var_declaration: • ident_list COLON type SEMICOLON
   20 stmt_list: stmt_list • stmt
   25 stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   26     | • IDENTIFIER LPAREN RPAREN SEMICOLON
   27     | • IDENTIFIER LPAREN arg_list RPAREN SEMICOLON
   28     | • KW_RETURN expression SEMICOLON
   29     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   30     | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   31     | • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   31     | KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list • KW_ENDFOR SEMICOLON
   32     | • KW_BREAK SEMICOLON
   33     | • KW_CONTINUE SEMICOLON
   34     | • SEMICOLON
   35     | • KW_RETURN SEMICOLON
   36     | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON
   37     | • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   38     | • IDENTIFIER OP_PLUSEQ expression SEMICOLON
   39     | • IDENTIFIER OP_MINUSEQ expression SEMICOLON
   40     | • IDENTIFIER OP_MULTEQ expression SEMICOLON
   41     | • IDENTIFIER OP_DIVEQ expression SEMICOLON
   42     | • IDENTIFIER OP_MODEQ expression SEMICOLON
   43     | • error SEMICOLON
   44     | • var_declaration
   52 ident_list: • IDENTIFIER
   53           | • ident_list COMMA IDENTIFIER

    error        shift, and go to state 107
    IDENTIFIER   shift, and go to state 108
    KW_IF        shift, and go to state 109
    KW_FOR       shift, and go to state 110
    KW_ENDFOR    shift, and go to state 200
    KW_WHILE     shift, and go to state 111
    KW_BREAK     shift, and go to state 112
    KW_CONTINUE  shift, and go to state 113
    KW_RETURN    shift, and go to state 115
    SEMICOLON    shift, and go to state 116

    var_declaration  go to state 117
    stmt             go to state 118
    ident_list       go to state 18


State 198

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 201


State 199

   30 stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 30 (stmt)


State 200

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 202


State 201

   36 stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON expression RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 36 (stmt)


State 202

   31 stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON •

    $default  reduce using rule 31 (stmt)
