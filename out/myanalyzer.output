Nonterminals useless in grammar

    decl_list


Terminals unused in grammar

    OP_PLUSEQ
    OP_MINUSEQ
    OP_MULTEQ
    OP_DIVEQ
    OP_MODEQ
    DECL_IDENT
    DECLARATION
    STMT
    NO_COMPARE


Rules useless in grammar

  103 decl_list: ε
  104          | decl_list var_declaration
  105          | decl_list error SEMICOLON


State 136 conflicts: 1 shift/reduce
State 187 conflicts: 1 shift/reduce
State 227 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: macro_def_list top_level_list

    2 macro_def_list: ε
    3               | macro_def_list macro_def

    4 macro_def: KW_DEFMACRO IDENTIFIER expression

    5 top_level_list: ε
    6               | top_level_list top_level

    7 top_level: function
    8          | main_function
    9          | component
   10          | var_declaration
   11          | const_declaration

   12 var_declaration: ident_list COLON type SEMICOLON
   13                | IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type SEMICOLON

   14 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

   17 param_list: ε
   18           | param_decl_list

   19 param_decl_list: IDENTIFIER COLON type
   20                | param_decl_list COMMA IDENTIFIER COLON type

   21 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

   22 stmt_list: ε
   23          | stmt_list stmt

   24 type: KW_INTEGER
   25     | KW_SCALAR
   26     | KW_STR
   27     | KW_BOOL
   28     | IDENTIFIER

   29 stmt: assignment_stmt
   30     | return_stmt
   31     | if_stmt
   32     | for_stmt
   33     | while_stmt
   34     | break_stmt
   35     | continue_stmt
   36     | empty_stmt
   37     | function_call SEMICOLON
   38     | HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | error SEMICOLON

   40 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON

   47 return_stmt: KW_RETURN expression SEMICOLON
   48            | KW_RETURN SEMICOLON

   49 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

   52 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

   53 break_stmt: KW_BREAK SEMICOLON

   54 continue_stmt: KW_CONTINUE SEMICOLON

   55 empty_stmt: SEMICOLON

   56 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

   57 component_body: ε
   58               | component_body component_member

   59 component_member: hash_ident_list COLON type SEMICOLON
   60                 | hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   61                 | function
   62                 | SEMICOLON
   63                 | error SEMICOLON

   64 hash_ident_list: HASH IDENTIFIER
   65                | hash_ident_list COMMA HASH IDENTIFIER

   66 ident_list: IDENTIFIER
   67           | ident_list COMMA IDENTIFIER

   68 expression: primary_expression
   69           | expression OP_PLUS expression
   70           | expression OP_MINUS expression
   71           | expression OP_MULT expression
   72           | expression OP_DIV expression
   73           | expression OP_MOD expression
   74           | expression OP_POW expression
   75           | expression OP_EQ expression
   76           | expression OP_NEQ expression
   77           | expression OP_LT expression
   78           | expression OP_LEQ expression
   79           | expression OP_GT expression
   80           | expression OP_GEQ expression
   81           | expression KW_AND expression
   82           | expression KW_OR expression
   83           | KW_NOT expression
   84           | OP_MINUS expression
   85           | LPAREN expression RPAREN
   86           | CONST_BOOL_FALSE
   87           | CONST_BOOL_TRUE

   88 function_call: IDENTIFIER LPAREN arg_list RPAREN

   89 arg_list: ε
   90         | expression
   91         | arg_list COMMA expression

   92 primary_expression: CONST_INT
   93                   | CONST_FLOAT
   94                   | CONST_STRING
   95                   | IDENTIFIER
   96                   | function_call
   97                   | primary_expression LBRACKET expression RBRACKET
   98                   | primary_expression DOT IDENTIFIER
   99                   | HASH IDENTIFIER

  100 block: ε
  101      | block var_declaration
  102      | block stmt


Terminals, with rules where they appear

    $end (0) 0
    error (256) 39 63
    IDENTIFIER <string> (258) 4 13 14 15 16 19 20 28 38 40 41 43 44 45 46 51 56 64 65 66 67 88 95 98 99
    CONST_INT <string> (259) 13 45 46 60 92
    CONST_FLOAT <string> (260) 93
    CONST_STRING <string> (261) 94
    CONST_BOOL_TRUE (262) 87
    CONST_BOOL_FALSE (263) 86
    KW_INTEGER (264) 24
    KW_SCALAR (265) 25
    KW_STR (266) 26
    KW_BOOL (267) 27
    KW_CONST (268) 14
    KW_IF (269) 49 50
    KW_ELSE (270) 50
    KW_ENDIF (271) 49 50
    KW_FOR (272) 45 46 51
    KW_IN (273) 46 51
    KW_ENDFOR (274) 51
    KW_WHILE (275) 52
    KW_ENDWHILE (276) 52
    KW_BREAK (277) 53
    KW_CONTINUE (278) 54
    KW_NOT (279) 83
    KW_AND (280) 81
    KW_OR (281) 82
    KW_DEF (282) 15 16 21
    KW_ENDDEF (283) 15 16 21
    KW_MAIN (284) 21
    KW_RETURN (285) 47 48
    KW_COMP (286) 56
    KW_ENDCOMP (287) 56
    KW_OF (288) 46
    KW_DEFMACRO (289) 4
    OP_ASSIGN (290) 14 38 40 41 42
    OP_PLUSEQ (291)
    OP_MINUSEQ (292)
    OP_MULTEQ (293)
    OP_DIVEQ (294)
    OP_MODEQ (295)
    OP_DEFINE (296) 43 44 45 46
    OP_POW (297) 74
    OP_EQ (298) 75
    OP_NEQ (299) 76
    OP_LT (300) 77
    OP_LEQ (301) 78
    OP_GT (302) 79
    OP_GEQ (303) 80
    OP_PLUS (304) 69
    OP_MINUS (305) 70 84
    OP_MULT (306) 71
    OP_DIV (307) 72
    OP_MOD (308) 73
    LPAREN (309) 15 16 21 49 50 52 85 88
    RPAREN (310) 15 16 21 49 50 52 85 88
    LBRACKET (311) 13 41 42 45 46 51 60 97
    RBRACKET (312) 13 41 42 45 46 51 60 97
    COLON (313) 12 13 14 15 16 19 20 21 44 45 46 49 50 51 52 56 59 60
    SEMICOLON (314) 12 13 14 15 16 21 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 59 60 62 63
    COMMA (315) 20 65 67 91
    DOT (316) 98
    OP_ARROW (317) 15
    HASH (318) 38 64 65 99
    DECL_IDENT <string> (319)
    UMINUS (320)
    DECLARATION (321)
    STMT (322)
    NO_COMPARE (323)


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    program <string> (70)
        on left: 1
        on right: 0
    macro_def_list <string> (71)
        on left: 2 3
        on right: 1 3
    macro_def <string> (72)
        on left: 4
        on right: 3
    top_level_list <string> (73)
        on left: 5 6
        on right: 1 6
    top_level <string> (74)
        on left: 7 8 9 10 11
        on right: 6
    var_declaration <string> (75)
        on left: 12 13
        on right: 10 101
    const_declaration <string> (76)
        on left: 14
        on right: 11
    function <string> (77)
        on left: 15 16
        on right: 7 61
    param_list <string> (78)
        on left: 17 18
        on right: 15 16
    param_decl_list <string> (79)
        on left: 19 20
        on right: 18 20
    main_function <string> (80)
        on left: 21
        on right: 8
    stmt_list <string> (81)
        on left: 22 23
        on right: 23 49 50 51 52
    type <string> (82)
        on left: 24 25 26 27 28
        on right: 12 13 14 15 19 20 44 45 46 59 60
    stmt <string> (83)
        on left: 29 30 31 32 33 34 35 36 37 38 39
        on right: 23 102
    assignment_stmt <string> (84)
        on left: 40 41 42 43 44 45 46
        on right: 29
    return_stmt <string> (85)
        on left: 47 48
        on right: 30
    if_stmt <string> (86)
        on left: 49 50
        on right: 31
    for_stmt <string> (87)
        on left: 51
        on right: 32
    while_stmt <string> (88)
        on left: 52
        on right: 33
    break_stmt <string> (89)
        on left: 53
        on right: 34
    continue_stmt <string> (90)
        on left: 54
        on right: 35
    empty_stmt <string> (91)
        on left: 55
        on right: 36
    component <string> (92)
        on left: 56
        on right: 9
    component_body <string> (93)
        on left: 57 58
        on right: 56 58
    component_member <string> (94)
        on left: 59 60 61 62 63
        on right: 58
    hash_ident_list <string> (95)
        on left: 64 65
        on right: 59 60 65
    ident_list <string> (96)
        on left: 66 67
        on right: 12 67
    expression <string> (97)
        on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
        on right: 4 14 38 40 41 42 43 44 45 46 47 49 50 51 52 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 90 91 97
    function_call <string> (98)
        on left: 88
        on right: 37 96
    arg_list <string> (99)
        on left: 89 90 91
        on right: 88 91
    primary_expression <string> (100)
        on left: 92 93 94 95 96 97 98 99
        on right: 42 68 97 98
    block <string> (101)
        on left: 100 101 102
        on right: 15 16 21 101 102


State 0

    0 $accept: • program $end
    1 program: • macro_def_list top_level_list
    2 macro_def_list: ε •
    3               | • macro_def_list macro_def

    $default  reduce using rule 2 (macro_def_list)

    program         go to state 1
    macro_def_list  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: macro_def_list • top_level_list
    3 macro_def_list: macro_def_list • macro_def
    4 macro_def: • KW_DEFMACRO IDENTIFIER expression
    5 top_level_list: ε •  [$end, IDENTIFIER, KW_CONST, KW_DEF, KW_COMP]
    6               | • top_level_list top_level

    KW_DEFMACRO  shift, and go to state 4

    $default  reduce using rule 5 (top_level_list)

    macro_def       go to state 5
    top_level_list  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 macro_def: KW_DEFMACRO • IDENTIFIER expression

    IDENTIFIER  shift, and go to state 7


State 5

    3 macro_def_list: macro_def_list macro_def •

    $default  reduce using rule 3 (macro_def_list)


State 6

    1 program: macro_def_list top_level_list •  [$end]
    6 top_level_list: top_level_list • top_level
    7 top_level: • function
    8          | • main_function
    9          | • component
   10          | • var_declaration
   11          | • const_declaration
   12 var_declaration: • ident_list COLON type SEMICOLON
   13                | • IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   14 const_declaration: • KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   15 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   21 main_function: • KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON
   56 component: • KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON
   66 ident_list: • IDENTIFIER
   67           | • ident_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 8
    KW_CONST    shift, and go to state 9
    KW_DEF      shift, and go to state 10
    KW_COMP     shift, and go to state 11

    $default  reduce using rule 1 (program)

    top_level          go to state 12
    var_declaration    go to state 13
    const_declaration  go to state 14
    function           go to state 15
    main_function      go to state 16
    component          go to state 17
    ident_list         go to state 18


State 7

    4 macro_def: KW_DEFMACRO IDENTIFIER • expression
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 29
    function_call       go to state 30
    primary_expression  go to state 31


State 8

   13 var_declaration: IDENTIFIER • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   66 ident_list: IDENTIFIER •  [COLON, COMMA]

    LBRACKET  shift, and go to state 32

    $default  reduce using rule 66 (ident_list)


State 9

   14 const_declaration: KW_CONST • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 33


State 10

   15 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   21 main_function: KW_DEF • KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 34
    KW_MAIN     shift, and go to state 35


State 11

   56 component: KW_COMP • IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 36


State 12

    6 top_level_list: top_level_list top_level •

    $default  reduce using rule 6 (top_level_list)


State 13

   10 top_level: var_declaration •

    $default  reduce using rule 10 (top_level)


State 14

   11 top_level: const_declaration •

    $default  reduce using rule 11 (top_level)


State 15

    7 top_level: function •

    $default  reduce using rule 7 (top_level)


State 16

    8 top_level: main_function •

    $default  reduce using rule 8 (top_level)


State 17

    9 top_level: component •

    $default  reduce using rule 9 (top_level)


State 18

   12 var_declaration: ident_list • COLON type SEMICOLON
   67 ident_list: ident_list • COMMA IDENTIFIER

    COLON  shift, and go to state 37
    COMMA  shift, and go to state 38


State 19

   88 function_call: IDENTIFIER • LPAREN arg_list RPAREN
   95 primary_expression: IDENTIFIER •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, LBRACKET, RBRACKET, COLON, SEMICOLON, COMMA, DOT]

    LPAREN  shift, and go to state 39

    $default  reduce using rule 95 (primary_expression)


State 20

   92 primary_expression: CONST_INT •

    $default  reduce using rule 92 (primary_expression)


State 21

   93 primary_expression: CONST_FLOAT •

    $default  reduce using rule 93 (primary_expression)


State 22

   94 primary_expression: CONST_STRING •

    $default  reduce using rule 94 (primary_expression)


State 23

   87 expression: CONST_BOOL_TRUE •

    $default  reduce using rule 87 (expression)


State 24

   86 expression: CONST_BOOL_FALSE •

    $default  reduce using rule 86 (expression)


State 25

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   83           | KW_NOT • expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 40
    function_call       go to state 30
    primary_expression  go to state 31


State 26

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   84           | OP_MINUS • expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 41
    function_call       go to state 30
    primary_expression  go to state 31


State 27

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   85           | LPAREN • expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 42
    function_call       go to state 30
    primary_expression  go to state 31


State 28

   99 primary_expression: HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 43


State 29

    4 macro_def: KW_DEFMACRO IDENTIFIER expression •  [$end, IDENTIFIER, KW_CONST, KW_DEF, KW_COMP, KW_DEFMACRO]
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 4 (macro_def)


State 30

   96 primary_expression: function_call •

    $default  reduce using rule 96 (primary_expression)


State 31

   68 expression: primary_expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   97 primary_expression: primary_expression • LBRACKET expression RBRACKET
   98                   | primary_expression • DOT IDENTIFIER

    LBRACKET  shift, and go to state 58
    DOT       shift, and go to state 59

    $default  reduce using rule 68 (expression)


State 32

   13 var_declaration: IDENTIFIER LBRACKET • CONST_INT RBRACKET COLON type SEMICOLON

    CONST_INT  shift, and go to state 60


State 33

   14 const_declaration: KW_CONST IDENTIFIER • OP_ASSIGN expression COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 61


State 34

   15 function: KW_DEF IDENTIFIER • LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF IDENTIFIER • LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 62


State 35

   21 main_function: KW_DEF KW_MAIN • LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 63


State 36

   56 component: KW_COMP IDENTIFIER • COLON component_body KW_ENDCOMP SEMICOLON

    COLON  shift, and go to state 64


State 37

   12 var_declaration: ident_list COLON • type SEMICOLON
   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 70


State 38

   67 ident_list: ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 71


State 39

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   88              | IDENTIFIER LPAREN • arg_list RPAREN
   89 arg_list: ε •  [RPAREN, COMMA]
   90         | • expression
   91         | • arg_list COMMA expression
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    $default  reduce using rule 89 (arg_list)

    expression          go to state 72
    function_call       go to state 30
    arg_list            go to state 73
    primary_expression  go to state 31


State 40

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   83           | KW_NOT expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 83 (expression)

    Conflict between rule 83 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 83 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 83 and token OP_POW resolved as shift (KW_NOT < OP_POW).
    Conflict between rule 83 and token OP_EQ resolved as shift (KW_NOT < OP_EQ).
    Conflict between rule 83 and token OP_NEQ resolved as shift (KW_NOT < OP_NEQ).
    Conflict between rule 83 and token OP_LT resolved as shift (KW_NOT < OP_LT).
    Conflict between rule 83 and token OP_LEQ resolved as shift (KW_NOT < OP_LEQ).
    Conflict between rule 83 and token OP_GT resolved as shift (KW_NOT < OP_GT).
    Conflict between rule 83 and token OP_GEQ resolved as shift (KW_NOT < OP_GEQ).
    Conflict between rule 83 and token OP_PLUS resolved as shift (KW_NOT < OP_PLUS).
    Conflict between rule 83 and token OP_MINUS resolved as shift (KW_NOT < OP_MINUS).
    Conflict between rule 83 and token OP_MULT resolved as shift (KW_NOT < OP_MULT).
    Conflict between rule 83 and token OP_DIV resolved as shift (KW_NOT < OP_DIV).
    Conflict between rule 83 and token OP_MOD resolved as shift (KW_NOT < OP_MOD).


State 41

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   84           | OP_MINUS expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    $default  reduce using rule 84 (expression)

    Conflict between rule 84 and token KW_AND resolved as reduce (KW_AND < UMINUS).
    Conflict between rule 84 and token KW_OR resolved as reduce (KW_OR < UMINUS).
    Conflict between rule 84 and token OP_POW resolved as reduce (OP_POW < UMINUS).
    Conflict between rule 84 and token OP_EQ resolved as reduce (OP_EQ < UMINUS).
    Conflict between rule 84 and token OP_NEQ resolved as reduce (OP_NEQ < UMINUS).
    Conflict between rule 84 and token OP_LT resolved as reduce (OP_LT < UMINUS).
    Conflict between rule 84 and token OP_LEQ resolved as reduce (OP_LEQ < UMINUS).
    Conflict between rule 84 and token OP_GT resolved as reduce (OP_GT < UMINUS).
    Conflict between rule 84 and token OP_GEQ resolved as reduce (OP_GEQ < UMINUS).
    Conflict between rule 84 and token OP_PLUS resolved as reduce (OP_PLUS < UMINUS).
    Conflict between rule 84 and token OP_MINUS resolved as reduce (OP_MINUS < UMINUS).
    Conflict between rule 84 and token OP_MULT resolved as reduce (OP_MULT < UMINUS).
    Conflict between rule 84 and token OP_DIV resolved as reduce (OP_DIV < UMINUS).
    Conflict between rule 84 and token OP_MOD resolved as reduce (OP_MOD < UMINUS).


State 42

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   85           | LPAREN expression • RPAREN

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RPAREN    shift, and go to state 74


State 43

   99 primary_expression: HASH IDENTIFIER •

    $default  reduce using rule 99 (primary_expression)


State 44

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   81           | expression KW_AND • expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 75
    function_call       go to state 30
    primary_expression  go to state 31


State 45

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   82           | expression KW_OR • expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 76
    function_call       go to state 30
    primary_expression  go to state 31


State 46

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   74           | expression OP_POW • expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 77
    function_call       go to state 30
    primary_expression  go to state 31


State 47

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   75           | expression OP_EQ • expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 78
    function_call       go to state 30
    primary_expression  go to state 31


State 48

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   76           | expression OP_NEQ • expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 79
    function_call       go to state 30
    primary_expression  go to state 31


State 49

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   77           | expression OP_LT • expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 80
    function_call       go to state 30
    primary_expression  go to state 31


State 50

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   78           | expression OP_LEQ • expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 81
    function_call       go to state 30
    primary_expression  go to state 31


State 51

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   79           | expression OP_GT • expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 82
    function_call       go to state 30
    primary_expression  go to state 31


State 52

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   80           | expression OP_GEQ • expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 83
    function_call       go to state 30
    primary_expression  go to state 31


State 53

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   69           | expression OP_PLUS • expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 84
    function_call       go to state 30
    primary_expression  go to state 31


State 54

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   70           | expression OP_MINUS • expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 85
    function_call       go to state 30
    primary_expression  go to state 31


State 55

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   71           | expression OP_MULT • expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 86
    function_call       go to state 30
    primary_expression  go to state 31


State 56

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   72           | expression OP_DIV • expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 87
    function_call       go to state 30
    primary_expression  go to state 31


State 57

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   73           | expression OP_MOD • expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 88
    function_call       go to state 30
    primary_expression  go to state 31


State 58

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   97                   | primary_expression LBRACKET • expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 89
    function_call       go to state 30
    primary_expression  go to state 31


State 59

   98 primary_expression: primary_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 90


State 60

   13 var_declaration: IDENTIFIER LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 91


State 61

   14 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN • expression COLON type SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 92
    function_call       go to state 30
    primary_expression  go to state 31


State 62

   15 function: KW_DEF IDENTIFIER LPAREN • param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF IDENTIFIER LPAREN • param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   17 param_list: ε •  [RPAREN]
   18           | • param_decl_list
   19 param_decl_list: • IDENTIFIER COLON type
   20                | • param_decl_list COMMA IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 93

    $default  reduce using rule 17 (param_list)

    param_list       go to state 94
    param_decl_list  go to state 95


State 63

   21 main_function: KW_DEF KW_MAIN LPAREN • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 96


State 64

   56 component: KW_COMP IDENTIFIER COLON • component_body KW_ENDCOMP SEMICOLON
   57 component_body: ε •
   58               | • component_body component_member

    $default  reduce using rule 57 (component_body)

    component_body  go to state 97


State 65

   28 type: IDENTIFIER •

    $default  reduce using rule 28 (type)


State 66

   24 type: KW_INTEGER •

    $default  reduce using rule 24 (type)


State 67

   25 type: KW_SCALAR •

    $default  reduce using rule 25 (type)


State 68

   26 type: KW_STR •

    $default  reduce using rule 26 (type)


State 69

   27 type: KW_BOOL •

    $default  reduce using rule 27 (type)


State 70

   12 var_declaration: ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 98


State 71

   67 ident_list: ident_list COMMA IDENTIFIER •

    $default  reduce using rule 67 (ident_list)


State 72

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   90 arg_list: expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 90 (arg_list)


State 73

   88 function_call: IDENTIFIER LPAREN arg_list • RPAREN
   91 arg_list: arg_list • COMMA expression

    RPAREN  shift, and go to state 99
    COMMA   shift, and go to state 100


State 74

   85 expression: LPAREN expression RPAREN •

    $default  reduce using rule 85 (expression)


State 75

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   81           | expression KW_AND expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 81 (expression)

    Conflict between rule 81 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 81 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 81 and token OP_POW resolved as shift (KW_AND < OP_POW).
    Conflict between rule 81 and token OP_EQ resolved as shift (KW_AND < OP_EQ).
    Conflict between rule 81 and token OP_NEQ resolved as shift (KW_AND < OP_NEQ).
    Conflict between rule 81 and token OP_LT resolved as shift (KW_AND < OP_LT).
    Conflict between rule 81 and token OP_LEQ resolved as shift (KW_AND < OP_LEQ).
    Conflict between rule 81 and token OP_GT resolved as shift (KW_AND < OP_GT).
    Conflict between rule 81 and token OP_GEQ resolved as shift (KW_AND < OP_GEQ).
    Conflict between rule 81 and token OP_PLUS resolved as shift (KW_AND < OP_PLUS).
    Conflict between rule 81 and token OP_MINUS resolved as shift (KW_AND < OP_MINUS).
    Conflict between rule 81 and token OP_MULT resolved as shift (KW_AND < OP_MULT).
    Conflict between rule 81 and token OP_DIV resolved as shift (KW_AND < OP_DIV).
    Conflict between rule 81 and token OP_MOD resolved as shift (KW_AND < OP_MOD).


State 76

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   82           | expression KW_OR expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    KW_AND    shift, and go to state 44
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 82 (expression)

    Conflict between rule 82 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 82 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 82 and token OP_POW resolved as shift (KW_OR < OP_POW).
    Conflict between rule 82 and token OP_EQ resolved as shift (KW_OR < OP_EQ).
    Conflict between rule 82 and token OP_NEQ resolved as shift (KW_OR < OP_NEQ).
    Conflict between rule 82 and token OP_LT resolved as shift (KW_OR < OP_LT).
    Conflict between rule 82 and token OP_LEQ resolved as shift (KW_OR < OP_LEQ).
    Conflict between rule 82 and token OP_GT resolved as shift (KW_OR < OP_GT).
    Conflict between rule 82 and token OP_GEQ resolved as shift (KW_OR < OP_GEQ).
    Conflict between rule 82 and token OP_PLUS resolved as shift (KW_OR < OP_PLUS).
    Conflict between rule 82 and token OP_MINUS resolved as shift (KW_OR < OP_MINUS).
    Conflict between rule 82 and token OP_MULT resolved as shift (KW_OR < OP_MULT).
    Conflict between rule 82 and token OP_DIV resolved as shift (KW_OR < OP_DIV).
    Conflict between rule 82 and token OP_MOD resolved as shift (KW_OR < OP_MOD).


State 77

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   74           | expression OP_POW expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW  shift, and go to state 46

    $default  reduce using rule 74 (expression)

    Conflict between rule 74 and token KW_AND resolved as reduce (KW_AND < OP_POW).
    Conflict between rule 74 and token KW_OR resolved as reduce (KW_OR < OP_POW).
    Conflict between rule 74 and token OP_POW resolved as shift (%right OP_POW).
    Conflict between rule 74 and token OP_EQ resolved as reduce (OP_EQ < OP_POW).
    Conflict between rule 74 and token OP_NEQ resolved as reduce (OP_NEQ < OP_POW).
    Conflict between rule 74 and token OP_LT resolved as reduce (OP_LT < OP_POW).
    Conflict between rule 74 and token OP_LEQ resolved as reduce (OP_LEQ < OP_POW).
    Conflict between rule 74 and token OP_GT resolved as reduce (OP_GT < OP_POW).
    Conflict between rule 74 and token OP_GEQ resolved as reduce (OP_GEQ < OP_POW).
    Conflict between rule 74 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POW).
    Conflict between rule 74 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POW).
    Conflict between rule 74 and token OP_MULT resolved as reduce (OP_MULT < OP_POW).
    Conflict between rule 74 and token OP_DIV resolved as reduce (OP_DIV < OP_POW).
    Conflict between rule 74 and token OP_MOD resolved as reduce (OP_MOD < OP_POW).


State 78

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   75           | expression OP_EQ expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 75 (expression)

    Conflict between rule 75 and token KW_AND resolved as reduce (KW_AND < OP_EQ).
    Conflict between rule 75 and token KW_OR resolved as reduce (KW_OR < OP_EQ).
    Conflict between rule 75 and token OP_POW resolved as shift (OP_EQ < OP_POW).
    Conflict between rule 75 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 75 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 75 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 75 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 75 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 75 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 75 and token OP_PLUS resolved as shift (OP_EQ < OP_PLUS).
    Conflict between rule 75 and token OP_MINUS resolved as shift (OP_EQ < OP_MINUS).
    Conflict between rule 75 and token OP_MULT resolved as shift (OP_EQ < OP_MULT).
    Conflict between rule 75 and token OP_DIV resolved as shift (OP_EQ < OP_DIV).
    Conflict between rule 75 and token OP_MOD resolved as shift (OP_EQ < OP_MOD).


State 79

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   76           | expression OP_NEQ expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 76 (expression)

    Conflict between rule 76 and token KW_AND resolved as reduce (KW_AND < OP_NEQ).
    Conflict between rule 76 and token KW_OR resolved as reduce (KW_OR < OP_NEQ).
    Conflict between rule 76 and token OP_POW resolved as shift (OP_NEQ < OP_POW).
    Conflict between rule 76 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 76 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 76 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 76 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 76 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 76 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 76 and token OP_PLUS resolved as shift (OP_NEQ < OP_PLUS).
    Conflict between rule 76 and token OP_MINUS resolved as shift (OP_NEQ < OP_MINUS).
    Conflict between rule 76 and token OP_MULT resolved as shift (OP_NEQ < OP_MULT).
    Conflict between rule 76 and token OP_DIV resolved as shift (OP_NEQ < OP_DIV).
    Conflict between rule 76 and token OP_MOD resolved as shift (OP_NEQ < OP_MOD).


State 80

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   77           | expression OP_LT expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 77 (expression)

    Conflict between rule 77 and token KW_AND resolved as reduce (KW_AND < OP_LT).
    Conflict between rule 77 and token KW_OR resolved as reduce (KW_OR < OP_LT).
    Conflict between rule 77 and token OP_POW resolved as shift (OP_LT < OP_POW).
    Conflict between rule 77 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 77 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 77 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 77 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 77 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 77 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 77 and token OP_PLUS resolved as shift (OP_LT < OP_PLUS).
    Conflict between rule 77 and token OP_MINUS resolved as shift (OP_LT < OP_MINUS).
    Conflict between rule 77 and token OP_MULT resolved as shift (OP_LT < OP_MULT).
    Conflict between rule 77 and token OP_DIV resolved as shift (OP_LT < OP_DIV).
    Conflict between rule 77 and token OP_MOD resolved as shift (OP_LT < OP_MOD).


State 81

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   78           | expression OP_LEQ expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 78 (expression)

    Conflict between rule 78 and token KW_AND resolved as reduce (KW_AND < OP_LEQ).
    Conflict between rule 78 and token KW_OR resolved as reduce (KW_OR < OP_LEQ).
    Conflict between rule 78 and token OP_POW resolved as shift (OP_LEQ < OP_POW).
    Conflict between rule 78 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 78 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 78 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 78 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 78 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 78 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 78 and token OP_PLUS resolved as shift (OP_LEQ < OP_PLUS).
    Conflict between rule 78 and token OP_MINUS resolved as shift (OP_LEQ < OP_MINUS).
    Conflict between rule 78 and token OP_MULT resolved as shift (OP_LEQ < OP_MULT).
    Conflict between rule 78 and token OP_DIV resolved as shift (OP_LEQ < OP_DIV).
    Conflict between rule 78 and token OP_MOD resolved as shift (OP_LEQ < OP_MOD).


State 82

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   79           | expression OP_GT expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 79 (expression)

    Conflict between rule 79 and token KW_AND resolved as reduce (KW_AND < OP_GT).
    Conflict between rule 79 and token KW_OR resolved as reduce (KW_OR < OP_GT).
    Conflict between rule 79 and token OP_POW resolved as shift (OP_GT < OP_POW).
    Conflict between rule 79 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 79 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 79 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 79 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 79 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 79 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 79 and token OP_PLUS resolved as shift (OP_GT < OP_PLUS).
    Conflict between rule 79 and token OP_MINUS resolved as shift (OP_GT < OP_MINUS).
    Conflict between rule 79 and token OP_MULT resolved as shift (OP_GT < OP_MULT).
    Conflict between rule 79 and token OP_DIV resolved as shift (OP_GT < OP_DIV).
    Conflict between rule 79 and token OP_MOD resolved as shift (OP_GT < OP_MOD).


State 83

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   80           | expression OP_GEQ expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW    shift, and go to state 46
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 80 (expression)

    Conflict between rule 80 and token KW_AND resolved as reduce (KW_AND < OP_GEQ).
    Conflict between rule 80 and token KW_OR resolved as reduce (KW_OR < OP_GEQ).
    Conflict between rule 80 and token OP_POW resolved as shift (OP_GEQ < OP_POW).
    Conflict between rule 80 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 80 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 80 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 80 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 80 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 80 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 80 and token OP_PLUS resolved as shift (OP_GEQ < OP_PLUS).
    Conflict between rule 80 and token OP_MINUS resolved as shift (OP_GEQ < OP_MINUS).
    Conflict between rule 80 and token OP_MULT resolved as shift (OP_GEQ < OP_MULT).
    Conflict between rule 80 and token OP_DIV resolved as shift (OP_GEQ < OP_DIV).
    Conflict between rule 80 and token OP_MOD resolved as shift (OP_GEQ < OP_MOD).


State 84

   69 expression: expression • OP_PLUS expression
   69           | expression OP_PLUS expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW   shift, and go to state 46
    OP_MULT  shift, and go to state 55
    OP_DIV   shift, and go to state 56
    OP_MOD   shift, and go to state 57

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 69 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).
    Conflict between rule 69 and token OP_POW resolved as shift (OP_PLUS < OP_POW).
    Conflict between rule 69 and token OP_EQ resolved as reduce (OP_EQ < OP_PLUS).
    Conflict between rule 69 and token OP_NEQ resolved as reduce (OP_NEQ < OP_PLUS).
    Conflict between rule 69 and token OP_LT resolved as reduce (OP_LT < OP_PLUS).
    Conflict between rule 69 and token OP_LEQ resolved as reduce (OP_LEQ < OP_PLUS).
    Conflict between rule 69 and token OP_GT resolved as reduce (OP_GT < OP_PLUS).
    Conflict between rule 69 and token OP_GEQ resolved as reduce (OP_GEQ < OP_PLUS).
    Conflict between rule 69 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 69 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 69 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 69 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 69 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).


State 85

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   70           | expression OP_MINUS expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW   shift, and go to state 46
    OP_MULT  shift, and go to state 55
    OP_DIV   shift, and go to state 56
    OP_MOD   shift, and go to state 57

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 70 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).
    Conflict between rule 70 and token OP_POW resolved as shift (OP_MINUS < OP_POW).
    Conflict between rule 70 and token OP_EQ resolved as reduce (OP_EQ < OP_MINUS).
    Conflict between rule 70 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MINUS).
    Conflict between rule 70 and token OP_LT resolved as reduce (OP_LT < OP_MINUS).
    Conflict between rule 70 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MINUS).
    Conflict between rule 70 and token OP_GT resolved as reduce (OP_GT < OP_MINUS).
    Conflict between rule 70 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MINUS).
    Conflict between rule 70 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 70 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 70 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 70 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 70 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).


State 86

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   71           | expression OP_MULT expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW  shift, and go to state 46

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token KW_AND resolved as reduce (KW_AND < OP_MULT).
    Conflict between rule 71 and token KW_OR resolved as reduce (KW_OR < OP_MULT).
    Conflict between rule 71 and token OP_POW resolved as shift (OP_MULT < OP_POW).
    Conflict between rule 71 and token OP_EQ resolved as reduce (OP_EQ < OP_MULT).
    Conflict between rule 71 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MULT).
    Conflict between rule 71 and token OP_LT resolved as reduce (OP_LT < OP_MULT).
    Conflict between rule 71 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MULT).
    Conflict between rule 71 and token OP_GT resolved as reduce (OP_GT < OP_MULT).
    Conflict between rule 71 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MULT).
    Conflict between rule 71 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 71 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 71 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 71 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 71 and token OP_MOD resolved as reduce (%left OP_MOD).


State 87

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   72           | expression OP_DIV expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW  shift, and go to state 46

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token KW_AND resolved as reduce (KW_AND < OP_DIV).
    Conflict between rule 72 and token KW_OR resolved as reduce (KW_OR < OP_DIV).
    Conflict between rule 72 and token OP_POW resolved as shift (OP_DIV < OP_POW).
    Conflict between rule 72 and token OP_EQ resolved as reduce (OP_EQ < OP_DIV).
    Conflict between rule 72 and token OP_NEQ resolved as reduce (OP_NEQ < OP_DIV).
    Conflict between rule 72 and token OP_LT resolved as reduce (OP_LT < OP_DIV).
    Conflict between rule 72 and token OP_LEQ resolved as reduce (OP_LEQ < OP_DIV).
    Conflict between rule 72 and token OP_GT resolved as reduce (OP_GT < OP_DIV).
    Conflict between rule 72 and token OP_GEQ resolved as reduce (OP_GEQ < OP_DIV).
    Conflict between rule 72 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 72 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 72 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 72 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 72 and token OP_MOD resolved as reduce (%left OP_MOD).


State 88

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   73           | expression OP_MOD expression •  [$end, IDENTIFIER, KW_CONST, KW_FOR, KW_AND, KW_OR, KW_DEF, KW_COMP, KW_DEFMACRO, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    OP_POW  shift, and go to state 46

    $default  reduce using rule 73 (expression)

    Conflict between rule 73 and token KW_AND resolved as reduce (KW_AND < OP_MOD).
    Conflict between rule 73 and token KW_OR resolved as reduce (KW_OR < OP_MOD).
    Conflict between rule 73 and token OP_POW resolved as shift (OP_MOD < OP_POW).
    Conflict between rule 73 and token OP_EQ resolved as reduce (OP_EQ < OP_MOD).
    Conflict between rule 73 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MOD).
    Conflict between rule 73 and token OP_LT resolved as reduce (OP_LT < OP_MOD).
    Conflict between rule 73 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MOD).
    Conflict between rule 73 and token OP_GT resolved as reduce (OP_GT < OP_MOD).
    Conflict between rule 73 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MOD).
    Conflict between rule 73 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 73 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 73 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 73 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 73 and token OP_MOD resolved as reduce (%left OP_MOD).


State 89

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   97 primary_expression: primary_expression LBRACKET expression • RBRACKET

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RBRACKET  shift, and go to state 101


State 90

   98 primary_expression: primary_expression DOT IDENTIFIER •

    $default  reduce using rule 98 (primary_expression)


State 91

   13 var_declaration: IDENTIFIER LBRACKET CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 102


State 92

   14 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression • COLON type SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    COLON     shift, and go to state 103


State 93

   19 param_decl_list: IDENTIFIER • COLON type

    COLON  shift, and go to state 104


State 94

   15 function: KW_DEF IDENTIFIER LPAREN param_list • RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF IDENTIFIER LPAREN param_list • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 105


State 95

   18 param_list: param_decl_list •  [RPAREN]
   20 param_decl_list: param_decl_list • COMMA IDENTIFIER COLON type

    COMMA  shift, and go to state 106

    $default  reduce using rule 18 (param_list)


State 96

   21 main_function: KW_DEF KW_MAIN LPAREN RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 107


State 97

   15 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   56 component: KW_COMP IDENTIFIER COLON component_body • KW_ENDCOMP SEMICOLON
   58 component_body: component_body • component_member
   59 component_member: • hash_ident_list COLON type SEMICOLON
   60                 | • hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   61                 | • function
   62                 | • SEMICOLON
   63                 | • error SEMICOLON
   64 hash_ident_list: • HASH IDENTIFIER
   65                | • hash_ident_list COMMA HASH IDENTIFIER

    error       shift, and go to state 108
    KW_DEF      shift, and go to state 109
    KW_ENDCOMP  shift, and go to state 110
    SEMICOLON   shift, and go to state 111
    HASH        shift, and go to state 112

    function          go to state 113
    component_member  go to state 114
    hash_ident_list   go to state 115


State 98

   12 var_declaration: ident_list COLON type SEMICOLON •

    $default  reduce using rule 12 (var_declaration)


State 99

   88 function_call: IDENTIFIER LPAREN arg_list RPAREN •

    $default  reduce using rule 88 (function_call)


State 100

   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   91 arg_list: arg_list COMMA • expression
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 116
    function_call       go to state 30
    primary_expression  go to state 31


State 101

   97 primary_expression: primary_expression LBRACKET expression RBRACKET •

    $default  reduce using rule 97 (primary_expression)


State 102

   13 var_declaration: IDENTIFIER LBRACKET CONST_INT RBRACKET COLON • type SEMICOLON
   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 117


State 103

   14 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON • type SEMICOLON
   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 118


State 104

   19 param_decl_list: IDENTIFIER COLON • type
   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 119


State 105

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN • OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF IDENTIFIER LPAREN param_list RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON     shift, and go to state 120
    OP_ARROW  shift, and go to state 121


State 106

   20 param_decl_list: param_decl_list COMMA • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 122


State 107

   21 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON • block KW_ENDDEF SEMICOLON
  100 block: ε •
  101      | • block var_declaration
  102      | • block stmt

    $default  reduce using rule 100 (block)

    block  go to state 123


State 108

   63 component_member: error • SEMICOLON

    SEMICOLON  shift, and go to state 124


State 109

   15 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   16         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 34


State 110

   56 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 125


State 111

   62 component_member: SEMICOLON •

    $default  reduce using rule 62 (component_member)


State 112

   64 hash_ident_list: HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 126


State 113

   61 component_member: function •

    $default  reduce using rule 61 (component_member)


State 114

   58 component_body: component_body component_member •

    $default  reduce using rule 58 (component_body)


State 115

   59 component_member: hash_ident_list • COLON type SEMICOLON
   60                 | hash_ident_list • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   65 hash_ident_list: hash_ident_list • COMMA HASH IDENTIFIER

    LBRACKET  shift, and go to state 127
    COLON     shift, and go to state 128
    COMMA     shift, and go to state 129


State 116

   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   91 arg_list: arg_list COMMA expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57

    $default  reduce using rule 91 (arg_list)


State 117

   13 var_declaration: IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 130


State 118

   14 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 131


State 119

   19 param_decl_list: IDENTIFIER COLON type •

    $default  reduce using rule 19 (param_decl_list)


State 120

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON • block KW_ENDDEF SEMICOLON
  100 block: ε •
  101      | • block var_declaration
  102      | • block stmt

    $default  reduce using rule 100 (block)

    block  go to state 132


State 121

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW • type COLON block KW_ENDDEF SEMICOLON
   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 133


State 122

   20 param_decl_list: param_decl_list COMMA IDENTIFIER • COLON type

    COLON  shift, and go to state 134


State 123

   12 var_declaration: • ident_list COLON type SEMICOLON
   13                | • IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   21 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block • KW_ENDDEF SEMICOLON
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   66 ident_list: • IDENTIFIER
   67           | • ident_list COMMA IDENTIFIER
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER
  101 block: block • var_declaration
  102      | block • stmt

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 136
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_FOR        shift, and go to state 138
    KW_WHILE      shift, and go to state 139
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_ENDDEF     shift, and go to state 142
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    var_declaration     go to state 146
    stmt                go to state 147
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    ident_list          go to state 18
    function_call       go to state 156
    primary_expression  go to state 157


State 124

   63 component_member: error SEMICOLON •

    $default  reduce using rule 63 (component_member)


State 125

   56 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON •

    $default  reduce using rule 56 (component)


State 126

   64 hash_ident_list: HASH IDENTIFIER •

    $default  reduce using rule 64 (hash_ident_list)


State 127

   60 component_member: hash_ident_list LBRACKET • CONST_INT RBRACKET COLON type SEMICOLON

    CONST_INT  shift, and go to state 158


State 128

   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER
   59 component_member: hash_ident_list COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 159


State 129

   65 hash_ident_list: hash_ident_list COMMA • HASH IDENTIFIER

    HASH  shift, and go to state 160


State 130

   13 var_declaration: IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 13 (var_declaration)


State 131

   14 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON •

    $default  reduce using rule 14 (const_declaration)


State 132

   12 var_declaration: • ident_list COLON type SEMICOLON
   13                | • IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block • KW_ENDDEF SEMICOLON
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   66 ident_list: • IDENTIFIER
   67           | • ident_list COMMA IDENTIFIER
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER
  101 block: block • var_declaration
  102      | block • stmt

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 136
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_FOR        shift, and go to state 138
    KW_WHILE      shift, and go to state 139
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_ENDDEF     shift, and go to state 161
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    var_declaration     go to state 146
    stmt                go to state 147
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    ident_list          go to state 18
    function_call       go to state 156
    primary_expression  go to state 157


State 133

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 162


State 134

   20 param_decl_list: param_decl_list COMMA IDENTIFIER COLON • type
   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 163


State 135

   39 stmt: error • SEMICOLON

    SEMICOLON  shift, and go to state 164


State 136

   13 var_declaration: IDENTIFIER • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   40 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   41                | IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | IDENTIFIER • OP_DEFINE expression SEMICOLON
   44                | IDENTIFIER • OP_DEFINE expression COLON type SEMICOLON
   45                | IDENTIFIER • OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER • OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   66 ident_list: IDENTIFIER •  [COLON, COMMA]
   88 function_call: IDENTIFIER • LPAREN arg_list RPAREN
   95 primary_expression: IDENTIFIER •  [LBRACKET, DOT]

    OP_ASSIGN  shift, and go to state 165
    OP_DEFINE  shift, and go to state 166
    LPAREN     shift, and go to state 39
    LBRACKET   shift, and go to state 167

    LBRACKET  [reduce using rule 95 (primary_expression)]
    DOT       reduce using rule 95 (primary_expression)
    $default  reduce using rule 66 (ident_list)

    shift/reduce conflict on token LBRACKET:
       95 primary_expression: IDENTIFIER •
       13 var_declaration: IDENTIFIER • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
      First example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON block IDENTIFIER • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON KW_ENDDEF SEMICOLON $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                               $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list main_function
                                                     ↳ 21: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                            KW_ENDDEF SEMICOLON
                                                                                              ↳ 101: block var_declaration
                                                                                                           ↳ 13: IDENTIFIER • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
      Second example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON block IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON KW_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                           $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list top_level
                                                     ↳ 8: main_function
                                                          ↳ 21: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                                                   KW_ENDDEF SEMICOLON
                                                                                                   ↳ 102: block stmt
                                                                                                                ↳ 29: assignment_stmt
                                                                                                                      ↳ 42: primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
                                                                                                                            ↳ 95: IDENTIFIER •

    shift/reduce conflict on token LBRACKET:
       95 primary_expression: IDENTIFIER •
       41 assignment_stmt: IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
      Example: IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
      Shift derivation
        assignment_stmt
        ↳ 41: IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
      Reduce derivation
        assignment_stmt
        ↳ 42: primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
              ↳ 95: IDENTIFIER •



State 137

   49 if_stmt: KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    LPAREN  shift, and go to state 168


State 138

   51 for_stmt: KW_FOR • IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 169


State 139

   52 while_stmt: KW_WHILE • LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

    LPAREN  shift, and go to state 170


State 140

   53 break_stmt: KW_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 171


State 141

   54 continue_stmt: KW_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 172


State 142

   21 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 173


State 143

   47 return_stmt: KW_RETURN • expression SEMICOLON
   48            | KW_RETURN • SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    SEMICOLON         shift, and go to state 174
    HASH              shift, and go to state 28

    expression          go to state 175
    function_call       go to state 30
    primary_expression  go to state 31


State 144

   55 empty_stmt: SEMICOLON •

    $default  reduce using rule 55 (empty_stmt)


State 145

   38 stmt: HASH • IDENTIFIER OP_ASSIGN expression SEMICOLON
   99 primary_expression: HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 176


State 146

  101 block: block var_declaration •

    $default  reduce using rule 101 (block)


State 147

  102 block: block stmt •

    $default  reduce using rule 102 (block)


State 148

   29 stmt: assignment_stmt •

    $default  reduce using rule 29 (stmt)


State 149

   30 stmt: return_stmt •

    $default  reduce using rule 30 (stmt)


State 150

   31 stmt: if_stmt •

    $default  reduce using rule 31 (stmt)


State 151

   32 stmt: for_stmt •

    $default  reduce using rule 32 (stmt)


State 152

   33 stmt: while_stmt •

    $default  reduce using rule 33 (stmt)


State 153

   34 stmt: break_stmt •

    $default  reduce using rule 34 (stmt)


State 154

   35 stmt: continue_stmt •

    $default  reduce using rule 35 (stmt)


State 155

   36 stmt: empty_stmt •

    $default  reduce using rule 36 (stmt)


State 156

   37 stmt: function_call • SEMICOLON
   96 primary_expression: function_call •  [LBRACKET, DOT]

    SEMICOLON  shift, and go to state 177

    $default  reduce using rule 96 (primary_expression)


State 157

   42 assignment_stmt: primary_expression • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   97 primary_expression: primary_expression • LBRACKET expression RBRACKET
   98                   | primary_expression • DOT IDENTIFIER

    LBRACKET  shift, and go to state 178
    DOT       shift, and go to state 59


State 158

   60 component_member: hash_ident_list LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 179


State 159

   59 component_member: hash_ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 180


State 160

   65 hash_ident_list: hash_ident_list COMMA HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 181


State 161

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 182


State 162

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON • block KW_ENDDEF SEMICOLON
  100 block: ε •
  101      | • block var_declaration
  102      | • block stmt

    $default  reduce using rule 100 (block)

    block  go to state 183


State 163

   20 param_decl_list: param_decl_list COMMA IDENTIFIER COLON type •

    $default  reduce using rule 20 (param_decl_list)


State 164

   39 stmt: error SEMICOLON •

    $default  reduce using rule 39 (stmt)


State 165

   40 assignment_stmt: IDENTIFIER OP_ASSIGN • expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 184
    function_call       go to state 30
    primary_expression  go to state 31


State 166

   43 assignment_stmt: IDENTIFIER OP_DEFINE • expression SEMICOLON
   44                | IDENTIFIER OP_DEFINE • expression COLON type SEMICOLON
   45                | IDENTIFIER OP_DEFINE • LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE • LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    LBRACKET          shift, and go to state 185
    HASH              shift, and go to state 28

    expression          go to state 186
    function_call       go to state 30
    primary_expression  go to state 31


State 167

   13 var_declaration: IDENTIFIER LBRACKET • CONST_INT RBRACKET COLON type SEMICOLON
   41 assignment_stmt: IDENTIFIER LBRACKET • expression RBRACKET OP_ASSIGN expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 187
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 188
    function_call       go to state 30
    primary_expression  go to state 31


State 168

   49 if_stmt: KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 189
    function_call       go to state 30
    primary_expression  go to state 31


State 169

   51 for_stmt: KW_FOR IDENTIFIER • KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 190


State 170

   52 while_stmt: KW_WHILE LPAREN • expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 191
    function_call       go to state 30
    primary_expression  go to state 31


State 171

   53 break_stmt: KW_BREAK SEMICOLON •

    $default  reduce using rule 53 (break_stmt)


State 172

   54 continue_stmt: KW_CONTINUE SEMICOLON •

    $default  reduce using rule 54 (continue_stmt)


State 173

   21 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 21 (main_function)


State 174

   48 return_stmt: KW_RETURN SEMICOLON •

    $default  reduce using rule 48 (return_stmt)


State 175

   47 return_stmt: KW_RETURN expression • SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND     shift, and go to state 44
    KW_OR      shift, and go to state 45
    OP_POW     shift, and go to state 46
    OP_EQ      shift, and go to state 47
    OP_NEQ     shift, and go to state 48
    OP_LT      shift, and go to state 49
    OP_LEQ     shift, and go to state 50
    OP_GT      shift, and go to state 51
    OP_GEQ     shift, and go to state 52
    OP_PLUS    shift, and go to state 53
    OP_MINUS   shift, and go to state 54
    OP_MULT    shift, and go to state 55
    OP_DIV     shift, and go to state 56
    OP_MOD     shift, and go to state 57
    SEMICOLON  shift, and go to state 192


State 176

   38 stmt: HASH IDENTIFIER • OP_ASSIGN expression SEMICOLON
   99 primary_expression: HASH IDENTIFIER •  [LBRACKET, DOT]

    OP_ASSIGN  shift, and go to state 193

    $default  reduce using rule 99 (primary_expression)


State 177

   37 stmt: function_call SEMICOLON •

    $default  reduce using rule 37 (stmt)


State 178

   42 assignment_stmt: primary_expression LBRACKET • expression RBRACKET OP_ASSIGN expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   97                   | primary_expression LBRACKET • expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 194
    function_call       go to state 30
    primary_expression  go to state 31


State 179

   60 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 195


State 180

   59 component_member: hash_ident_list COLON type SEMICOLON •

    $default  reduce using rule 59 (component_member)


State 181

   65 hash_ident_list: hash_ident_list COMMA HASH IDENTIFIER •

    $default  reduce using rule 65 (hash_ident_list)


State 182

   16 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 16 (function)


State 183

   12 var_declaration: • ident_list COLON type SEMICOLON
   13                | • IDENTIFIER LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block • KW_ENDDEF SEMICOLON
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   66 ident_list: • IDENTIFIER
   67           | • ident_list COMMA IDENTIFIER
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER
  101 block: block • var_declaration
  102      | block • stmt

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 136
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_FOR        shift, and go to state 138
    KW_WHILE      shift, and go to state 139
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_ENDDEF     shift, and go to state 196
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    var_declaration     go to state 146
    stmt                go to state 147
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    ident_list          go to state 18
    function_call       go to state 156
    primary_expression  go to state 157


State 184

   40 assignment_stmt: IDENTIFIER OP_ASSIGN expression • SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND     shift, and go to state 44
    KW_OR      shift, and go to state 45
    OP_POW     shift, and go to state 46
    OP_EQ      shift, and go to state 47
    OP_NEQ     shift, and go to state 48
    OP_LT      shift, and go to state 49
    OP_LEQ     shift, and go to state 50
    OP_GT      shift, and go to state 51
    OP_GEQ     shift, and go to state 52
    OP_PLUS    shift, and go to state 53
    OP_MINUS   shift, and go to state 54
    OP_MULT    shift, and go to state 55
    OP_DIV     shift, and go to state 56
    OP_MOD     shift, and go to state 57
    SEMICOLON  shift, and go to state 197


State 185

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET • expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE LBRACKET • expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 198
    function_call       go to state 30
    primary_expression  go to state 31


State 186

   43 assignment_stmt: IDENTIFIER OP_DEFINE expression • SEMICOLON
   44                | IDENTIFIER OP_DEFINE expression • COLON type SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND     shift, and go to state 44
    KW_OR      shift, and go to state 45
    OP_POW     shift, and go to state 46
    OP_EQ      shift, and go to state 47
    OP_NEQ     shift, and go to state 48
    OP_LT      shift, and go to state 49
    OP_LEQ     shift, and go to state 50
    OP_GT      shift, and go to state 51
    OP_GEQ     shift, and go to state 52
    OP_PLUS    shift, and go to state 53
    OP_MINUS   shift, and go to state 54
    OP_MULT    shift, and go to state 55
    OP_DIV     shift, and go to state 56
    OP_MOD     shift, and go to state 57
    COLON      shift, and go to state 199
    SEMICOLON  shift, and go to state 200


State 187

   13 var_declaration: IDENTIFIER LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON
   92 primary_expression: CONST_INT •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, LBRACKET, RBRACKET, DOT]

    RBRACKET  shift, and go to state 91

    RBRACKET  [reduce using rule 92 (primary_expression)]
    $default  reduce using rule 92 (primary_expression)

    shift/reduce conflict on token RBRACKET:
       92 primary_expression: CONST_INT •
       13 var_declaration: IDENTIFIER LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON
      First example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON block IDENTIFIER LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON KW_ENDDEF SEMICOLON $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                               $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list main_function
                                                     ↳ 21: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                            KW_ENDDEF SEMICOLON
                                                                                              ↳ 101: block var_declaration
                                                                                                           ↳ 13: IDENTIFIER LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON
      Second example: macro_def_list top_level_list KW_DEF KW_MAIN LPAREN RPAREN COLON block IDENTIFIER LBRACKET CONST_INT • RBRACKET OP_ASSIGN expression SEMICOLON KW_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                 $end
             ↳ 1: macro_def_list top_level_list
                                 ↳ 6: top_level_list top_level
                                                     ↳ 8: main_function
                                                          ↳ 21: KW_DEF KW_MAIN LPAREN RPAREN COLON block                                                                                                         KW_ENDDEF SEMICOLON
                                                                                                   ↳ 102: block stmt
                                                                                                                ↳ 29: assignment_stmt
                                                                                                                      ↳ 41: IDENTIFIER LBRACKET expression               RBRACKET OP_ASSIGN expression SEMICOLON
                                                                                                                                                ↳ 68: primary_expression
                                                                                                                                                      ↳ 92: CONST_INT •



State 188

   41 assignment_stmt: IDENTIFIER LBRACKET expression • RBRACKET OP_ASSIGN expression SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RBRACKET  shift, and go to state 201


State 189

   49 if_stmt: KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RPAREN    shift, and go to state 202


State 190

   51 for_stmt: KW_FOR IDENTIFIER KW_IN • LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 203


State 191

   52 while_stmt: KW_WHILE LPAREN expression • RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RPAREN    shift, and go to state 204


State 192

   47 return_stmt: KW_RETURN expression SEMICOLON •

    $default  reduce using rule 47 (return_stmt)


State 193

   38 stmt: HASH IDENTIFIER OP_ASSIGN • expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 205
    function_call       go to state 30
    primary_expression  go to state 31


State 194

   42 assignment_stmt: primary_expression LBRACKET expression • RBRACKET OP_ASSIGN expression SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression
   97 primary_expression: primary_expression LBRACKET expression • RBRACKET

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RBRACKET  shift, and go to state 206


State 195

   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER
   60 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 207


State 196

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 208


State 197

   40 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 40 (assignment_stmt)


State 198

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression • KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE LBRACKET expression • KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_FOR    shift, and go to state 209
    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57


State 199

   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER
   44 assignment_stmt: IDENTIFIER OP_DEFINE expression COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 210


State 200

   43 assignment_stmt: IDENTIFIER OP_DEFINE expression SEMICOLON •

    $default  reduce using rule 43 (assignment_stmt)


State 201

   41 assignment_stmt: IDENTIFIER LBRACKET expression RBRACKET • OP_ASSIGN expression SEMICOLON

    OP_ASSIGN  shift, and go to state 211


State 202

   49 if_stmt: KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 212


State 203

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET • expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 213
    function_call       go to state 30
    primary_expression  go to state 31


State 204

   52 while_stmt: KW_WHILE LPAREN expression RPAREN • COLON stmt_list KW_ENDWHILE SEMICOLON

    COLON  shift, and go to state 214


State 205

   38 stmt: HASH IDENTIFIER OP_ASSIGN expression • SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND     shift, and go to state 44
    KW_OR      shift, and go to state 45
    OP_POW     shift, and go to state 46
    OP_EQ      shift, and go to state 47
    OP_NEQ     shift, and go to state 48
    OP_LT      shift, and go to state 49
    OP_LEQ     shift, and go to state 50
    OP_GT      shift, and go to state 51
    OP_GEQ     shift, and go to state 52
    OP_PLUS    shift, and go to state 53
    OP_MINUS   shift, and go to state 54
    OP_MULT    shift, and go to state 55
    OP_DIV     shift, and go to state 56
    OP_MOD     shift, and go to state 57
    SEMICOLON  shift, and go to state 215


State 206

   42 assignment_stmt: primary_expression LBRACKET expression RBRACKET • OP_ASSIGN expression SEMICOLON
   97 primary_expression: primary_expression LBRACKET expression RBRACKET •  [LBRACKET, DOT]

    OP_ASSIGN  shift, and go to state 216

    $default  reduce using rule 97 (primary_expression)


State 207

   60 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 217


State 208

   15 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 15 (function)


State 209

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR • IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR • IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 218


State 210

   44 assignment_stmt: IDENTIFIER OP_DEFINE expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 219


State 211

   41 assignment_stmt: IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN • expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 220
    function_call       go to state 30
    primary_expression  go to state 31


State 212

   22 stmt_list: ε •
   23          | • stmt_list stmt
   49 if_stmt: KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 221


State 213

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression • COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    COLON     shift, and go to state 222


State 214

   22 stmt_list: ε •
   23          | • stmt_list stmt
   52 while_stmt: KW_WHILE LPAREN expression RPAREN COLON • stmt_list KW_ENDWHILE SEMICOLON

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 223


State 215

   38 stmt: HASH IDENTIFIER OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 38 (stmt)


State 216

   42 assignment_stmt: primary_expression LBRACKET expression RBRACKET OP_ASSIGN • expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 224
    function_call       go to state 30
    primary_expression  go to state 31


State 217

   60 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 60 (component_member)


State 218

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER • COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER • COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON

    COLON  shift, and go to state 225


State 219

   44 assignment_stmt: IDENTIFIER OP_DEFINE expression COLON type SEMICOLON •

    $default  reduce using rule 44 (assignment_stmt)


State 220

   41 assignment_stmt: IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression • SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND     shift, and go to state 44
    KW_OR      shift, and go to state 45
    OP_POW     shift, and go to state 46
    OP_EQ      shift, and go to state 47
    OP_NEQ     shift, and go to state 48
    OP_LT      shift, and go to state 49
    OP_LEQ     shift, and go to state 50
    OP_GT      shift, and go to state 51
    OP_GEQ     shift, and go to state 52
    OP_PLUS    shift, and go to state 53
    OP_MINUS   shift, and go to state 54
    OP_MULT    shift, and go to state 55
    OP_DIV     shift, and go to state 56
    OP_MOD     shift, and go to state 57
    SEMICOLON  shift, and go to state 226


State 221

   23 stmt_list: stmt_list • stmt
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   49        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 227
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_ELSE       shift, and go to state 228
    KW_ENDIF      shift, and go to state 229
    KW_FOR        shift, and go to state 138
    KW_WHILE      shift, and go to state 139
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    stmt                go to state 230
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    function_call       go to state 156
    primary_expression  go to state 157


State 222

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON • expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 231
    function_call       go to state 30
    primary_expression  go to state 31


State 223

   23 stmt_list: stmt_list • stmt
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   52           | KW_WHILE LPAREN expression RPAREN COLON stmt_list • KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 227
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_FOR        shift, and go to state 138
    KW_WHILE      shift, and go to state 139
    KW_ENDWHILE   shift, and go to state 232
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    stmt                go to state 230
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    function_call       go to state 156
    primary_expression  go to state 157


State 224

   42 assignment_stmt: primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression • SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND     shift, and go to state 44
    KW_OR      shift, and go to state 45
    OP_POW     shift, and go to state 46
    OP_EQ      shift, and go to state 47
    OP_NEQ     shift, and go to state 48
    OP_LT      shift, and go to state 49
    OP_LEQ     shift, and go to state 50
    OP_GT      shift, and go to state 51
    OP_GEQ     shift, and go to state 52
    OP_PLUS    shift, and go to state 53
    OP_MINUS   shift, and go to state 54
    OP_MULT    shift, and go to state 55
    OP_DIV     shift, and go to state 56
    OP_MOD     shift, and go to state 57
    SEMICOLON  shift, and go to state 233


State 225

   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER
   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON • CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON • type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    CONST_INT   shift, and go to state 234
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 235


State 226

   41 assignment_stmt: IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 41 (assignment_stmt)


State 227

   40 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   41                | IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | IDENTIFIER • OP_DEFINE expression SEMICOLON
   44                | IDENTIFIER • OP_DEFINE expression COLON type SEMICOLON
   45                | IDENTIFIER • OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | IDENTIFIER • OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   88 function_call: IDENTIFIER • LPAREN arg_list RPAREN
   95 primary_expression: IDENTIFIER •  [LBRACKET, DOT]

    OP_ASSIGN  shift, and go to state 165
    OP_DEFINE  shift, and go to state 166
    LPAREN     shift, and go to state 39
    LBRACKET   shift, and go to state 236

    LBRACKET  [reduce using rule 95 (primary_expression)]
    $default  reduce using rule 95 (primary_expression)

    shift/reduce conflict on token LBRACKET:
       95 primary_expression: IDENTIFIER •
       41 assignment_stmt: IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
      Example: IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
      Shift derivation
        assignment_stmt
        ↳ 41: IDENTIFIER • LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
      Reduce derivation
        assignment_stmt
        ↳ 42: primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
              ↳ 95: IDENTIFIER •



State 228

   50 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE • COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 237


State 229

   49 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 238


State 230

   23 stmt_list: stmt_list stmt •

    $default  reduce using rule 23 (stmt_list)


State 231

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression • RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   69 expression: expression • OP_PLUS expression
   70           | expression • OP_MINUS expression
   71           | expression • OP_MULT expression
   72           | expression • OP_DIV expression
   73           | expression • OP_MOD expression
   74           | expression • OP_POW expression
   75           | expression • OP_EQ expression
   76           | expression • OP_NEQ expression
   77           | expression • OP_LT expression
   78           | expression • OP_LEQ expression
   79           | expression • OP_GT expression
   80           | expression • OP_GEQ expression
   81           | expression • KW_AND expression
   82           | expression • KW_OR expression

    KW_AND    shift, and go to state 44
    KW_OR     shift, and go to state 45
    OP_POW    shift, and go to state 46
    OP_EQ     shift, and go to state 47
    OP_NEQ    shift, and go to state 48
    OP_LT     shift, and go to state 49
    OP_LEQ    shift, and go to state 50
    OP_GT     shift, and go to state 51
    OP_GEQ    shift, and go to state 52
    OP_PLUS   shift, and go to state 53
    OP_MINUS  shift, and go to state 54
    OP_MULT   shift, and go to state 55
    OP_DIV    shift, and go to state 56
    OP_MOD    shift, and go to state 57
    RBRACKET  shift, and go to state 239


State 232

   52 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 240


State 233

   42 assignment_stmt: primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 42 (assignment_stmt)


State 234

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 241


State 235

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type • KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON

    KW_IN  shift, and go to state 242


State 236

   41 assignment_stmt: IDENTIFIER LBRACKET • expression RBRACKET OP_ASSIGN expression SEMICOLON
   68 expression: • primary_expression
   69           | • expression OP_PLUS expression
   70           | • expression OP_MINUS expression
   71           | • expression OP_MULT expression
   72           | • expression OP_DIV expression
   73           | • expression OP_MOD expression
   74           | • expression OP_POW expression
   75           | • expression OP_EQ expression
   76           | • expression OP_NEQ expression
   77           | • expression OP_LT expression
   78           | • expression OP_LEQ expression
   79           | • expression OP_GT expression
   80           | • expression OP_GEQ expression
   81           | • expression KW_AND expression
   82           | • expression KW_OR expression
   83           | • KW_NOT expression
   84           | • OP_MINUS expression
   85           | • LPAREN expression RPAREN
   86           | • CONST_BOOL_FALSE
   87           | • CONST_BOOL_TRUE
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    IDENTIFIER        shift, and go to state 19
    CONST_INT         shift, and go to state 20
    CONST_FLOAT       shift, and go to state 21
    CONST_STRING      shift, and go to state 22
    CONST_BOOL_TRUE   shift, and go to state 23
    CONST_BOOL_FALSE  shift, and go to state 24
    KW_NOT            shift, and go to state 25
    OP_MINUS          shift, and go to state 26
    LPAREN            shift, and go to state 27
    HASH              shift, and go to state 28

    expression          go to state 188
    function_call       go to state 30
    primary_expression  go to state 31


State 237

   22 stmt_list: ε •
   23          | • stmt_list stmt
   50 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON • stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 243


State 238

   49 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 49 (if_stmt)


State 239

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET • COLON stmt_list KW_ENDFOR SEMICOLON

    COLON  shift, and go to state 244


State 240

   52 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON •

    $default  reduce using rule 52 (while_stmt)


State 241

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 245


State 242

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN • IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 246


State 243

   23 stmt_list: stmt_list • stmt
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   50        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list • KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 227
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_ENDIF      shift, and go to state 247
    KW_FOR        shift, and go to state 138
    KW_WHILE      shift, and go to state 139
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    stmt                go to state 230
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    function_call       go to state 156
    primary_expression  go to state 157


State 244

   22 stmt_list: ε •
   23          | • stmt_list stmt
   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON • stmt_list KW_ENDFOR SEMICOLON

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 248


State 245

   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER
   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 249


State 246

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER • KW_OF CONST_INT RBRACKET COLON type SEMICOLON

    KW_OF  shift, and go to state 250


State 247

   50 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 251


State 248

   23 stmt_list: stmt_list • stmt
   29 stmt: • assignment_stmt
   30     | • return_stmt
   31     | • if_stmt
   32     | • for_stmt
   33     | • while_stmt
   34     | • break_stmt
   35     | • continue_stmt
   36     | • empty_stmt
   37     | • function_call SEMICOLON
   38     | • HASH IDENTIFIER OP_ASSIGN expression SEMICOLON
   39     | • error SEMICOLON
   40 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   41                | • IDENTIFIER LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   42                | • primary_expression LBRACKET expression RBRACKET OP_ASSIGN expression SEMICOLON
   43                | • IDENTIFIER OP_DEFINE expression SEMICOLON
   44                | • IDENTIFIER OP_DEFINE expression COLON type SEMICOLON
   45                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON
   46                | • IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON
   47 return_stmt: • KW_RETURN expression SEMICOLON
   48            | • KW_RETURN SEMICOLON
   49 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   50        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   51 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   51         | KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list • KW_ENDFOR SEMICOLON
   52 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   53 break_stmt: • KW_BREAK SEMICOLON
   54 continue_stmt: • KW_CONTINUE SEMICOLON
   55 empty_stmt: • SEMICOLON
   88 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   92 primary_expression: • CONST_INT
   93                   | • CONST_FLOAT
   94                   | • CONST_STRING
   95                   | • IDENTIFIER
   96                   | • function_call
   97                   | • primary_expression LBRACKET expression RBRACKET
   98                   | • primary_expression DOT IDENTIFIER
   99                   | • HASH IDENTIFIER

    error         shift, and go to state 135
    IDENTIFIER    shift, and go to state 227
    CONST_INT     shift, and go to state 20
    CONST_FLOAT   shift, and go to state 21
    CONST_STRING  shift, and go to state 22
    KW_IF         shift, and go to state 137
    KW_FOR        shift, and go to state 138
    KW_ENDFOR     shift, and go to state 252
    KW_WHILE      shift, and go to state 139
    KW_BREAK      shift, and go to state 140
    KW_CONTINUE   shift, and go to state 141
    KW_RETURN     shift, and go to state 143
    SEMICOLON     shift, and go to state 144
    HASH          shift, and go to state 145

    stmt                go to state 230
    assignment_stmt     go to state 148
    return_stmt         go to state 149
    if_stmt             go to state 150
    for_stmt            go to state 151
    while_stmt          go to state 152
    break_stmt          go to state 153
    continue_stmt       go to state 154
    empty_stmt          go to state 155
    function_call       go to state 156
    primary_expression  go to state 157


State 249

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 253


State 250

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF • CONST_INT RBRACKET COLON type SEMICOLON

    CONST_INT  shift, and go to state 254


State 251

   50 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 50 (if_stmt)


State 252

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 255


State 253

   45 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 45 (assignment_stmt)


State 254

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 256


State 255

   51 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON •

    $default  reduce using rule 51 (for_stmt)


State 256

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 257


State 257

   24 type: • KW_INTEGER
   25     | • KW_SCALAR
   26     | • KW_STR
   27     | • KW_BOOL
   28     | • IDENTIFIER
   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 65
    KW_INTEGER  shift, and go to state 66
    KW_SCALAR   shift, and go to state 67
    KW_STR      shift, and go to state 68
    KW_BOOL     shift, and go to state 69

    type  go to state 258


State 258

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 259


State 259

   46 assignment_stmt: IDENTIFIER OP_DEFINE LBRACKET expression KW_FOR IDENTIFIER COLON type KW_IN IDENTIFIER KW_OF CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 46 (assignment_stmt)
