Nonterminals useless in grammar

    ident_list
    decl_list


Terminals unused in grammar

    KW_OF
    OP_PLUSEQ
    OP_MINUSEQ
    OP_MULTEQ
    OP_DIVEQ
    OP_MODEQ
    OP_DEFINE
    HASH
    DECL_IDENT
    DECLARATION
    STMT
    NO_COMPARE


Rules useless in grammar

   90 ident_list: IDENTIFIER
   91           | ident_list COMMA IDENTIFIER

   92 decl_list: ε
   93          | decl_list var_declaration
   94          | decl_list error SEMICOLON


Grammar

    0 $accept: program $end

    1 program: macro_def_list top_level_list

    2 macro_def_list: ε
    3               | macro_def_list macro_def

    4 macro_def: KW_DEFMACRO IDENTIFIER expression SEMICOLON

    5 top_level_list: ε
    6               | top_level_list top_level

    7 top_level: function
    8          | main_function
    9          | component
   10          | const_declaration

   11 var_declaration: IDENTIFIER COLON type SEMICOLON

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

   15 param_list: ε
   16           | param_decl_list

   17 param_decl_list: IDENTIFIER COLON type
   18                | param_decl_list COMMA IDENTIFIER COLON type

   19 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

   20 stmt_list: ε
   21          | stmt_list stmt

   22 type: KW_INTEGER
   23     | KW_SCALAR
   24     | KW_STR
   25     | KW_BOOL
   26     | IDENTIFIER

   27 stmt: assignment_stmt
   28     | return_stmt
   29     | if_stmt
   30     | for_stmt
   31     | while_stmt
   32     | break_stmt
   33     | continue_stmt
   34     | empty_stmt
   35     | function_call SEMICOLON
   36     | error SEMICOLON

   37 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON

   38 return_stmt: KW_RETURN expression SEMICOLON

   39 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

   42 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

   43 break_stmt: KW_BREAK SEMICOLON

   44 continue_stmt: KW_CONTINUE SEMICOLON

   45 empty_stmt: SEMICOLON

   46 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

   47 component_body: ε
   48               | component_body component_member

   49 component_member: hash_ident_list COLON type SEMICOLON
   50                 | hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   51                 | function
   52                 | SEMICOLON
   53                 | error SEMICOLON

   54 hash_ident_list: IDENTIFIER
   55                | hash_ident_list COMMA IDENTIFIER

   56 expression: primary_expression
   57           | expression OP_PLUS expression
   58           | expression OP_MINUS expression
   59           | expression OP_MULT expression
   60           | expression OP_DIV expression
   61           | expression OP_MOD expression
   62           | expression OP_POW expression
   63           | expression OP_EQ expression
   64           | expression OP_NEQ expression
   65           | expression OP_LT expression
   66           | expression OP_LEQ expression
   67           | expression OP_GT expression
   68           | expression OP_GEQ expression
   69           | expression KW_AND expression
   70           | expression KW_OR expression
   71           | KW_NOT expression
   72           | OP_MINUS expression
   73           | LPAREN expression RPAREN
   74           | CONST_BOOL_FALSE
   75           | CONST_BOOL_TRUE

   76 function_call: IDENTIFIER LPAREN arg_list RPAREN

   77 arg_list: ε
   78         | expression
   79         | arg_list COMMA expression

   80 primary_expression: CONST_INT
   81                   | CONST_FLOAT
   82                   | CONST_STRING
   83                   | IDENTIFIER
   84                   | function_call
   85                   | primary_expression LBRACKET expression RBRACKET
   86                   | primary_expression DOT IDENTIFIER

   87 block: ε
   88      | block var_declaration
   89      | block stmt


Terminals, with rules where they appear

    $end (0) 0
    error (256) 36 53
    IDENTIFIER <string> (258) 4 11 12 13 14 17 18 26 37 41 46 54 55 76 83 86
    CONST_INT <string> (259) 50 80
    CONST_FLOAT <string> (260) 81
    CONST_STRING <string> (261) 82
    CONST_BOOL_TRUE (262) 75
    CONST_BOOL_FALSE (263) 74
    KW_INTEGER (264) 22
    KW_SCALAR (265) 23
    KW_STR (266) 24
    KW_BOOL (267) 25
    KW_CONST (268) 12
    KW_IF (269) 39 40
    KW_ELSE (270) 40
    KW_ENDIF (271) 39 40
    KW_FOR (272) 41
    KW_IN (273) 41
    KW_ENDFOR (274) 41
    KW_WHILE (275) 42
    KW_ENDWHILE (276) 42
    KW_BREAK (277) 43
    KW_CONTINUE (278) 44
    KW_NOT (279) 71
    KW_AND (280) 69
    KW_OR (281) 70
    KW_DEF (282) 13 14 19
    KW_ENDDEF (283) 13 14 19
    KW_MAIN (284) 19
    KW_RETURN (285) 38
    KW_COMP (286) 46
    KW_ENDCOMP (287) 46
    KW_OF (288)
    KW_DEFMACRO (289) 4
    OP_ASSIGN (290) 12 37
    OP_PLUSEQ (291)
    OP_MINUSEQ (292)
    OP_MULTEQ (293)
    OP_DIVEQ (294)
    OP_MODEQ (295)
    OP_DEFINE (296)
    OP_POW (297) 62
    OP_EQ (298) 63
    OP_NEQ (299) 64
    OP_LT (300) 65
    OP_LEQ (301) 66
    OP_GT (302) 67
    OP_GEQ (303) 68
    OP_PLUS (304) 57
    OP_MINUS (305) 58 72
    OP_MULT (306) 59
    OP_DIV (307) 60
    OP_MOD (308) 61
    LPAREN (309) 13 14 19 39 40 42 73 76
    RPAREN (310) 13 14 19 39 40 42 73 76
    LBRACKET (311) 41 50 85
    RBRACKET (312) 41 50 85
    COLON (313) 11 12 13 14 17 18 19 39 40 41 42 46 49 50
    SEMICOLON (314) 4 11 12 13 14 19 35 36 37 38 39 40 41 42 43 44 45 46 49 50 52 53
    COMMA (315) 18 55 79
    DOT (316) 86
    OP_ARROW (317) 13
    HASH (318)
    DECL_IDENT <string> (319)
    UMINUS (320)
    DECLARATION (321)
    STMT (322)
    NO_COMPARE (323)


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    program <string> (70)
        on left: 1
        on right: 0
    macro_def_list <string> (71)
        on left: 2 3
        on right: 1 3
    macro_def <string> (72)
        on left: 4
        on right: 3
    top_level_list <string> (73)
        on left: 5 6
        on right: 1 6
    top_level <string> (74)
        on left: 7 8 9 10
        on right: 6
    var_declaration <string> (75)
        on left: 11
        on right: 88
    const_declaration <string> (76)
        on left: 12
        on right: 10
    function <string> (77)
        on left: 13 14
        on right: 7 51
    param_list <string> (78)
        on left: 15 16
        on right: 13 14
    param_decl_list <string> (79)
        on left: 17 18
        on right: 16 18
    main_function <string> (80)
        on left: 19
        on right: 8
    stmt_list <string> (81)
        on left: 20 21
        on right: 21 39 40 41 42
    type <string> (82)
        on left: 22 23 24 25 26
        on right: 11 12 13 17 18 49 50
    stmt <string> (83)
        on left: 27 28 29 30 31 32 33 34 35 36
        on right: 21 89
    assignment_stmt <string> (84)
        on left: 37
        on right: 27
    return_stmt <string> (85)
        on left: 38
        on right: 28
    if_stmt <string> (86)
        on left: 39 40
        on right: 29
    for_stmt <string> (87)
        on left: 41
        on right: 30
    while_stmt <string> (88)
        on left: 42
        on right: 31
    break_stmt <string> (89)
        on left: 43
        on right: 32
    continue_stmt <string> (90)
        on left: 44
        on right: 33
    empty_stmt <string> (91)
        on left: 45
        on right: 34
    component <string> (92)
        on left: 46
        on right: 9
    component_body <string> (93)
        on left: 47 48
        on right: 46 48
    component_member <string> (94)
        on left: 49 50 51 52 53
        on right: 48
    hash_ident_list <string> (95)
        on left: 54 55
        on right: 49 50 55
    expression <string> (96)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
        on right: 4 12 37 38 39 40 41 42 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 78 79 85
    function_call <string> (97)
        on left: 76
        on right: 35 84
    arg_list <string> (98)
        on left: 77 78 79
        on right: 76 79
    primary_expression <string> (99)
        on left: 80 81 82 83 84 85 86
        on right: 56 85 86
    block <string> (100)
        on left: 87 88 89
        on right: 13 14 19 88 89


State 0

    0 $accept: • program $end
    1 program: • macro_def_list top_level_list
    2 macro_def_list: ε •
    3               | • macro_def_list macro_def

    $default  reduce using rule 2 (macro_def_list)

    program         go to state 1
    macro_def_list  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: macro_def_list • top_level_list
    3 macro_def_list: macro_def_list • macro_def
    4 macro_def: • KW_DEFMACRO IDENTIFIER expression SEMICOLON
    5 top_level_list: ε •  [$end, KW_CONST, KW_DEF, KW_COMP]
    6               | • top_level_list top_level

    KW_DEFMACRO  shift, and go to state 4

    $default  reduce using rule 5 (top_level_list)

    macro_def       go to state 5
    top_level_list  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 macro_def: KW_DEFMACRO • IDENTIFIER expression SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    3 macro_def_list: macro_def_list macro_def •

    $default  reduce using rule 3 (macro_def_list)


State 6

    1 program: macro_def_list top_level_list •  [$end]
    6 top_level_list: top_level_list • top_level
    7 top_level: • function
    8          | • main_function
    9          | • component
   10          | • const_declaration
   12 const_declaration: • KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON
   13 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   19 main_function: • KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON
   46 component: • KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

    KW_CONST  shift, and go to state 8
    KW_DEF    shift, and go to state 9
    KW_COMP   shift, and go to state 10

    $default  reduce using rule 1 (program)

    top_level          go to state 11
    const_declaration  go to state 12
    function           go to state 13
    main_function      go to state 14
    component          go to state 15


State 7

    4 macro_def: KW_DEFMACRO IDENTIFIER • expression SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 25
    function_call       go to state 26
    primary_expression  go to state 27


State 8

   12 const_declaration: KW_CONST • IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 28


State 9

   13 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   19 main_function: KW_DEF • KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 29
    KW_MAIN     shift, and go to state 30


State 10

   46 component: KW_COMP • IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 31


State 11

    6 top_level_list: top_level_list top_level •

    $default  reduce using rule 6 (top_level_list)


State 12

   10 top_level: const_declaration •

    $default  reduce using rule 10 (top_level)


State 13

    7 top_level: function •

    $default  reduce using rule 7 (top_level)


State 14

    8 top_level: main_function •

    $default  reduce using rule 8 (top_level)


State 15

    9 top_level: component •

    $default  reduce using rule 9 (top_level)


State 16

   76 function_call: IDENTIFIER • LPAREN arg_list RPAREN
   83 primary_expression: IDENTIFIER •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, LBRACKET, RBRACKET, COLON, SEMICOLON, COMMA, DOT]

    LPAREN  shift, and go to state 32

    $default  reduce using rule 83 (primary_expression)


State 17

   80 primary_expression: CONST_INT •

    $default  reduce using rule 80 (primary_expression)


State 18

   81 primary_expression: CONST_FLOAT •

    $default  reduce using rule 81 (primary_expression)


State 19

   82 primary_expression: CONST_STRING •

    $default  reduce using rule 82 (primary_expression)


State 20

   75 expression: CONST_BOOL_TRUE •

    $default  reduce using rule 75 (expression)


State 21

   74 expression: CONST_BOOL_FALSE •

    $default  reduce using rule 74 (expression)


State 22

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   71           | KW_NOT • expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 33
    function_call       go to state 26
    primary_expression  go to state 27


State 23

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   72           | OP_MINUS • expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 34
    function_call       go to state 26
    primary_expression  go to state 27


State 24

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   73           | LPAREN • expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 35
    function_call       go to state 26
    primary_expression  go to state 27


State 25

    4 macro_def: KW_DEFMACRO IDENTIFIER expression • SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND     shift, and go to state 36
    KW_OR      shift, and go to state 37
    OP_POW     shift, and go to state 38
    OP_EQ      shift, and go to state 39
    OP_NEQ     shift, and go to state 40
    OP_LT      shift, and go to state 41
    OP_LEQ     shift, and go to state 42
    OP_GT      shift, and go to state 43
    OP_GEQ     shift, and go to state 44
    OP_PLUS    shift, and go to state 45
    OP_MINUS   shift, and go to state 46
    OP_MULT    shift, and go to state 47
    OP_DIV     shift, and go to state 48
    OP_MOD     shift, and go to state 49
    SEMICOLON  shift, and go to state 50


State 26

   84 primary_expression: function_call •

    $default  reduce using rule 84 (primary_expression)


State 27

   56 expression: primary_expression •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   85 primary_expression: primary_expression • LBRACKET expression RBRACKET
   86                   | primary_expression • DOT IDENTIFIER

    LBRACKET  shift, and go to state 51
    DOT       shift, and go to state 52

    $default  reduce using rule 56 (expression)


State 28

   12 const_declaration: KW_CONST IDENTIFIER • OP_ASSIGN expression COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 53


State 29

   13 function: KW_DEF IDENTIFIER • LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF IDENTIFIER • LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 54


State 30

   19 main_function: KW_DEF KW_MAIN • LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON

    LPAREN  shift, and go to state 55


State 31

   46 component: KW_COMP IDENTIFIER • COLON component_body KW_ENDCOMP SEMICOLON

    COLON  shift, and go to state 56


State 32

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   76              | IDENTIFIER LPAREN • arg_list RPAREN
   77 arg_list: ε •  [RPAREN, COMMA]
   78         | • expression
   79         | • arg_list COMMA expression
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    $default  reduce using rule 77 (arg_list)

    expression          go to state 57
    function_call       go to state 26
    arg_list            go to state 58
    primary_expression  go to state 27


State 33

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   71           | KW_NOT expression •  [KW_AND, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 71 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 71 and token OP_POW resolved as shift (KW_NOT < OP_POW).
    Conflict between rule 71 and token OP_EQ resolved as shift (KW_NOT < OP_EQ).
    Conflict between rule 71 and token OP_NEQ resolved as shift (KW_NOT < OP_NEQ).
    Conflict between rule 71 and token OP_LT resolved as shift (KW_NOT < OP_LT).
    Conflict between rule 71 and token OP_LEQ resolved as shift (KW_NOT < OP_LEQ).
    Conflict between rule 71 and token OP_GT resolved as shift (KW_NOT < OP_GT).
    Conflict between rule 71 and token OP_GEQ resolved as shift (KW_NOT < OP_GEQ).
    Conflict between rule 71 and token OP_PLUS resolved as shift (KW_NOT < OP_PLUS).
    Conflict between rule 71 and token OP_MINUS resolved as shift (KW_NOT < OP_MINUS).
    Conflict between rule 71 and token OP_MULT resolved as shift (KW_NOT < OP_MULT).
    Conflict between rule 71 and token OP_DIV resolved as shift (KW_NOT < OP_DIV).
    Conflict between rule 71 and token OP_MOD resolved as shift (KW_NOT < OP_MOD).


State 34

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   72           | OP_MINUS expression •  [KW_AND, KW_OR, OP_POW, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token KW_AND resolved as reduce (KW_AND < UMINUS).
    Conflict between rule 72 and token KW_OR resolved as reduce (KW_OR < UMINUS).
    Conflict between rule 72 and token OP_POW resolved as reduce (OP_POW < UMINUS).
    Conflict between rule 72 and token OP_EQ resolved as reduce (OP_EQ < UMINUS).
    Conflict between rule 72 and token OP_NEQ resolved as reduce (OP_NEQ < UMINUS).
    Conflict between rule 72 and token OP_LT resolved as reduce (OP_LT < UMINUS).
    Conflict between rule 72 and token OP_LEQ resolved as reduce (OP_LEQ < UMINUS).
    Conflict between rule 72 and token OP_GT resolved as reduce (OP_GT < UMINUS).
    Conflict between rule 72 and token OP_GEQ resolved as reduce (OP_GEQ < UMINUS).
    Conflict between rule 72 and token OP_PLUS resolved as reduce (OP_PLUS < UMINUS).
    Conflict between rule 72 and token OP_MINUS resolved as reduce (OP_MINUS < UMINUS).
    Conflict between rule 72 and token OP_MULT resolved as reduce (OP_MULT < UMINUS).
    Conflict between rule 72 and token OP_DIV resolved as reduce (OP_DIV < UMINUS).
    Conflict between rule 72 and token OP_MOD resolved as reduce (OP_MOD < UMINUS).


State 35

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   73           | LPAREN expression • RPAREN

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    RPAREN    shift, and go to state 59


State 36

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   69           | expression KW_AND • expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 60
    function_call       go to state 26
    primary_expression  go to state 27


State 37

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   70           | expression KW_OR • expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 61
    function_call       go to state 26
    primary_expression  go to state 27


State 38

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   62           | expression OP_POW • expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 62
    function_call       go to state 26
    primary_expression  go to state 27


State 39

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   63           | expression OP_EQ • expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 63
    function_call       go to state 26
    primary_expression  go to state 27


State 40

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   64           | expression OP_NEQ • expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 64
    function_call       go to state 26
    primary_expression  go to state 27


State 41

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   65           | expression OP_LT • expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 65
    function_call       go to state 26
    primary_expression  go to state 27


State 42

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   66           | expression OP_LEQ • expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 66
    function_call       go to state 26
    primary_expression  go to state 27


State 43

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   67           | expression OP_GT • expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 67
    function_call       go to state 26
    primary_expression  go to state 27


State 44

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   68           | expression OP_GEQ • expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 68
    function_call       go to state 26
    primary_expression  go to state 27


State 45

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   57           | expression OP_PLUS • expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 69
    function_call       go to state 26
    primary_expression  go to state 27


State 46

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   58           | expression OP_MINUS • expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 70
    function_call       go to state 26
    primary_expression  go to state 27


State 47

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   59           | expression OP_MULT • expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 71
    function_call       go to state 26
    primary_expression  go to state 27


State 48

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   60           | expression OP_DIV • expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 72
    function_call       go to state 26
    primary_expression  go to state 27


State 49

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   61           | expression OP_MOD • expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 73
    function_call       go to state 26
    primary_expression  go to state 27


State 50

    4 macro_def: KW_DEFMACRO IDENTIFIER expression SEMICOLON •

    $default  reduce using rule 4 (macro_def)


State 51

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   85                   | primary_expression LBRACKET • expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 74
    function_call       go to state 26
    primary_expression  go to state 27


State 52

   86 primary_expression: primary_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 75


State 53

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN • expression COLON type SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 76
    function_call       go to state 26
    primary_expression  go to state 27


State 54

   13 function: KW_DEF IDENTIFIER LPAREN • param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF IDENTIFIER LPAREN • param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   15 param_list: ε •  [RPAREN]
   16           | • param_decl_list
   17 param_decl_list: • IDENTIFIER COLON type
   18                | • param_decl_list COMMA IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 77

    $default  reduce using rule 15 (param_list)

    param_list       go to state 78
    param_decl_list  go to state 79


State 55

   19 main_function: KW_DEF KW_MAIN LPAREN • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 80


State 56

   46 component: KW_COMP IDENTIFIER COLON • component_body KW_ENDCOMP SEMICOLON
   47 component_body: ε •
   48               | • component_body component_member

    $default  reduce using rule 47 (component_body)

    component_body  go to state 81


State 57

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   78 arg_list: expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 78 (arg_list)


State 58

   76 function_call: IDENTIFIER LPAREN arg_list • RPAREN
   79 arg_list: arg_list • COMMA expression

    RPAREN  shift, and go to state 82
    COMMA   shift, and go to state 83


State 59

   73 expression: LPAREN expression RPAREN •

    $default  reduce using rule 73 (expression)


State 60

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   69           | expression KW_AND expression •  [KW_AND, KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 69 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 69 and token OP_POW resolved as shift (KW_AND < OP_POW).
    Conflict between rule 69 and token OP_EQ resolved as shift (KW_AND < OP_EQ).
    Conflict between rule 69 and token OP_NEQ resolved as shift (KW_AND < OP_NEQ).
    Conflict between rule 69 and token OP_LT resolved as shift (KW_AND < OP_LT).
    Conflict between rule 69 and token OP_LEQ resolved as shift (KW_AND < OP_LEQ).
    Conflict between rule 69 and token OP_GT resolved as shift (KW_AND < OP_GT).
    Conflict between rule 69 and token OP_GEQ resolved as shift (KW_AND < OP_GEQ).
    Conflict between rule 69 and token OP_PLUS resolved as shift (KW_AND < OP_PLUS).
    Conflict between rule 69 and token OP_MINUS resolved as shift (KW_AND < OP_MINUS).
    Conflict between rule 69 and token OP_MULT resolved as shift (KW_AND < OP_MULT).
    Conflict between rule 69 and token OP_DIV resolved as shift (KW_AND < OP_DIV).
    Conflict between rule 69 and token OP_MOD resolved as shift (KW_AND < OP_MOD).


State 61

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   70           | expression KW_OR expression •  [KW_OR, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]

    KW_AND    shift, and go to state 36
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 70 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 70 and token OP_POW resolved as shift (KW_OR < OP_POW).
    Conflict between rule 70 and token OP_EQ resolved as shift (KW_OR < OP_EQ).
    Conflict between rule 70 and token OP_NEQ resolved as shift (KW_OR < OP_NEQ).
    Conflict between rule 70 and token OP_LT resolved as shift (KW_OR < OP_LT).
    Conflict between rule 70 and token OP_LEQ resolved as shift (KW_OR < OP_LEQ).
    Conflict between rule 70 and token OP_GT resolved as shift (KW_OR < OP_GT).
    Conflict between rule 70 and token OP_GEQ resolved as shift (KW_OR < OP_GEQ).
    Conflict between rule 70 and token OP_PLUS resolved as shift (KW_OR < OP_PLUS).
    Conflict between rule 70 and token OP_MINUS resolved as shift (KW_OR < OP_MINUS).
    Conflict between rule 70 and token OP_MULT resolved as shift (KW_OR < OP_MULT).
    Conflict between rule 70 and token OP_DIV resolved as shift (KW_OR < OP_DIV).
    Conflict between rule 70 and token OP_MOD resolved as shift (KW_OR < OP_MOD).


State 62

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   62           | expression OP_POW expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW  shift, and go to state 38

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token KW_AND resolved as reduce (KW_AND < OP_POW).
    Conflict between rule 62 and token KW_OR resolved as reduce (KW_OR < OP_POW).
    Conflict between rule 62 and token OP_POW resolved as shift (%right OP_POW).
    Conflict between rule 62 and token OP_EQ resolved as reduce (OP_EQ < OP_POW).
    Conflict between rule 62 and token OP_NEQ resolved as reduce (OP_NEQ < OP_POW).
    Conflict between rule 62 and token OP_LT resolved as reduce (OP_LT < OP_POW).
    Conflict between rule 62 and token OP_LEQ resolved as reduce (OP_LEQ < OP_POW).
    Conflict between rule 62 and token OP_GT resolved as reduce (OP_GT < OP_POW).
    Conflict between rule 62 and token OP_GEQ resolved as reduce (OP_GEQ < OP_POW).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POW).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POW).
    Conflict between rule 62 and token OP_MULT resolved as reduce (OP_MULT < OP_POW).
    Conflict between rule 62 and token OP_DIV resolved as reduce (OP_DIV < OP_POW).
    Conflict between rule 62 and token OP_MOD resolved as reduce (OP_MOD < OP_POW).


State 63

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   63           | expression OP_EQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token KW_AND resolved as reduce (KW_AND < OP_EQ).
    Conflict between rule 63 and token KW_OR resolved as reduce (KW_OR < OP_EQ).
    Conflict between rule 63 and token OP_POW resolved as shift (OP_EQ < OP_POW).
    Conflict between rule 63 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 63 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 63 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 63 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 63 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 63 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 63 and token OP_PLUS resolved as shift (OP_EQ < OP_PLUS).
    Conflict between rule 63 and token OP_MINUS resolved as shift (OP_EQ < OP_MINUS).
    Conflict between rule 63 and token OP_MULT resolved as shift (OP_EQ < OP_MULT).
    Conflict between rule 63 and token OP_DIV resolved as shift (OP_EQ < OP_DIV).
    Conflict between rule 63 and token OP_MOD resolved as shift (OP_EQ < OP_MOD).


State 64

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   64           | expression OP_NEQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token KW_AND resolved as reduce (KW_AND < OP_NEQ).
    Conflict between rule 64 and token KW_OR resolved as reduce (KW_OR < OP_NEQ).
    Conflict between rule 64 and token OP_POW resolved as shift (OP_NEQ < OP_POW).
    Conflict between rule 64 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 64 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 64 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 64 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 64 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 64 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 64 and token OP_PLUS resolved as shift (OP_NEQ < OP_PLUS).
    Conflict between rule 64 and token OP_MINUS resolved as shift (OP_NEQ < OP_MINUS).
    Conflict between rule 64 and token OP_MULT resolved as shift (OP_NEQ < OP_MULT).
    Conflict between rule 64 and token OP_DIV resolved as shift (OP_NEQ < OP_DIV).
    Conflict between rule 64 and token OP_MOD resolved as shift (OP_NEQ < OP_MOD).


State 65

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   65           | expression OP_LT expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token KW_AND resolved as reduce (KW_AND < OP_LT).
    Conflict between rule 65 and token KW_OR resolved as reduce (KW_OR < OP_LT).
    Conflict between rule 65 and token OP_POW resolved as shift (OP_LT < OP_POW).
    Conflict between rule 65 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 65 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 65 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 65 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 65 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 65 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 65 and token OP_PLUS resolved as shift (OP_LT < OP_PLUS).
    Conflict between rule 65 and token OP_MINUS resolved as shift (OP_LT < OP_MINUS).
    Conflict between rule 65 and token OP_MULT resolved as shift (OP_LT < OP_MULT).
    Conflict between rule 65 and token OP_DIV resolved as shift (OP_LT < OP_DIV).
    Conflict between rule 65 and token OP_MOD resolved as shift (OP_LT < OP_MOD).


State 66

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   66           | expression OP_LEQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token KW_AND resolved as reduce (KW_AND < OP_LEQ).
    Conflict between rule 66 and token KW_OR resolved as reduce (KW_OR < OP_LEQ).
    Conflict between rule 66 and token OP_POW resolved as shift (OP_LEQ < OP_POW).
    Conflict between rule 66 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 66 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 66 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 66 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 66 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 66 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 66 and token OP_PLUS resolved as shift (OP_LEQ < OP_PLUS).
    Conflict between rule 66 and token OP_MINUS resolved as shift (OP_LEQ < OP_MINUS).
    Conflict between rule 66 and token OP_MULT resolved as shift (OP_LEQ < OP_MULT).
    Conflict between rule 66 and token OP_DIV resolved as shift (OP_LEQ < OP_DIV).
    Conflict between rule 66 and token OP_MOD resolved as shift (OP_LEQ < OP_MOD).


State 67

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   67           | expression OP_GT expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token KW_AND resolved as reduce (KW_AND < OP_GT).
    Conflict between rule 67 and token KW_OR resolved as reduce (KW_OR < OP_GT).
    Conflict between rule 67 and token OP_POW resolved as shift (OP_GT < OP_POW).
    Conflict between rule 67 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 67 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 67 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 67 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 67 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 67 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 67 and token OP_PLUS resolved as shift (OP_GT < OP_PLUS).
    Conflict between rule 67 and token OP_MINUS resolved as shift (OP_GT < OP_MINUS).
    Conflict between rule 67 and token OP_MULT resolved as shift (OP_GT < OP_MULT).
    Conflict between rule 67 and token OP_DIV resolved as shift (OP_GT < OP_DIV).
    Conflict between rule 67 and token OP_MOD resolved as shift (OP_GT < OP_MOD).


State 68

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   68           | expression OP_GEQ expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW    shift, and go to state 38
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token KW_AND resolved as reduce (KW_AND < OP_GEQ).
    Conflict between rule 68 and token KW_OR resolved as reduce (KW_OR < OP_GEQ).
    Conflict between rule 68 and token OP_POW resolved as shift (OP_GEQ < OP_POW).
    Conflict between rule 68 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 68 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 68 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 68 and token OP_LEQ resolved as reduce (%left OP_LEQ).
    Conflict between rule 68 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 68 and token OP_GEQ resolved as reduce (%left OP_GEQ).
    Conflict between rule 68 and token OP_PLUS resolved as shift (OP_GEQ < OP_PLUS).
    Conflict between rule 68 and token OP_MINUS resolved as shift (OP_GEQ < OP_MINUS).
    Conflict between rule 68 and token OP_MULT resolved as shift (OP_GEQ < OP_MULT).
    Conflict between rule 68 and token OP_DIV resolved as shift (OP_GEQ < OP_DIV).
    Conflict between rule 68 and token OP_MOD resolved as shift (OP_GEQ < OP_MOD).


State 69

   57 expression: expression • OP_PLUS expression
   57           | expression OP_PLUS expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW   shift, and go to state 38
    OP_MULT  shift, and go to state 47
    OP_DIV   shift, and go to state 48
    OP_MOD   shift, and go to state 49

    $default  reduce using rule 57 (expression)

    Conflict between rule 57 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 57 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).
    Conflict between rule 57 and token OP_POW resolved as shift (OP_PLUS < OP_POW).
    Conflict between rule 57 and token OP_EQ resolved as reduce (OP_EQ < OP_PLUS).
    Conflict between rule 57 and token OP_NEQ resolved as reduce (OP_NEQ < OP_PLUS).
    Conflict between rule 57 and token OP_LT resolved as reduce (OP_LT < OP_PLUS).
    Conflict between rule 57 and token OP_LEQ resolved as reduce (OP_LEQ < OP_PLUS).
    Conflict between rule 57 and token OP_GT resolved as reduce (OP_GT < OP_PLUS).
    Conflict between rule 57 and token OP_GEQ resolved as reduce (OP_GEQ < OP_PLUS).
    Conflict between rule 57 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 57 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 57 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 57 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 57 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).


State 70

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   58           | expression OP_MINUS expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW   shift, and go to state 38
    OP_MULT  shift, and go to state 47
    OP_DIV   shift, and go to state 48
    OP_MOD   shift, and go to state 49

    $default  reduce using rule 58 (expression)

    Conflict between rule 58 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 58 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).
    Conflict between rule 58 and token OP_POW resolved as shift (OP_MINUS < OP_POW).
    Conflict between rule 58 and token OP_EQ resolved as reduce (OP_EQ < OP_MINUS).
    Conflict between rule 58 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MINUS).
    Conflict between rule 58 and token OP_LT resolved as reduce (OP_LT < OP_MINUS).
    Conflict between rule 58 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MINUS).
    Conflict between rule 58 and token OP_GT resolved as reduce (OP_GT < OP_MINUS).
    Conflict between rule 58 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MINUS).
    Conflict between rule 58 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 58 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 58 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 58 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 58 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).


State 71

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   59           | expression OP_MULT expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW  shift, and go to state 38

    $default  reduce using rule 59 (expression)

    Conflict between rule 59 and token KW_AND resolved as reduce (KW_AND < OP_MULT).
    Conflict between rule 59 and token KW_OR resolved as reduce (KW_OR < OP_MULT).
    Conflict between rule 59 and token OP_POW resolved as shift (OP_MULT < OP_POW).
    Conflict between rule 59 and token OP_EQ resolved as reduce (OP_EQ < OP_MULT).
    Conflict between rule 59 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MULT).
    Conflict between rule 59 and token OP_LT resolved as reduce (OP_LT < OP_MULT).
    Conflict between rule 59 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MULT).
    Conflict between rule 59 and token OP_GT resolved as reduce (OP_GT < OP_MULT).
    Conflict between rule 59 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MULT).
    Conflict between rule 59 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 59 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 59 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 59 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 59 and token OP_MOD resolved as reduce (%left OP_MOD).


State 72

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   60           | expression OP_DIV expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW  shift, and go to state 38

    $default  reduce using rule 60 (expression)

    Conflict between rule 60 and token KW_AND resolved as reduce (KW_AND < OP_DIV).
    Conflict between rule 60 and token KW_OR resolved as reduce (KW_OR < OP_DIV).
    Conflict between rule 60 and token OP_POW resolved as shift (OP_DIV < OP_POW).
    Conflict between rule 60 and token OP_EQ resolved as reduce (OP_EQ < OP_DIV).
    Conflict between rule 60 and token OP_NEQ resolved as reduce (OP_NEQ < OP_DIV).
    Conflict between rule 60 and token OP_LT resolved as reduce (OP_LT < OP_DIV).
    Conflict between rule 60 and token OP_LEQ resolved as reduce (OP_LEQ < OP_DIV).
    Conflict between rule 60 and token OP_GT resolved as reduce (OP_GT < OP_DIV).
    Conflict between rule 60 and token OP_GEQ resolved as reduce (OP_GEQ < OP_DIV).
    Conflict between rule 60 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 60 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 60 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 60 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 60 and token OP_MOD resolved as reduce (%left OP_MOD).


State 73

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   61           | expression OP_MOD expression •  [KW_AND, KW_OR, OP_EQ, OP_NEQ, OP_LT, OP_LEQ, OP_GT, OP_GEQ, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, RPAREN, RBRACKET, COLON, SEMICOLON, COMMA]
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    OP_POW  shift, and go to state 38

    $default  reduce using rule 61 (expression)

    Conflict between rule 61 and token KW_AND resolved as reduce (KW_AND < OP_MOD).
    Conflict between rule 61 and token KW_OR resolved as reduce (KW_OR < OP_MOD).
    Conflict between rule 61 and token OP_POW resolved as shift (OP_MOD < OP_POW).
    Conflict between rule 61 and token OP_EQ resolved as reduce (OP_EQ < OP_MOD).
    Conflict between rule 61 and token OP_NEQ resolved as reduce (OP_NEQ < OP_MOD).
    Conflict between rule 61 and token OP_LT resolved as reduce (OP_LT < OP_MOD).
    Conflict between rule 61 and token OP_LEQ resolved as reduce (OP_LEQ < OP_MOD).
    Conflict between rule 61 and token OP_GT resolved as reduce (OP_GT < OP_MOD).
    Conflict between rule 61 and token OP_GEQ resolved as reduce (OP_GEQ < OP_MOD).
    Conflict between rule 61 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 61 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 61 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 61 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 61 and token OP_MOD resolved as reduce (%left OP_MOD).


State 74

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   85 primary_expression: primary_expression LBRACKET expression • RBRACKET

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    RBRACKET  shift, and go to state 84


State 75

   86 primary_expression: primary_expression DOT IDENTIFIER •

    $default  reduce using rule 86 (primary_expression)


State 76

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression • COLON type SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    COLON     shift, and go to state 85


State 77

   17 param_decl_list: IDENTIFIER • COLON type

    COLON  shift, and go to state 86


State 78

   13 function: KW_DEF IDENTIFIER LPAREN param_list • RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF IDENTIFIER LPAREN param_list • RPAREN COLON block KW_ENDDEF SEMICOLON

    RPAREN  shift, and go to state 87


State 79

   16 param_list: param_decl_list •  [RPAREN]
   18 param_decl_list: param_decl_list • COMMA IDENTIFIER COLON type

    COMMA  shift, and go to state 88

    $default  reduce using rule 16 (param_list)


State 80

   19 main_function: KW_DEF KW_MAIN LPAREN RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 89


State 81

   13 function: • KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | • KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON
   46 component: KW_COMP IDENTIFIER COLON component_body • KW_ENDCOMP SEMICOLON
   48 component_body: component_body • component_member
   49 component_member: • hash_ident_list COLON type SEMICOLON
   50                 | • hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   51                 | • function
   52                 | • SEMICOLON
   53                 | • error SEMICOLON
   54 hash_ident_list: • IDENTIFIER
   55                | • hash_ident_list COMMA IDENTIFIER

    error       shift, and go to state 90
    IDENTIFIER  shift, and go to state 91
    KW_DEF      shift, and go to state 92
    KW_ENDCOMP  shift, and go to state 93
    SEMICOLON   shift, and go to state 94

    function          go to state 95
    component_member  go to state 96
    hash_ident_list   go to state 97


State 82

   76 function_call: IDENTIFIER LPAREN arg_list RPAREN •

    $default  reduce using rule 76 (function_call)


State 83

   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   79 arg_list: arg_list COMMA • expression
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 98
    function_call       go to state 26
    primary_expression  go to state 27


State 84

   85 primary_expression: primary_expression LBRACKET expression RBRACKET •

    $default  reduce using rule 85 (primary_expression)


State 85

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON • type SEMICOLON
   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 104


State 86

   17 param_decl_list: IDENTIFIER COLON • type
   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 105


State 87

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN • OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF IDENTIFIER LPAREN param_list RPAREN • COLON block KW_ENDDEF SEMICOLON

    COLON     shift, and go to state 106
    OP_ARROW  shift, and go to state 107


State 88

   18 param_decl_list: param_decl_list COMMA • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 108


State 89

   19 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON • block KW_ENDDEF SEMICOLON
   87 block: ε •
   88      | • block var_declaration
   89      | • block stmt

    $default  reduce using rule 87 (block)

    block  go to state 109


State 90

   53 component_member: error • SEMICOLON

    SEMICOLON  shift, and go to state 110


State 91

   54 hash_ident_list: IDENTIFIER •

    $default  reduce using rule 54 (hash_ident_list)


State 92

   13 function: KW_DEF • IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON
   14         | KW_DEF • IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 29


State 93

   46 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 111


State 94

   52 component_member: SEMICOLON •

    $default  reduce using rule 52 (component_member)


State 95

   51 component_member: function •

    $default  reduce using rule 51 (component_member)


State 96

   48 component_body: component_body component_member •

    $default  reduce using rule 48 (component_body)


State 97

   49 component_member: hash_ident_list • COLON type SEMICOLON
   50                 | hash_ident_list • LBRACKET CONST_INT RBRACKET COLON type SEMICOLON
   55 hash_ident_list: hash_ident_list • COMMA IDENTIFIER

    LBRACKET  shift, and go to state 112
    COLON     shift, and go to state 113
    COMMA     shift, and go to state 114


State 98

   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression
   79 arg_list: arg_list COMMA expression •  [RPAREN, COMMA]

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49

    $default  reduce using rule 79 (arg_list)


State 99

   26 type: IDENTIFIER •

    $default  reduce using rule 26 (type)


State 100

   22 type: KW_INTEGER •

    $default  reduce using rule 22 (type)


State 101

   23 type: KW_SCALAR •

    $default  reduce using rule 23 (type)


State 102

   24 type: KW_STR •

    $default  reduce using rule 24 (type)


State 103

   25 type: KW_BOOL •

    $default  reduce using rule 25 (type)


State 104

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 115


State 105

   17 param_decl_list: IDENTIFIER COLON type •

    $default  reduce using rule 17 (param_decl_list)


State 106

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON • block KW_ENDDEF SEMICOLON
   87 block: ε •
   88      | • block var_declaration
   89      | • block stmt

    $default  reduce using rule 87 (block)

    block  go to state 116


State 107

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW • type COLON block KW_ENDDEF SEMICOLON
   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 117


State 108

   18 param_decl_list: param_decl_list COMMA IDENTIFIER • COLON type

    COLON  shift, and go to state 118


State 109

   11 var_declaration: • IDENTIFIER COLON type SEMICOLON
   19 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block • KW_ENDDEF SEMICOLON
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   88 block: block • var_declaration
   89      | block • stmt

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 120
    KW_IF        shift, and go to state 121
    KW_FOR       shift, and go to state 122
    KW_WHILE     shift, and go to state 123
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_ENDDEF    shift, and go to state 126
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    var_declaration  go to state 129
    stmt             go to state 130
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 110

   53 component_member: error SEMICOLON •

    $default  reduce using rule 53 (component_member)


State 111

   46 component: KW_COMP IDENTIFIER COLON component_body KW_ENDCOMP SEMICOLON •

    $default  reduce using rule 46 (component)


State 112

   50 component_member: hash_ident_list LBRACKET • CONST_INT RBRACKET COLON type SEMICOLON

    CONST_INT  shift, and go to state 140


State 113

   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER
   49 component_member: hash_ident_list COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 141


State 114

   55 hash_ident_list: hash_ident_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 142


State 115

   12 const_declaration: KW_CONST IDENTIFIER OP_ASSIGN expression COLON type SEMICOLON •

    $default  reduce using rule 12 (const_declaration)


State 116

   11 var_declaration: • IDENTIFIER COLON type SEMICOLON
   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block • KW_ENDDEF SEMICOLON
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   88 block: block • var_declaration
   89      | block • stmt

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 120
    KW_IF        shift, and go to state 121
    KW_FOR       shift, and go to state 122
    KW_WHILE     shift, and go to state 123
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_ENDDEF    shift, and go to state 143
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    var_declaration  go to state 129
    stmt             go to state 130
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 117

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type • COLON block KW_ENDDEF SEMICOLON

    COLON  shift, and go to state 144


State 118

   18 param_decl_list: param_decl_list COMMA IDENTIFIER COLON • type
   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 145


State 119

   36 stmt: error • SEMICOLON

    SEMICOLON  shift, and go to state 146


State 120

   11 var_declaration: IDENTIFIER • COLON type SEMICOLON
   37 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   76 function_call: IDENTIFIER • LPAREN arg_list RPAREN

    OP_ASSIGN  shift, and go to state 147
    LPAREN     shift, and go to state 32
    COLON      shift, and go to state 148


State 121

   39 if_stmt: KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF • LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    LPAREN  shift, and go to state 149


State 122

   41 for_stmt: KW_FOR • IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 150


State 123

   42 while_stmt: KW_WHILE • LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON

    LPAREN  shift, and go to state 151


State 124

   43 break_stmt: KW_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 152


State 125

   44 continue_stmt: KW_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 153


State 126

   19 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 154


State 127

   38 return_stmt: KW_RETURN • expression SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 155
    function_call       go to state 26
    primary_expression  go to state 27


State 128

   45 empty_stmt: SEMICOLON •

    $default  reduce using rule 45 (empty_stmt)


State 129

   88 block: block var_declaration •

    $default  reduce using rule 88 (block)


State 130

   89 block: block stmt •

    $default  reduce using rule 89 (block)


State 131

   27 stmt: assignment_stmt •

    $default  reduce using rule 27 (stmt)


State 132

   28 stmt: return_stmt •

    $default  reduce using rule 28 (stmt)


State 133

   29 stmt: if_stmt •

    $default  reduce using rule 29 (stmt)


State 134

   30 stmt: for_stmt •

    $default  reduce using rule 30 (stmt)


State 135

   31 stmt: while_stmt •

    $default  reduce using rule 31 (stmt)


State 136

   32 stmt: break_stmt •

    $default  reduce using rule 32 (stmt)


State 137

   33 stmt: continue_stmt •

    $default  reduce using rule 33 (stmt)


State 138

   34 stmt: empty_stmt •

    $default  reduce using rule 34 (stmt)


State 139

   35 stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 156


State 140

   50 component_member: hash_ident_list LBRACKET CONST_INT • RBRACKET COLON type SEMICOLON

    RBRACKET  shift, and go to state 157


State 141

   49 component_member: hash_ident_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 158


State 142

   55 hash_ident_list: hash_ident_list COMMA IDENTIFIER •

    $default  reduce using rule 55 (hash_ident_list)


State 143

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 159


State 144

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON • block KW_ENDDEF SEMICOLON
   87 block: ε •
   88      | • block var_declaration
   89      | • block stmt

    $default  reduce using rule 87 (block)

    block  go to state 160


State 145

   18 param_decl_list: param_decl_list COMMA IDENTIFIER COLON type •

    $default  reduce using rule 18 (param_decl_list)


State 146

   36 stmt: error SEMICOLON •

    $default  reduce using rule 36 (stmt)


State 147

   37 assignment_stmt: IDENTIFIER OP_ASSIGN • expression SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 161
    function_call       go to state 26
    primary_expression  go to state 27


State 148

   11 var_declaration: IDENTIFIER COLON • type SEMICOLON
   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 162


State 149

   39 if_stmt: KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN • expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 163
    function_call       go to state 26
    primary_expression  go to state 27


State 150

   41 for_stmt: KW_FOR IDENTIFIER • KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 164


State 151

   42 while_stmt: KW_WHILE LPAREN • expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 165
    function_call       go to state 26
    primary_expression  go to state 27


State 152

   43 break_stmt: KW_BREAK SEMICOLON •

    $default  reduce using rule 43 (break_stmt)


State 153

   44 continue_stmt: KW_CONTINUE SEMICOLON •

    $default  reduce using rule 44 (continue_stmt)


State 154

   19 main_function: KW_DEF KW_MAIN LPAREN RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 19 (main_function)


State 155

   38 return_stmt: KW_RETURN expression • SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND     shift, and go to state 36
    KW_OR      shift, and go to state 37
    OP_POW     shift, and go to state 38
    OP_EQ      shift, and go to state 39
    OP_NEQ     shift, and go to state 40
    OP_LT      shift, and go to state 41
    OP_LEQ     shift, and go to state 42
    OP_GT      shift, and go to state 43
    OP_GEQ     shift, and go to state 44
    OP_PLUS    shift, and go to state 45
    OP_MINUS   shift, and go to state 46
    OP_MULT    shift, and go to state 47
    OP_DIV     shift, and go to state 48
    OP_MOD     shift, and go to state 49
    SEMICOLON  shift, and go to state 166


State 156

   35 stmt: function_call SEMICOLON •

    $default  reduce using rule 35 (stmt)


State 157

   50 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 167


State 158

   49 component_member: hash_ident_list COLON type SEMICOLON •

    $default  reduce using rule 49 (component_member)


State 159

   14 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 14 (function)


State 160

   11 var_declaration: • IDENTIFIER COLON type SEMICOLON
   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block • KW_ENDDEF SEMICOLON
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   88 block: block • var_declaration
   89      | block • stmt

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 120
    KW_IF        shift, and go to state 121
    KW_FOR       shift, and go to state 122
    KW_WHILE     shift, and go to state 123
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_ENDDEF    shift, and go to state 168
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    var_declaration  go to state 129
    stmt             go to state 130
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 161

   37 assignment_stmt: IDENTIFIER OP_ASSIGN expression • SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND     shift, and go to state 36
    KW_OR      shift, and go to state 37
    OP_POW     shift, and go to state 38
    OP_EQ      shift, and go to state 39
    OP_NEQ     shift, and go to state 40
    OP_LT      shift, and go to state 41
    OP_LEQ     shift, and go to state 42
    OP_GT      shift, and go to state 43
    OP_GEQ     shift, and go to state 44
    OP_PLUS    shift, and go to state 45
    OP_MINUS   shift, and go to state 46
    OP_MULT    shift, and go to state 47
    OP_DIV     shift, and go to state 48
    OP_MOD     shift, and go to state 49
    SEMICOLON  shift, and go to state 169


State 162

   11 var_declaration: IDENTIFIER COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 170


State 163

   39 if_stmt: KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN expression • RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    RPAREN    shift, and go to state 171


State 164

   41 for_stmt: KW_FOR IDENTIFIER KW_IN • LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 172


State 165

   42 while_stmt: KW_WHILE LPAREN expression • RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    RPAREN    shift, and go to state 173


State 166

   38 return_stmt: KW_RETURN expression SEMICOLON •

    $default  reduce using rule 38 (return_stmt)


State 167

   22 type: • KW_INTEGER
   23     | • KW_SCALAR
   24     | • KW_STR
   25     | • KW_BOOL
   26     | • IDENTIFIER
   50 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON • type SEMICOLON

    IDENTIFIER  shift, and go to state 99
    KW_INTEGER  shift, and go to state 100
    KW_SCALAR   shift, and go to state 101
    KW_STR      shift, and go to state 102
    KW_BOOL     shift, and go to state 103

    type  go to state 174


State 168

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 175


State 169

   37 assignment_stmt: IDENTIFIER OP_ASSIGN expression SEMICOLON •

    $default  reduce using rule 37 (assignment_stmt)


State 170

   11 var_declaration: IDENTIFIER COLON type SEMICOLON •

    $default  reduce using rule 11 (var_declaration)


State 171

   39 if_stmt: KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN expression RPAREN • COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 176


State 172

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET • expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 177
    function_call       go to state 26
    primary_expression  go to state 27


State 173

   42 while_stmt: KW_WHILE LPAREN expression RPAREN • COLON stmt_list KW_ENDWHILE SEMICOLON

    COLON  shift, and go to state 178


State 174

   50 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 179


State 175

   13 function: KW_DEF IDENTIFIER LPAREN param_list RPAREN OP_ARROW type COLON block KW_ENDDEF SEMICOLON •

    $default  reduce using rule 13 (function)


State 176

   20 stmt_list: ε •
   21          | • stmt_list stmt
   39 if_stmt: KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN expression RPAREN COLON • stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 20 (stmt_list)

    stmt_list  go to state 180


State 177

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression • COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    COLON     shift, and go to state 181


State 178

   20 stmt_list: ε •
   21          | • stmt_list stmt
   42 while_stmt: KW_WHILE LPAREN expression RPAREN COLON • stmt_list KW_ENDWHILE SEMICOLON

    $default  reduce using rule 20 (stmt_list)

    stmt_list  go to state 182


State 179

   50 component_member: hash_ident_list LBRACKET CONST_INT RBRACKET COLON type SEMICOLON •

    $default  reduce using rule 50 (component_member)


State 180

   21 stmt_list: stmt_list • stmt
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   39        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN expression RPAREN COLON stmt_list • KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 183
    KW_IF        shift, and go to state 121
    KW_ELSE      shift, and go to state 184
    KW_ENDIF     shift, and go to state 185
    KW_FOR       shift, and go to state 122
    KW_WHILE     shift, and go to state 123
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    stmt             go to state 186
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 181

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON • expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   56 expression: • primary_expression
   57           | • expression OP_PLUS expression
   58           | • expression OP_MINUS expression
   59           | • expression OP_MULT expression
   60           | • expression OP_DIV expression
   61           | • expression OP_MOD expression
   62           | • expression OP_POW expression
   63           | • expression OP_EQ expression
   64           | • expression OP_NEQ expression
   65           | • expression OP_LT expression
   66           | • expression OP_LEQ expression
   67           | • expression OP_GT expression
   68           | • expression OP_GEQ expression
   69           | • expression KW_AND expression
   70           | • expression KW_OR expression
   71           | • KW_NOT expression
   72           | • OP_MINUS expression
   73           | • LPAREN expression RPAREN
   74           | • CONST_BOOL_FALSE
   75           | • CONST_BOOL_TRUE
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN
   80 primary_expression: • CONST_INT
   81                   | • CONST_FLOAT
   82                   | • CONST_STRING
   83                   | • IDENTIFIER
   84                   | • function_call
   85                   | • primary_expression LBRACKET expression RBRACKET
   86                   | • primary_expression DOT IDENTIFIER

    IDENTIFIER        shift, and go to state 16
    CONST_INT         shift, and go to state 17
    CONST_FLOAT       shift, and go to state 18
    CONST_STRING      shift, and go to state 19
    CONST_BOOL_TRUE   shift, and go to state 20
    CONST_BOOL_FALSE  shift, and go to state 21
    KW_NOT            shift, and go to state 22
    OP_MINUS          shift, and go to state 23
    LPAREN            shift, and go to state 24

    expression          go to state 187
    function_call       go to state 26
    primary_expression  go to state 27


State 182

   21 stmt_list: stmt_list • stmt
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   42           | KW_WHILE LPAREN expression RPAREN COLON stmt_list • KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 183
    KW_IF        shift, and go to state 121
    KW_FOR       shift, and go to state 122
    KW_WHILE     shift, and go to state 123
    KW_ENDWHILE  shift, and go to state 188
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    stmt             go to state 186
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 183

   37 assignment_stmt: IDENTIFIER • OP_ASSIGN expression SEMICOLON
   76 function_call: IDENTIFIER • LPAREN arg_list RPAREN

    OP_ASSIGN  shift, and go to state 147
    LPAREN     shift, and go to state 32


State 184

   40 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE • COLON stmt_list KW_ENDIF SEMICOLON

    COLON  shift, and go to state 189


State 185

   39 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 190


State 186

   21 stmt_list: stmt_list stmt •

    $default  reduce using rule 21 (stmt_list)


State 187

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression • RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   57 expression: expression • OP_PLUS expression
   58           | expression • OP_MINUS expression
   59           | expression • OP_MULT expression
   60           | expression • OP_DIV expression
   61           | expression • OP_MOD expression
   62           | expression • OP_POW expression
   63           | expression • OP_EQ expression
   64           | expression • OP_NEQ expression
   65           | expression • OP_LT expression
   66           | expression • OP_LEQ expression
   67           | expression • OP_GT expression
   68           | expression • OP_GEQ expression
   69           | expression • KW_AND expression
   70           | expression • KW_OR expression

    KW_AND    shift, and go to state 36
    KW_OR     shift, and go to state 37
    OP_POW    shift, and go to state 38
    OP_EQ     shift, and go to state 39
    OP_NEQ    shift, and go to state 40
    OP_LT     shift, and go to state 41
    OP_LEQ    shift, and go to state 42
    OP_GT     shift, and go to state 43
    OP_GEQ    shift, and go to state 44
    OP_PLUS   shift, and go to state 45
    OP_MINUS  shift, and go to state 46
    OP_MULT   shift, and go to state 47
    OP_DIV    shift, and go to state 48
    OP_MOD    shift, and go to state 49
    RBRACKET  shift, and go to state 191


State 188

   42 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 192


State 189

   20 stmt_list: ε •
   21          | • stmt_list stmt
   40 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON • stmt_list KW_ENDIF SEMICOLON

    $default  reduce using rule 20 (stmt_list)

    stmt_list  go to state 193


State 190

   39 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 39 (if_stmt)


State 191

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET • COLON stmt_list KW_ENDFOR SEMICOLON

    COLON  shift, and go to state 194


State 192

   42 while_stmt: KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON •

    $default  reduce using rule 42 (while_stmt)


State 193

   21 stmt_list: stmt_list • stmt
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   40        | KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list • KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 183
    KW_IF        shift, and go to state 121
    KW_ENDIF     shift, and go to state 195
    KW_FOR       shift, and go to state 122
    KW_WHILE     shift, and go to state 123
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    stmt             go to state 186
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 194

   20 stmt_list: ε •
   21          | • stmt_list stmt
   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON • stmt_list KW_ENDFOR SEMICOLON

    $default  reduce using rule 20 (stmt_list)

    stmt_list  go to state 196


State 195

   40 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 197


State 196

   21 stmt_list: stmt_list • stmt
   27 stmt: • assignment_stmt
   28     | • return_stmt
   29     | • if_stmt
   30     | • for_stmt
   31     | • while_stmt
   32     | • break_stmt
   33     | • continue_stmt
   34     | • empty_stmt
   35     | • function_call SEMICOLON
   36     | • error SEMICOLON
   37 assignment_stmt: • IDENTIFIER OP_ASSIGN expression SEMICOLON
   38 return_stmt: • KW_RETURN expression SEMICOLON
   39 if_stmt: • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ENDIF SEMICOLON
   40        | • KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON
   41 for_stmt: • KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON
   41         | KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list • KW_ENDFOR SEMICOLON
   42 while_stmt: • KW_WHILE LPAREN expression RPAREN COLON stmt_list KW_ENDWHILE SEMICOLON
   43 break_stmt: • KW_BREAK SEMICOLON
   44 continue_stmt: • KW_CONTINUE SEMICOLON
   45 empty_stmt: • SEMICOLON
   76 function_call: • IDENTIFIER LPAREN arg_list RPAREN

    error        shift, and go to state 119
    IDENTIFIER   shift, and go to state 183
    KW_IF        shift, and go to state 121
    KW_FOR       shift, and go to state 122
    KW_ENDFOR    shift, and go to state 198
    KW_WHILE     shift, and go to state 123
    KW_BREAK     shift, and go to state 124
    KW_CONTINUE  shift, and go to state 125
    KW_RETURN    shift, and go to state 127
    SEMICOLON    shift, and go to state 128

    stmt             go to state 186
    assignment_stmt  go to state 131
    return_stmt      go to state 132
    if_stmt          go to state 133
    for_stmt         go to state 134
    while_stmt       go to state 135
    break_stmt       go to state 136
    continue_stmt    go to state 137
    empty_stmt       go to state 138
    function_call    go to state 139


State 197

   40 if_stmt: KW_IF LPAREN expression RPAREN COLON stmt_list KW_ELSE COLON stmt_list KW_ENDIF SEMICOLON •

    $default  reduce using rule 40 (if_stmt)


State 198

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 199


State 199

   41 for_stmt: KW_FOR IDENTIFIER KW_IN LBRACKET expression COLON expression RBRACKET COLON stmt_list KW_ENDFOR SEMICOLON •

    $default  reduce using rule 41 (for_stmt)
