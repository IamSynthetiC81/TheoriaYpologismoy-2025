Terminals unused in grammar

    KW_NIL


State 155 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    2        | decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    3        | mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    4        | KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'

    5 decl_list: mult_const
    6          | mult_var
    7          | mult_const mult_var

    8 mult_var: mult_var decl_var
    9         | decl_var

   10 decl_var: KW_VAR decl_var_list data_type ';'

   11 decl_var_list: item
   12              | IDENTIFIER
   13              | decl_var_list ',' item
   14              | decl_var_list ',' IDENTIFIER

   15 mult_const: mult_const decl_const
   16           | decl_const

   17 decl_const: KW_CONST decl_const_list data_type ';'

   18 decl_const_list: item
   19                | decl_const_list ',' item

   20 item: IDENTIFIER '=' expr
   21     | IDENTIFIER '=' basic_expr
   22     | decl_array '=' expr
   23     | decl_array '=' basic_expr

   24 decl_array: IDENTIFIER '[' INTEGER ']'

   25 decl_array_item: '[' INTEGER ']' IDENTIFIER

   26 mult_func: mult_func decl_func
   27          | decl_func

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

   29 decl_func_list: IDENTIFIER function_data_type
   30               | decl_func_list ',' IDENTIFIER function_data_type

   31 data_type: KW_INT
   32          | KW_STRING
   33          | KW_REAL
   34          | KW_BOOL

   35 function_data_type: data_type
   36                   | '[' ']' data_type

   37 logical_expr: arithmetic_expr
   38             | '(' logical_expr ')'
   39             | logical_expr EQ logical_expr
   40             | logical_expr '>' logical_expr
   41             | logical_expr GEQ logical_expr
   42             | logical_expr '<' logical_expr
   43             | logical_expr SEQ logical_expr
   44             | logical_expr UNEQ logical_expr
   45             | KW_NOT logical_expr
   46             | logical_expr KW_AND logical_expr
   47             | logical_expr KW_OR logical_expr

   48 arithmetic_expr: basic_expr
   49                | func_call
   50                | arithmetic_expr '+' arithmetic_expr
   51                | arithmetic_expr '-' arithmetic_expr
   52                | arithmetic_expr '*' arithmetic_expr
   53                | arithmetic_expr '/' arithmetic_expr
   54                | arithmetic_expr '%' arithmetic_expr
   55                | arithmetic_expr OP_POWER arithmetic_expr
   56                | '(' arithmetic_expr ')'

   57 basic_expr: IDENTIFIER
   58           | INTEGER
   59           | REAL
   60           | '+' basic_expr
   61           | '-' basic_expr

   62 expr: STRING
   63     | KW_TRUE
   64     | KW_FALSE

   65 assignement: IDENTIFIER '=' logical_expr ';'
   66            | IDENTIFIER '=' expr ';'
   67            | decl_array_item '=' logical_expr
   68            | decl_array_item '=' expr

   69 function_expr: logical_expr
   70              | expr
   71              | function_expr ',' expr
   72              | function_expr ',' logical_expr
   73              | %empty

   74 func_call: IDENTIFIER '(' function_expr ')'

   75 func_body: body KW_RETURN logical_expr ';'
   76          | body KW_RETURN ';'

   77 body: %empty
   78     | body decl_var
   79     | body decl_const
   80     | body assignement
   81     | body if_command
   82     | body for_command
   83     | body while_command
   84     | body func_call ';'

   85 complex_commands: %empty
   86                 | complex_commands decl_var
   87                 | complex_commands decl_const
   88                 | complex_commands assignement
   89                 | complex_commands KW_BREAK ';'
   90                 | complex_commands KW_CONTINUE ';'
   91                 | complex_commands if_command
   92                 | complex_commands for_command
   93                 | complex_commands while_command
   94                 | complex_commands func_call ';'

   95 if_expr: KW_TRUE
   96        | KW_FALSE
   97        | assignement
   98        | logical_expr

   99 if_command: KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | KW_IF '(' if_expr ')' assignement
  101           | KW_IF '(' if_expr ')' func_call
  102           | KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | KW_IF '(' if_expr ')' assignement else_command
  106           | KW_IF '(' if_expr ')' func_call else_command
  107           | KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command

  109 else_command: KW_ELSE assignement ';'
  110             | KW_ELSE func_call
  111             | KW_ELSE '{' complex_commands '}' ';'
  112             | KW_ELSE KW_BREAK ';'
  113             | KW_ELSE KW_CONTINUE ';'
  114             | KW_ELSE if_command

  115 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'

  125 while_command: KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | KW_WHILE '(' if_expr ')' assignement ';'
  127              | KW_WHILE '(' if_expr ')' func_call ';'
  128              | KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | KW_WHILE '(' if_expr ')' KW_BREAK ';'


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 54
    '(' (40) 1 2 3 4 28 38 56 74 99 100 101 102 103 104 105 106 107 108 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129
    ')' (41) 1 2 3 4 28 38 56 74 99 100 101 102 103 104 105 106 107 108 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129
    '*' (42) 52
    '+' (43) 50 60
    ',' (44) 13 14 19 30 71 72
    '-' (45) 51 61
    '/' (47) 53
    ';' (59) 1 2 3 4 10 17 28 65 66 75 76 84 89 90 94 99 102 103 104 107 108 109 111 112 113 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129
    '<' (60) 42
    '=' (61) 20 21 22 23 65 66 67 68
    '>' (62) 40
    '[' (91) 24 25 36
    ']' (93) 24 25 36
    '{' (123) 1 2 3 4 28 99 104 111 115 120 125
    '}' (125) 1 2 3 4 28 99 104 111 115 120 125
    error (256)
    STRING <crepr> (258) 62
    IDENTIFIER <crepr> (259) 12 14 20 21 24 25 28 29 30 57 65 66 74
    REAL <crepr> (260) 59
    INTEGER <crepr> (261) 24 25 58
    KW_BEGIN (262) 1 2 3 4
    KW_FUNC (263) 1 2 3 4 28
    KW_INT (264) 31
    KW_REAL (265) 33
    KW_BOOL (266) 34
    KW_TRUE (267) 63 95
    KW_STRING (268) 32
    KW_FALSE (269) 64 96
    KW_VAR (270) 10
    KW_CONST (271) 17
    KW_IF (272) 99 100 101 102 103 104 105 106 107 108
    KW_ELSE (273) 109 110 111 112 113 114
    KW_WHILE (274) 125 126 127 128 129
    KW_BREAK (275) 89 102 107 112 118 123 129
    KW_CONTINUE (276) 90 103 108 113 119 124 128
    KW_NIL (277)
    KW_AND (278) 46
    KW_OR (279) 47
    KW_NOT (280) 45
    KW_RETURN (281) 75 76
    KW_FOR (282) 115 116 117 118 119 120 121 122 123 124
    OP_POWER (283) 55
    EQ (284) 39
    GEQ (285) 41
    UNEQ (286) 44
    SEQ (287) 43


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2 3 4
        on right: 0
    decl_list <crepr> (51)
        on left: 5 6 7
        on right: 1 2
    mult_var <crepr> (52)
        on left: 8 9
        on right: 6 7 8
    decl_var <crepr> (53)
        on left: 10
        on right: 8 9 78 86
    decl_var_list <crepr> (54)
        on left: 11 12 13 14
        on right: 10 13 14
    mult_const <crepr> (55)
        on left: 15 16
        on right: 5 7 15
    decl_const <crepr> (56)
        on left: 17
        on right: 15 16 79 87
    decl_const_list <crepr> (57)
        on left: 18 19
        on right: 17 19
    item <crepr> (58)
        on left: 20 21 22 23
        on right: 11 13 18 19
    decl_array <crepr> (59)
        on left: 24
        on right: 22 23
    decl_array_item <crepr> (60)
        on left: 25
        on right: 67 68
    mult_func <crepr> (61)
        on left: 26 27
        on right: 1 3 26
    decl_func <crepr> (62)
        on left: 28
        on right: 26 27
    decl_func_list <crepr> (63)
        on left: 29 30
        on right: 28 30
    data_type <crepr> (64)
        on left: 31 32 33 34
        on right: 10 17 35 36
    function_data_type <crepr> (65)
        on left: 35 36
        on right: 28 29 30
    logical_expr <crepr> (66)
        on left: 37 38 39 40 41 42 43 44 45 46 47
        on right: 38 39 40 41 42 43 44 45 46 47 65 67 69 72 75 98
    arithmetic_expr <crepr> (67)
        on left: 48 49 50 51 52 53 54 55 56
        on right: 37 50 51 52 53 54 55 56
    basic_expr <crepr> (68)
        on left: 57 58 59 60 61
        on right: 21 23 48 60 61
    expr <crepr> (69)
        on left: 62 63 64
        on right: 20 22 66 68 70 71
    assignement <crepr> (70)
        on left: 65 66 67 68
        on right: 80 88 97 100 105 109 115 116 117 118 119 120 121 122 123 124 126
    function_expr <crepr> (71)
        on left: 69 70 71 72 73
        on right: 71 72 74
    func_call <crepr> (72)
        on left: 74
        on right: 49 84 94 101 106 110 117 122 127
    func_body <crepr> (73)
        on left: 75 76
        on right: 28
    body <crepr> (74)
        on left: 77 78 79 80 81 82 83 84
        on right: 1 2 3 4 75 76 78 79 80 81 82 83 84
    complex_commands <crepr> (75)
        on left: 85 86 87 88 89 90 91 92 93 94
        on right: 86 87 88 89 90 91 92 93 94 99 104 111 115 120 125
    if_expr <crepr> (76)
        on left: 95 96 97 98
        on right: 99 100 101 102 103 104 105 106 107 108 115 116 117 118 119 125 126 127 128 129
    if_command <crepr> (77)
        on left: 99 100 101 102 103 104 105 106 107 108
        on right: 81 91 114
    else_command <crepr> (78)
        on left: 109 110 111 112 113 114
        on right: 104 105 106 107 108
    for_command <crepr> (79)
        on left: 115 116 117 118 119 120 121 122 123 124
        on right: 82 92
    while_command <crepr> (80)
        on left: 125 126 127 128 129
        on right: 83 93


State 0

    0 $accept: . program $end
    1 program: . decl_list mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    2        | . decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    3        | . mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    4        | . KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    5 decl_list: . mult_const
    6          | . mult_var
    7          | . mult_const mult_var
    8 mult_var: . mult_var decl_var
    9         | . decl_var
   10 decl_var: . KW_VAR decl_var_list data_type ';'
   15 mult_const: . mult_const decl_const
   16           | . decl_const
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   26 mult_func: . mult_func decl_func
   27          | . decl_func
   28 decl_func: . KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    KW_FUNC   shift, and go to state 1
    KW_VAR    shift, and go to state 2
    KW_CONST  shift, and go to state 3

    program     go to state 4
    decl_list   go to state 5
    mult_var    go to state 6
    decl_var    go to state 7
    mult_const  go to state 8
    decl_const  go to state 9
    mult_func   go to state 10
    decl_func   go to state 11


State 1

    4 program: KW_FUNC . KW_BEGIN '(' ')' '{' body '}' ';'
   28 decl_func: KW_FUNC . IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    IDENTIFIER  shift, and go to state 12
    KW_BEGIN    shift, and go to state 13


State 2

   10 decl_var: KW_VAR . decl_var_list data_type ';'
   11 decl_var_list: . item
   12              | . IDENTIFIER
   13              | . decl_var_list ',' item
   14              | . decl_var_list ',' IDENTIFIER
   20 item: . IDENTIFIER '=' expr
   21     | . IDENTIFIER '=' basic_expr
   22     | . decl_array '=' expr
   23     | . decl_array '=' basic_expr
   24 decl_array: . IDENTIFIER '[' INTEGER ']'

    IDENTIFIER  shift, and go to state 14

    decl_var_list  go to state 15
    item           go to state 16
    decl_array     go to state 17


State 3

   17 decl_const: KW_CONST . decl_const_list data_type ';'
   18 decl_const_list: . item
   19                | . decl_const_list ',' item
   20 item: . IDENTIFIER '=' expr
   21     | . IDENTIFIER '=' basic_expr
   22     | . decl_array '=' expr
   23     | . decl_array '=' basic_expr
   24 decl_array: . IDENTIFIER '[' INTEGER ']'

    IDENTIFIER  shift, and go to state 18

    decl_const_list  go to state 19
    item             go to state 20
    decl_array       go to state 17


State 4

    0 $accept: program . $end

    $end  shift, and go to state 21


State 5

    1 program: decl_list . mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
    2        | decl_list . KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
   26 mult_func: . mult_func decl_func
   27          | . decl_func
   28 decl_func: . KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    KW_FUNC  shift, and go to state 22

    mult_func  go to state 23
    decl_func  go to state 11


State 6

    6 decl_list: mult_var .  [KW_FUNC]
    8 mult_var: mult_var . decl_var
   10 decl_var: . KW_VAR decl_var_list data_type ';'

    KW_VAR  shift, and go to state 2

    $default  reduce using rule 6 (decl_list)

    decl_var  go to state 24


State 7

    9 mult_var: decl_var .

    $default  reduce using rule 9 (mult_var)


State 8

    5 decl_list: mult_const .  [KW_FUNC]
    7          | mult_const . mult_var
    8 mult_var: . mult_var decl_var
    9         | . decl_var
   10 decl_var: . KW_VAR decl_var_list data_type ';'
   15 mult_const: mult_const . decl_const
   17 decl_const: . KW_CONST decl_const_list data_type ';'

    KW_VAR    shift, and go to state 2
    KW_CONST  shift, and go to state 3

    $default  reduce using rule 5 (decl_list)

    mult_var    go to state 25
    decl_var    go to state 7
    decl_const  go to state 26


State 9

   16 mult_const: decl_const .

    $default  reduce using rule 16 (mult_const)


State 10

    3 program: mult_func . KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
   26 mult_func: mult_func . decl_func
   28 decl_func: . KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    KW_FUNC  shift, and go to state 27

    decl_func  go to state 28


State 11

   27 mult_func: decl_func .

    $default  reduce using rule 27 (mult_func)


State 12

   28 decl_func: KW_FUNC IDENTIFIER . '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    '('  shift, and go to state 29


State 13

    4 program: KW_FUNC KW_BEGIN . '(' ')' '{' body '}' ';'

    '('  shift, and go to state 30


State 14

   12 decl_var_list: IDENTIFIER .  [KW_INT, KW_REAL, KW_BOOL, KW_STRING, ',']
   20 item: IDENTIFIER . '=' expr
   21     | IDENTIFIER . '=' basic_expr
   24 decl_array: IDENTIFIER . '[' INTEGER ']'

    '='  shift, and go to state 31
    '['  shift, and go to state 32

    $default  reduce using rule 12 (decl_var_list)


State 15

   10 decl_var: KW_VAR decl_var_list . data_type ';'
   13 decl_var_list: decl_var_list . ',' item
   14              | decl_var_list . ',' IDENTIFIER
   31 data_type: . KW_INT
   32          | . KW_STRING
   33          | . KW_REAL
   34          | . KW_BOOL

    KW_INT     shift, and go to state 33
    KW_REAL    shift, and go to state 34
    KW_BOOL    shift, and go to state 35
    KW_STRING  shift, and go to state 36
    ','        shift, and go to state 37

    data_type  go to state 38


State 16

   11 decl_var_list: item .

    $default  reduce using rule 11 (decl_var_list)


State 17

   22 item: decl_array . '=' expr
   23     | decl_array . '=' basic_expr

    '='  shift, and go to state 39


State 18

   20 item: IDENTIFIER . '=' expr
   21     | IDENTIFIER . '=' basic_expr
   24 decl_array: IDENTIFIER . '[' INTEGER ']'

    '='  shift, and go to state 31
    '['  shift, and go to state 32


State 19

   17 decl_const: KW_CONST decl_const_list . data_type ';'
   19 decl_const_list: decl_const_list . ',' item
   31 data_type: . KW_INT
   32          | . KW_STRING
   33          | . KW_REAL
   34          | . KW_BOOL

    KW_INT     shift, and go to state 33
    KW_REAL    shift, and go to state 34
    KW_BOOL    shift, and go to state 35
    KW_STRING  shift, and go to state 36
    ','        shift, and go to state 40

    data_type  go to state 41


State 20

   18 decl_const_list: item .

    $default  reduce using rule 18 (decl_const_list)


State 21

    0 $accept: program $end .

    $default  accept


State 22

    2 program: decl_list KW_FUNC . KW_BEGIN '(' ')' '{' body '}' ';'
   28 decl_func: KW_FUNC . IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    IDENTIFIER  shift, and go to state 12
    KW_BEGIN    shift, and go to state 42


State 23

    1 program: decl_list mult_func . KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';'
   26 mult_func: mult_func . decl_func
   28 decl_func: . KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    KW_FUNC  shift, and go to state 43

    decl_func  go to state 28


State 24

    8 mult_var: mult_var decl_var .

    $default  reduce using rule 8 (mult_var)


State 25

    7 decl_list: mult_const mult_var .  [KW_FUNC]
    8 mult_var: mult_var . decl_var
   10 decl_var: . KW_VAR decl_var_list data_type ';'

    KW_VAR  shift, and go to state 2

    $default  reduce using rule 7 (decl_list)

    decl_var  go to state 24


State 26

   15 mult_const: mult_const decl_const .

    $default  reduce using rule 15 (mult_const)


State 27

    3 program: mult_func KW_FUNC . KW_BEGIN '(' ')' '{' body '}' ';'
   28 decl_func: KW_FUNC . IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    IDENTIFIER  shift, and go to state 12
    KW_BEGIN    shift, and go to state 44


State 28

   26 mult_func: mult_func decl_func .

    $default  reduce using rule 26 (mult_func)


State 29

   28 decl_func: KW_FUNC IDENTIFIER '(' . decl_func_list ')' function_data_type '{' func_body '}' ';'
   29 decl_func_list: . IDENTIFIER function_data_type
   30               | . decl_func_list ',' IDENTIFIER function_data_type

    IDENTIFIER  shift, and go to state 45

    decl_func_list  go to state 46


State 30

    4 program: KW_FUNC KW_BEGIN '(' . ')' '{' body '}' ';'

    ')'  shift, and go to state 47


State 31

   20 item: IDENTIFIER '=' . expr
   21     | IDENTIFIER '=' . basic_expr
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   62 expr: . STRING
   63     | . KW_TRUE
   64     | . KW_FALSE

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 52
    KW_FALSE    shift, and go to state 53
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55

    basic_expr  go to state 56
    expr        go to state 57


State 32

   24 decl_array: IDENTIFIER '[' . INTEGER ']'

    INTEGER  shift, and go to state 58


State 33

   31 data_type: KW_INT .

    $default  reduce using rule 31 (data_type)


State 34

   33 data_type: KW_REAL .

    $default  reduce using rule 33 (data_type)


State 35

   34 data_type: KW_BOOL .

    $default  reduce using rule 34 (data_type)


State 36

   32 data_type: KW_STRING .

    $default  reduce using rule 32 (data_type)


State 37

   13 decl_var_list: decl_var_list ',' . item
   14              | decl_var_list ',' . IDENTIFIER
   20 item: . IDENTIFIER '=' expr
   21     | . IDENTIFIER '=' basic_expr
   22     | . decl_array '=' expr
   23     | . decl_array '=' basic_expr
   24 decl_array: . IDENTIFIER '[' INTEGER ']'

    IDENTIFIER  shift, and go to state 59

    item        go to state 60
    decl_array  go to state 17


State 38

   10 decl_var: KW_VAR decl_var_list data_type . ';'

    ';'  shift, and go to state 61


State 39

   22 item: decl_array '=' . expr
   23     | decl_array '=' . basic_expr
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   62 expr: . STRING
   63     | . KW_TRUE
   64     | . KW_FALSE

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 52
    KW_FALSE    shift, and go to state 53
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55

    basic_expr  go to state 62
    expr        go to state 63


State 40

   19 decl_const_list: decl_const_list ',' . item
   20 item: . IDENTIFIER '=' expr
   21     | . IDENTIFIER '=' basic_expr
   22     | . decl_array '=' expr
   23     | . decl_array '=' basic_expr
   24 decl_array: . IDENTIFIER '[' INTEGER ']'

    IDENTIFIER  shift, and go to state 18

    item        go to state 64
    decl_array  go to state 17


State 41

   17 decl_const: KW_CONST decl_const_list data_type . ';'

    ';'  shift, and go to state 65


State 42

    2 program: decl_list KW_FUNC KW_BEGIN . '(' ')' '{' body '}' ';'

    '('  shift, and go to state 66


State 43

    1 program: decl_list mult_func KW_FUNC . KW_BEGIN '(' ')' '{' body '}' ';'
   28 decl_func: KW_FUNC . IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';'

    IDENTIFIER  shift, and go to state 12
    KW_BEGIN    shift, and go to state 67


State 44

    3 program: mult_func KW_FUNC KW_BEGIN . '(' ')' '{' body '}' ';'

    '('  shift, and go to state 68


State 45

   29 decl_func_list: IDENTIFIER . function_data_type
   31 data_type: . KW_INT
   32          | . KW_STRING
   33          | . KW_REAL
   34          | . KW_BOOL
   35 function_data_type: . data_type
   36                   | . '[' ']' data_type

    KW_INT     shift, and go to state 33
    KW_REAL    shift, and go to state 34
    KW_BOOL    shift, and go to state 35
    KW_STRING  shift, and go to state 36
    '['        shift, and go to state 69

    data_type           go to state 70
    function_data_type  go to state 71


State 46

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list . ')' function_data_type '{' func_body '}' ';'
   30 decl_func_list: decl_func_list . ',' IDENTIFIER function_data_type

    ')'  shift, and go to state 72
    ','  shift, and go to state 73


State 47

    4 program: KW_FUNC KW_BEGIN '(' ')' . '{' body '}' ';'

    '{'  shift, and go to state 74


State 48

   62 expr: STRING .

    $default  reduce using rule 62 (expr)


State 49

   57 basic_expr: IDENTIFIER .

    $default  reduce using rule 57 (basic_expr)


State 50

   59 basic_expr: REAL .

    $default  reduce using rule 59 (basic_expr)


State 51

   58 basic_expr: INTEGER .

    $default  reduce using rule 58 (basic_expr)


State 52

   63 expr: KW_TRUE .

    $default  reduce using rule 63 (expr)


State 53

   64 expr: KW_FALSE .

    $default  reduce using rule 64 (expr)


State 54

   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   60           | '+' . basic_expr
   61           | . '-' basic_expr

    IDENTIFIER  shift, and go to state 49
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55

    basic_expr  go to state 75


State 55

   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   61           | '-' . basic_expr

    IDENTIFIER  shift, and go to state 49
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55

    basic_expr  go to state 76


State 56

   21 item: IDENTIFIER '=' basic_expr .

    $default  reduce using rule 21 (item)


State 57

   20 item: IDENTIFIER '=' expr .

    $default  reduce using rule 20 (item)


State 58

   24 decl_array: IDENTIFIER '[' INTEGER . ']'

    ']'  shift, and go to state 77


State 59

   14 decl_var_list: decl_var_list ',' IDENTIFIER .  [KW_INT, KW_REAL, KW_BOOL, KW_STRING, ',']
   20 item: IDENTIFIER . '=' expr
   21     | IDENTIFIER . '=' basic_expr
   24 decl_array: IDENTIFIER . '[' INTEGER ']'

    '='  shift, and go to state 31
    '['  shift, and go to state 32

    $default  reduce using rule 14 (decl_var_list)


State 60

   13 decl_var_list: decl_var_list ',' item .

    $default  reduce using rule 13 (decl_var_list)


State 61

   10 decl_var: KW_VAR decl_var_list data_type ';' .

    $default  reduce using rule 10 (decl_var)


State 62

   23 item: decl_array '=' basic_expr .

    $default  reduce using rule 23 (item)


State 63

   22 item: decl_array '=' expr .

    $default  reduce using rule 22 (item)


State 64

   19 decl_const_list: decl_const_list ',' item .

    $default  reduce using rule 19 (decl_const_list)


State 65

   17 decl_const: KW_CONST decl_const_list data_type ';' .

    $default  reduce using rule 17 (decl_const)


State 66

    2 program: decl_list KW_FUNC KW_BEGIN '(' . ')' '{' body '}' ';'

    ')'  shift, and go to state 78


State 67

    1 program: decl_list mult_func KW_FUNC KW_BEGIN . '(' ')' '{' body '}' ';'

    '('  shift, and go to state 79


State 68

    3 program: mult_func KW_FUNC KW_BEGIN '(' . ')' '{' body '}' ';'

    ')'  shift, and go to state 80


State 69

   36 function_data_type: '[' . ']' data_type

    ']'  shift, and go to state 81


State 70

   35 function_data_type: data_type .

    $default  reduce using rule 35 (function_data_type)


State 71

   29 decl_func_list: IDENTIFIER function_data_type .

    $default  reduce using rule 29 (decl_func_list)


State 72

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' . function_data_type '{' func_body '}' ';'
   31 data_type: . KW_INT
   32          | . KW_STRING
   33          | . KW_REAL
   34          | . KW_BOOL
   35 function_data_type: . data_type
   36                   | . '[' ']' data_type

    KW_INT     shift, and go to state 33
    KW_REAL    shift, and go to state 34
    KW_BOOL    shift, and go to state 35
    KW_STRING  shift, and go to state 36
    '['        shift, and go to state 69

    data_type           go to state 70
    function_data_type  go to state 82


State 73

   30 decl_func_list: decl_func_list ',' . IDENTIFIER function_data_type

    IDENTIFIER  shift, and go to state 83


State 74

    4 program: KW_FUNC KW_BEGIN '(' ')' '{' . body '}' ';'
   77 body: . %empty
   78     | . body decl_var
   79     | . body decl_const
   80     | . body assignement
   81     | . body if_command
   82     | . body for_command
   83     | . body while_command
   84     | . body func_call ';'

    $default  reduce using rule 77 (body)

    body  go to state 84


State 75

   60 basic_expr: '+' basic_expr .

    $default  reduce using rule 60 (basic_expr)


State 76

   61 basic_expr: '-' basic_expr .

    $default  reduce using rule 61 (basic_expr)


State 77

   24 decl_array: IDENTIFIER '[' INTEGER ']' .

    $default  reduce using rule 24 (decl_array)


State 78

    2 program: decl_list KW_FUNC KW_BEGIN '(' ')' . '{' body '}' ';'

    '{'  shift, and go to state 85


State 79

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' . ')' '{' body '}' ';'

    ')'  shift, and go to state 86


State 80

    3 program: mult_func KW_FUNC KW_BEGIN '(' ')' . '{' body '}' ';'

    '{'  shift, and go to state 87


State 81

   31 data_type: . KW_INT
   32          | . KW_STRING
   33          | . KW_REAL
   34          | . KW_BOOL
   36 function_data_type: '[' ']' . data_type

    KW_INT     shift, and go to state 33
    KW_REAL    shift, and go to state 34
    KW_BOOL    shift, and go to state 35
    KW_STRING  shift, and go to state 36

    data_type  go to state 88


State 82

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type . '{' func_body '}' ';'

    '{'  shift, and go to state 89


State 83

   30 decl_func_list: decl_func_list ',' IDENTIFIER . function_data_type
   31 data_type: . KW_INT
   32          | . KW_STRING
   33          | . KW_REAL
   34          | . KW_BOOL
   35 function_data_type: . data_type
   36                   | . '[' ']' data_type

    KW_INT     shift, and go to state 33
    KW_REAL    shift, and go to state 34
    KW_BOOL    shift, and go to state 35
    KW_STRING  shift, and go to state 36
    '['        shift, and go to state 69

    data_type           go to state 70
    function_data_type  go to state 90


State 84

    4 program: KW_FUNC KW_BEGIN '(' ')' '{' body . '}' ';'
   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   78 body: body . decl_var
   79     | body . decl_const
   80     | body . assignement
   81     | body . if_command
   82     | body . for_command
   83     | body . while_command
   84     | body . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER  shift, and go to state 91
    KW_VAR      shift, and go to state 2
    KW_CONST    shift, and go to state 3
    KW_IF       shift, and go to state 92
    KW_WHILE    shift, and go to state 93
    KW_FOR      shift, and go to state 94
    '}'         shift, and go to state 95
    '['         shift, and go to state 96

    decl_var         go to state 97
    decl_const       go to state 98
    decl_array_item  go to state 99
    assignement      go to state 100
    func_call        go to state 101
    if_command       go to state 102
    for_command      go to state 103
    while_command    go to state 104


State 85

    2 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' . body '}' ';'
   77 body: . %empty
   78     | . body decl_var
   79     | . body decl_const
   80     | . body assignement
   81     | . body if_command
   82     | . body for_command
   83     | . body while_command
   84     | . body func_call ';'

    $default  reduce using rule 77 (body)

    body  go to state 105


State 86

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' ')' . '{' body '}' ';'

    '{'  shift, and go to state 106


State 87

    3 program: mult_func KW_FUNC KW_BEGIN '(' ')' '{' . body '}' ';'
   77 body: . %empty
   78     | . body decl_var
   79     | . body decl_const
   80     | . body assignement
   81     | . body if_command
   82     | . body for_command
   83     | . body while_command
   84     | . body func_call ';'

    $default  reduce using rule 77 (body)

    body  go to state 107


State 88

   36 function_data_type: '[' ']' data_type .

    $default  reduce using rule 36 (function_data_type)


State 89

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' . func_body '}' ';'
   75 func_body: . body KW_RETURN logical_expr ';'
   76          | . body KW_RETURN ';'
   77 body: . %empty
   78     | . body decl_var
   79     | . body decl_const
   80     | . body assignement
   81     | . body if_command
   82     | . body for_command
   83     | . body while_command
   84     | . body func_call ';'

    $default  reduce using rule 77 (body)

    func_body  go to state 108
    body       go to state 109


State 90

   30 decl_func_list: decl_func_list ',' IDENTIFIER function_data_type .

    $default  reduce using rule 30 (decl_func_list)


State 91

   65 assignement: IDENTIFIER . '=' logical_expr ';'
   66            | IDENTIFIER . '=' expr ';'
   74 func_call: IDENTIFIER . '(' function_expr ')'

    '('  shift, and go to state 110
    '='  shift, and go to state 111


State 92

   99 if_command: KW_IF . '(' if_expr ')' '{' complex_commands '}' ';'
  100           | KW_IF . '(' if_expr ')' assignement
  101           | KW_IF . '(' if_expr ')' func_call
  102           | KW_IF . '(' if_expr ')' KW_BREAK ';'
  103           | KW_IF . '(' if_expr ')' KW_CONTINUE ';'
  104           | KW_IF . '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | KW_IF . '(' if_expr ')' assignement else_command
  106           | KW_IF . '(' if_expr ')' func_call else_command
  107           | KW_IF . '(' if_expr ')' KW_BREAK ';' else_command
  108           | KW_IF . '(' if_expr ')' KW_CONTINUE ';' else_command

    '('  shift, and go to state 112


State 93

  125 while_command: KW_WHILE . '(' if_expr ')' '{' complex_commands '}' ';'
  126              | KW_WHILE . '(' if_expr ')' assignement ';'
  127              | KW_WHILE . '(' if_expr ')' func_call ';'
  128              | KW_WHILE . '(' if_expr ')' KW_CONTINUE ';'
  129              | KW_WHILE . '(' if_expr ')' KW_BREAK ';'

    '('  shift, and go to state 113


State 94

  115 for_command: KW_FOR . '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | KW_FOR . '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | KW_FOR . '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | KW_FOR . '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | KW_FOR . '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | KW_FOR . '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | KW_FOR . '(' assignement ';' ';' assignement ')' assignement ';'
  122            | KW_FOR . '(' assignement ';' ';' assignement ')' func_call ';'
  123            | KW_FOR . '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | KW_FOR . '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'

    '('  shift, and go to state 114


State 95

    4 program: KW_FUNC KW_BEGIN '(' ')' '{' body '}' . ';'

    ';'  shift, and go to state 115


State 96

   25 decl_array_item: '[' . INTEGER ']' IDENTIFIER

    INTEGER  shift, and go to state 116


State 97

   78 body: body decl_var .

    $default  reduce using rule 78 (body)


State 98

   79 body: body decl_const .

    $default  reduce using rule 79 (body)


State 99

   67 assignement: decl_array_item . '=' logical_expr
   68            | decl_array_item . '=' expr

    '='  shift, and go to state 117


State 100

   80 body: body assignement .

    $default  reduce using rule 80 (body)


State 101

   84 body: body func_call . ';'

    ';'  shift, and go to state 118


State 102

   81 body: body if_command .

    $default  reduce using rule 81 (body)


State 103

   82 body: body for_command .

    $default  reduce using rule 82 (body)


State 104

   83 body: body while_command .

    $default  reduce using rule 83 (body)


State 105

    2 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body . '}' ';'
   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   78 body: body . decl_var
   79     | body . decl_const
   80     | body . assignement
   81     | body . if_command
   82     | body . for_command
   83     | body . while_command
   84     | body . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER  shift, and go to state 91
    KW_VAR      shift, and go to state 2
    KW_CONST    shift, and go to state 3
    KW_IF       shift, and go to state 92
    KW_WHILE    shift, and go to state 93
    KW_FOR      shift, and go to state 94
    '}'         shift, and go to state 119
    '['         shift, and go to state 96

    decl_var         go to state 97
    decl_const       go to state 98
    decl_array_item  go to state 99
    assignement      go to state 100
    func_call        go to state 101
    if_command       go to state 102
    for_command      go to state 103
    while_command    go to state 104


State 106

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' ')' '{' . body '}' ';'
   77 body: . %empty
   78     | . body decl_var
   79     | . body decl_const
   80     | . body assignement
   81     | . body if_command
   82     | . body for_command
   83     | . body while_command
   84     | . body func_call ';'

    $default  reduce using rule 77 (body)

    body  go to state 120


State 107

    3 program: mult_func KW_FUNC KW_BEGIN '(' ')' '{' body . '}' ';'
   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   78 body: body . decl_var
   79     | body . decl_const
   80     | body . assignement
   81     | body . if_command
   82     | body . for_command
   83     | body . while_command
   84     | body . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER  shift, and go to state 91
    KW_VAR      shift, and go to state 2
    KW_CONST    shift, and go to state 3
    KW_IF       shift, and go to state 92
    KW_WHILE    shift, and go to state 93
    KW_FOR      shift, and go to state 94
    '}'         shift, and go to state 121
    '['         shift, and go to state 96

    decl_var         go to state 97
    decl_const       go to state 98
    decl_array_item  go to state 99
    assignement      go to state 100
    func_call        go to state 101
    if_command       go to state 102
    for_command      go to state 103
    while_command    go to state 104


State 108

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body . '}' ';'

    '}'  shift, and go to state 122


State 109

   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   75 func_body: body . KW_RETURN logical_expr ';'
   76          | body . KW_RETURN ';'
   78 body: body . decl_var
   79     | body . decl_const
   80     | body . assignement
   81     | body . if_command
   82     | body . for_command
   83     | body . while_command
   84     | body . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER  shift, and go to state 91
    KW_VAR      shift, and go to state 2
    KW_CONST    shift, and go to state 3
    KW_IF       shift, and go to state 92
    KW_WHILE    shift, and go to state 93
    KW_RETURN   shift, and go to state 123
    KW_FOR      shift, and go to state 94
    '['         shift, and go to state 96

    decl_var         go to state 97
    decl_const       go to state 98
    decl_array_item  go to state 99
    assignement      go to state 100
    func_call        go to state 101
    if_command       go to state 102
    for_command      go to state 103
    while_command    go to state 104


State 110

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   62 expr: . STRING
   63     | . KW_TRUE
   64     | . KW_FALSE
   69 function_expr: . logical_expr
   70              | . expr
   71              | . function_expr ',' expr
   72              | . function_expr ',' logical_expr
   73              | . %empty  [')', ',']
   74 func_call: . IDENTIFIER '(' function_expr ')'
   74          | IDENTIFIER '(' . function_expr ')'

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 52
    KW_FALSE    shift, and go to state 53
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    $default  reduce using rule 73 (function_expr)

    logical_expr     go to state 127
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    expr             go to state 130
    function_expr    go to state 131
    func_call        go to state 132


State 111

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   62 expr: . STRING
   63     | . KW_TRUE
   64     | . KW_FALSE
   65 assignement: IDENTIFIER '=' . logical_expr ';'
   66            | IDENTIFIER '=' . expr ';'
   74 func_call: . IDENTIFIER '(' function_expr ')'

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 52
    KW_FALSE    shift, and go to state 53
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 133
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    expr             go to state 134
    func_call        go to state 132


State 112

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   95 if_expr: . KW_TRUE
   96        | . KW_FALSE
   97        | . assignement
   98        | . logical_expr
   99 if_command: KW_IF '(' . if_expr ')' '{' complex_commands '}' ';'
  100           | KW_IF '(' . if_expr ')' assignement
  101           | KW_IF '(' . if_expr ')' func_call
  102           | KW_IF '(' . if_expr ')' KW_BREAK ';'
  103           | KW_IF '(' . if_expr ')' KW_CONTINUE ';'
  104           | KW_IF '(' . if_expr ')' '{' complex_commands '}' ';' else_command
  105           | KW_IF '(' . if_expr ')' assignement else_command
  106           | KW_IF '(' . if_expr ')' func_call else_command
  107           | KW_IF '(' . if_expr ')' KW_BREAK ';' else_command
  108           | KW_IF '(' . if_expr ')' KW_CONTINUE ';' else_command

    IDENTIFIER  shift, and go to state 135
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 136
    KW_FALSE    shift, and go to state 137
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126
    '['         shift, and go to state 96

    decl_array_item  go to state 99
    logical_expr     go to state 138
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    assignement      go to state 139
    func_call        go to state 132
    if_expr          go to state 140


State 113

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   95 if_expr: . KW_TRUE
   96        | . KW_FALSE
   97        | . assignement
   98        | . logical_expr
  125 while_command: KW_WHILE '(' . if_expr ')' '{' complex_commands '}' ';'
  126              | KW_WHILE '(' . if_expr ')' assignement ';'
  127              | KW_WHILE '(' . if_expr ')' func_call ';'
  128              | KW_WHILE '(' . if_expr ')' KW_CONTINUE ';'
  129              | KW_WHILE '(' . if_expr ')' KW_BREAK ';'

    IDENTIFIER  shift, and go to state 135
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 136
    KW_FALSE    shift, and go to state 137
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126
    '['         shift, and go to state 96

    decl_array_item  go to state 99
    logical_expr     go to state 138
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    assignement      go to state 139
    func_call        go to state 132
    if_expr          go to state 141


State 114

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
  115 for_command: KW_FOR '(' . assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | KW_FOR '(' . assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | KW_FOR '(' . assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | KW_FOR '(' . assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | KW_FOR '(' . assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | KW_FOR '(' . assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | KW_FOR '(' . assignement ';' ';' assignement ')' assignement ';'
  122            | KW_FOR '(' . assignement ';' ';' assignement ')' func_call ';'
  123            | KW_FOR '(' . assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | KW_FOR '(' . assignement ';' ';' assignement ')' KW_CONTINUE ';'

    IDENTIFIER  shift, and go to state 142
    '['         shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 143


State 115

    4 program: KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';' .

    $default  reduce using rule 4 (program)


State 116

   25 decl_array_item: '[' INTEGER . ']' IDENTIFIER

    ']'  shift, and go to state 144


State 117

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   62 expr: . STRING
   63     | . KW_TRUE
   64     | . KW_FALSE
   67 assignement: decl_array_item '=' . logical_expr
   68            | decl_array_item '=' . expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 52
    KW_FALSE    shift, and go to state 53
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 145
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    expr             go to state 146
    func_call        go to state 132


State 118

   84 body: body func_call ';' .

    $default  reduce using rule 84 (body)


State 119

    2 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}' . ';'

    ';'  shift, and go to state 147


State 120

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' ')' '{' body . '}' ';'
   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   78 body: body . decl_var
   79     | body . decl_const
   80     | body . assignement
   81     | body . if_command
   82     | body . for_command
   83     | body . while_command
   84     | body . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER  shift, and go to state 91
    KW_VAR      shift, and go to state 2
    KW_CONST    shift, and go to state 3
    KW_IF       shift, and go to state 92
    KW_WHILE    shift, and go to state 93
    KW_FOR      shift, and go to state 94
    '}'         shift, and go to state 148
    '['         shift, and go to state 96

    decl_var         go to state 97
    decl_const       go to state 98
    decl_array_item  go to state 99
    assignement      go to state 100
    func_call        go to state 101
    if_command       go to state 102
    for_command      go to state 103
    while_command    go to state 104


State 121

    3 program: mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' . ';'

    ';'  shift, and go to state 149


State 122

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' . ';'

    ';'  shift, and go to state 150


State 123

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   75 func_body: body KW_RETURN . logical_expr ';'
   76          | body KW_RETURN . ';'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126
    ';'         shift, and go to state 151

    logical_expr     go to state 152
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 124

   57 basic_expr: IDENTIFIER .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, OP_POWER, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', '*', '/', '%', ')', '}', ';', ',', '[']
   74 func_call: IDENTIFIER . '(' function_expr ')'

    '('  shift, and go to state 110

    $default  reduce using rule 57 (basic_expr)


State 125

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   45             | KW_NOT . logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 153
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 126

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   38             | '(' . logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   56                | '(' . arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 154
    arithmetic_expr  go to state 155
    basic_expr       go to state 129
    func_call        go to state 132


State 127

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   69 function_expr: logical_expr .  [')', ',']

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163

    $default  reduce using rule 69 (function_expr)


State 128

   37 logical_expr: arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr

    OP_POWER  shift, and go to state 164
    '+'       shift, and go to state 165
    '-'       shift, and go to state 166
    '*'       shift, and go to state 167
    '/'       shift, and go to state 168
    '%'       shift, and go to state 169

    $default  reduce using rule 37 (logical_expr)


State 129

   48 arithmetic_expr: basic_expr .

    $default  reduce using rule 48 (arithmetic_expr)


State 130

   70 function_expr: expr .

    $default  reduce using rule 70 (function_expr)


State 131

   71 function_expr: function_expr . ',' expr
   72              | function_expr . ',' logical_expr
   74 func_call: IDENTIFIER '(' function_expr . ')'

    ')'  shift, and go to state 170
    ','  shift, and go to state 171


State 132

   49 arithmetic_expr: func_call .

    $default  reduce using rule 49 (arithmetic_expr)


State 133

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   65 assignement: IDENTIFIER '=' logical_expr . ';'

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163
    ';'     shift, and go to state 172


State 134

   66 assignement: IDENTIFIER '=' expr . ';'

    ';'  shift, and go to state 173


State 135

   57 basic_expr: IDENTIFIER .  [KW_AND, KW_OR, OP_POWER, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', '*', '/', '%', ')', ';']
   65 assignement: IDENTIFIER . '=' logical_expr ';'
   66            | IDENTIFIER . '=' expr ';'
   74 func_call: IDENTIFIER . '(' function_expr ')'

    '('  shift, and go to state 110
    '='  shift, and go to state 111

    $default  reduce using rule 57 (basic_expr)


State 136

   95 if_expr: KW_TRUE .

    $default  reduce using rule 95 (if_expr)


State 137

   96 if_expr: KW_FALSE .

    $default  reduce using rule 96 (if_expr)


State 138

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   98 if_expr: logical_expr .  [')', ';']

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163

    $default  reduce using rule 98 (if_expr)


State 139

   97 if_expr: assignement .

    $default  reduce using rule 97 (if_expr)


State 140

   99 if_command: KW_IF '(' if_expr . ')' '{' complex_commands '}' ';'
  100           | KW_IF '(' if_expr . ')' assignement
  101           | KW_IF '(' if_expr . ')' func_call
  102           | KW_IF '(' if_expr . ')' KW_BREAK ';'
  103           | KW_IF '(' if_expr . ')' KW_CONTINUE ';'
  104           | KW_IF '(' if_expr . ')' '{' complex_commands '}' ';' else_command
  105           | KW_IF '(' if_expr . ')' assignement else_command
  106           | KW_IF '(' if_expr . ')' func_call else_command
  107           | KW_IF '(' if_expr . ')' KW_BREAK ';' else_command
  108           | KW_IF '(' if_expr . ')' KW_CONTINUE ';' else_command

    ')'  shift, and go to state 174


State 141

  125 while_command: KW_WHILE '(' if_expr . ')' '{' complex_commands '}' ';'
  126              | KW_WHILE '(' if_expr . ')' assignement ';'
  127              | KW_WHILE '(' if_expr . ')' func_call ';'
  128              | KW_WHILE '(' if_expr . ')' KW_CONTINUE ';'
  129              | KW_WHILE '(' if_expr . ')' KW_BREAK ';'

    ')'  shift, and go to state 175


State 142

   65 assignement: IDENTIFIER . '=' logical_expr ';'
   66            | IDENTIFIER . '=' expr ';'

    '='  shift, and go to state 111


State 143

  115 for_command: KW_FOR '(' assignement . ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | KW_FOR '(' assignement . ';' if_expr ';' assignement ')' assignement ';'
  117            | KW_FOR '(' assignement . ';' if_expr ';' assignement ')' func_call ';'
  118            | KW_FOR '(' assignement . ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | KW_FOR '(' assignement . ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | KW_FOR '(' assignement . ';' ';' assignement ')' '{' complex_commands '}'
  121            | KW_FOR '(' assignement . ';' ';' assignement ')' assignement ';'
  122            | KW_FOR '(' assignement . ';' ';' assignement ')' func_call ';'
  123            | KW_FOR '(' assignement . ';' ';' assignement ')' KW_BREAK ';'
  124            | KW_FOR '(' assignement . ';' ';' assignement ')' KW_CONTINUE ';'

    ';'  shift, and go to state 176


State 144

   25 decl_array_item: '[' INTEGER ']' . IDENTIFIER

    IDENTIFIER  shift, and go to state 177


State 145

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   67 assignement: decl_array_item '=' logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_RETURN, KW_FOR, ')', '}', ';', '[']

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163

    $default  reduce using rule 67 (assignement)


State 146

   68 assignement: decl_array_item '=' expr .

    $default  reduce using rule 68 (assignement)


State 147

    2 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';' .

    $default  reduce using rule 2 (program)


State 148

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' . ';'

    ';'  shift, and go to state 178


State 149

    3 program: mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';' .

    $default  reduce using rule 3 (program)


State 150

   28 decl_func: KW_FUNC IDENTIFIER '(' decl_func_list ')' function_data_type '{' func_body '}' ';' .

    $default  reduce using rule 28 (decl_func)


State 151

   76 func_body: body KW_RETURN ';' .

    $default  reduce using rule 76 (func_body)


State 152

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   75 func_body: body KW_RETURN logical_expr . ';'

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163
    ';'     shift, and go to state 179


State 153

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   45             | KW_NOT logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 45 (logical_expr)

    Conflict between rule 45 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 45 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 45 and token EQ resolved as reduce (EQ < KW_NOT).
    Conflict between rule 45 and token GEQ resolved as reduce (GEQ < KW_NOT).
    Conflict between rule 45 and token UNEQ resolved as reduce (UNEQ < KW_NOT).
    Conflict between rule 45 and token SEQ resolved as reduce (SEQ < KW_NOT).
    Conflict between rule 45 and token '>' resolved as reduce ('>' < KW_NOT).
    Conflict between rule 45 and token '<' resolved as reduce ('<' < KW_NOT).


State 154

   38 logical_expr: '(' logical_expr . ')'
   39             | logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163
    ')'     shift, and go to state 180


State 155

   37 logical_expr: arithmetic_expr .  [KW_AND, KW_OR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')']
   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr
   56                | '(' arithmetic_expr . ')'

    OP_POWER  shift, and go to state 164
    '+'       shift, and go to state 165
    '-'       shift, and go to state 166
    '*'       shift, and go to state 167
    '/'       shift, and go to state 168
    '%'       shift, and go to state 169
    ')'       shift, and go to state 181

    ')'       [reduce using rule 37 (logical_expr)]
    $default  reduce using rule 37 (logical_expr)


State 156

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   46             | logical_expr KW_AND . logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 182
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 157

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   47             | logical_expr KW_OR . logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 183
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 158

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   39             | logical_expr EQ . logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 184
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 159

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   41             | logical_expr GEQ . logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 185
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 160

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   44             | logical_expr UNEQ . logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 186
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 161

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   43             | logical_expr SEQ . logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 187
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 162

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   40             | logical_expr '>' . logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 188
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 163

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   42             | logical_expr '<' . logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 189
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    func_call        go to state 132


State 164

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   55                | arithmetic_expr OP_POWER . arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 191
    basic_expr       go to state 129
    func_call        go to state 132


State 165

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   50                | arithmetic_expr '+' . arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 192
    basic_expr       go to state 129
    func_call        go to state 132


State 166

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   51                | arithmetic_expr '-' . arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 193
    basic_expr       go to state 129
    func_call        go to state 132


State 167

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   52                | arithmetic_expr '*' . arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 194
    basic_expr       go to state 129
    func_call        go to state 132


State 168

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   53                | arithmetic_expr '/' . arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 195
    basic_expr       go to state 129
    func_call        go to state 132


State 169

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   54                | arithmetic_expr '%' . arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 196
    basic_expr       go to state 129
    func_call        go to state 132


State 170

   74 func_call: IDENTIFIER '(' function_expr ')' .

    $default  reduce using rule 74 (func_call)


State 171

   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   62 expr: . STRING
   63     | . KW_TRUE
   64     | . KW_FALSE
   71 function_expr: function_expr ',' . expr
   72              | function_expr ',' . logical_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 52
    KW_FALSE    shift, and go to state 53
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126

    logical_expr     go to state 197
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    expr             go to state 198
    func_call        go to state 132


State 172

   65 assignement: IDENTIFIER '=' logical_expr ';' .

    $default  reduce using rule 65 (assignement)


State 173

   66 assignement: IDENTIFIER '=' expr ';' .

    $default  reduce using rule 66 (assignement)


State 174

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   99 if_command: KW_IF '(' if_expr ')' . '{' complex_commands '}' ';'
  100           | KW_IF '(' if_expr ')' . assignement
  101           | KW_IF '(' if_expr ')' . func_call
  102           | KW_IF '(' if_expr ')' . KW_BREAK ';'
  103           | KW_IF '(' if_expr ')' . KW_CONTINUE ';'
  104           | KW_IF '(' if_expr ')' . '{' complex_commands '}' ';' else_command
  105           | KW_IF '(' if_expr ')' . assignement else_command
  106           | KW_IF '(' if_expr ')' . func_call else_command
  107           | KW_IF '(' if_expr ')' . KW_BREAK ';' else_command
  108           | KW_IF '(' if_expr ')' . KW_CONTINUE ';' else_command

    IDENTIFIER   shift, and go to state 91
    KW_BREAK     shift, and go to state 199
    KW_CONTINUE  shift, and go to state 200
    '{'          shift, and go to state 201
    '['          shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 202
    func_call        go to state 203


State 175

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
  125 while_command: KW_WHILE '(' if_expr ')' . '{' complex_commands '}' ';'
  126              | KW_WHILE '(' if_expr ')' . assignement ';'
  127              | KW_WHILE '(' if_expr ')' . func_call ';'
  128              | KW_WHILE '(' if_expr ')' . KW_CONTINUE ';'
  129              | KW_WHILE '(' if_expr ')' . KW_BREAK ';'

    IDENTIFIER   shift, and go to state 91
    KW_BREAK     shift, and go to state 204
    KW_CONTINUE  shift, and go to state 205
    '{'          shift, and go to state 206
    '['          shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 207
    func_call        go to state 208


State 176

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   37 logical_expr: . arithmetic_expr
   38             | . '(' logical_expr ')'
   39             | . logical_expr EQ logical_expr
   40             | . logical_expr '>' logical_expr
   41             | . logical_expr GEQ logical_expr
   42             | . logical_expr '<' logical_expr
   43             | . logical_expr SEQ logical_expr
   44             | . logical_expr UNEQ logical_expr
   45             | . KW_NOT logical_expr
   46             | . logical_expr KW_AND logical_expr
   47             | . logical_expr KW_OR logical_expr
   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   95 if_expr: . KW_TRUE
   96        | . KW_FALSE
   97        | . assignement
   98        | . logical_expr
  115 for_command: KW_FOR '(' assignement ';' . if_expr ';' assignement ')' '{' complex_commands '}'
  116            | KW_FOR '(' assignement ';' . if_expr ';' assignement ')' assignement ';'
  117            | KW_FOR '(' assignement ';' . if_expr ';' assignement ')' func_call ';'
  118            | KW_FOR '(' assignement ';' . if_expr ';' assignement ')' KW_BREAK ';'
  119            | KW_FOR '(' assignement ';' . if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | KW_FOR '(' assignement ';' . ';' assignement ')' '{' complex_commands '}'
  121            | KW_FOR '(' assignement ';' . ';' assignement ')' assignement ';'
  122            | KW_FOR '(' assignement ';' . ';' assignement ')' func_call ';'
  123            | KW_FOR '(' assignement ';' . ';' assignement ')' KW_BREAK ';'
  124            | KW_FOR '(' assignement ';' . ';' assignement ')' KW_CONTINUE ';'

    IDENTIFIER  shift, and go to state 135
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    KW_TRUE     shift, and go to state 136
    KW_FALSE    shift, and go to state 137
    KW_NOT      shift, and go to state 125
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 126
    ';'         shift, and go to state 209
    '['         shift, and go to state 96

    decl_array_item  go to state 99
    logical_expr     go to state 138
    arithmetic_expr  go to state 128
    basic_expr       go to state 129
    assignement      go to state 139
    func_call        go to state 132
    if_expr          go to state 210


State 177

   25 decl_array_item: '[' INTEGER ']' IDENTIFIER .

    $default  reduce using rule 25 (decl_array_item)


State 178

    1 program: decl_list mult_func KW_FUNC KW_BEGIN '(' ')' '{' body '}' ';' .

    $default  reduce using rule 1 (program)


State 179

   75 func_body: body KW_RETURN logical_expr ';' .

    $default  reduce using rule 75 (func_body)


State 180

   38 logical_expr: '(' logical_expr ')' .

    $default  reduce using rule 38 (logical_expr)


State 181

   56 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 56 (arithmetic_expr)


State 182

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   46             | logical_expr KW_AND logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, ')', '}', ';', ',', '[']
   47             | logical_expr . KW_OR logical_expr

    EQ    shift, and go to state 158
    GEQ   shift, and go to state 159
    UNEQ  shift, and go to state 160
    SEQ   shift, and go to state 161
    '>'   shift, and go to state 162
    '<'   shift, and go to state 163

    $default  reduce using rule 46 (logical_expr)

    Conflict between rule 46 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 46 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 46 and token EQ resolved as shift (KW_AND < EQ).
    Conflict between rule 46 and token GEQ resolved as shift (KW_AND < GEQ).
    Conflict between rule 46 and token UNEQ resolved as shift (KW_AND < UNEQ).
    Conflict between rule 46 and token SEQ resolved as shift (KW_AND < SEQ).
    Conflict between rule 46 and token '>' resolved as shift (KW_AND < '>').
    Conflict between rule 46 and token '<' resolved as shift (KW_AND < '<').


State 183

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   47             | logical_expr KW_OR logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_OR, KW_RETURN, KW_FOR, ')', '}', ';', ',', '[']

    KW_AND  shift, and go to state 156
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163

    $default  reduce using rule 47 (logical_expr)

    Conflict between rule 47 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 47 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 47 and token EQ resolved as shift (KW_OR < EQ).
    Conflict between rule 47 and token GEQ resolved as shift (KW_OR < GEQ).
    Conflict between rule 47 and token UNEQ resolved as shift (KW_OR < UNEQ).
    Conflict between rule 47 and token SEQ resolved as shift (KW_OR < SEQ).
    Conflict between rule 47 and token '>' resolved as shift (KW_OR < '>').
    Conflict between rule 47 and token '<' resolved as shift (KW_OR < '<').


State 184

   39 logical_expr: logical_expr . EQ logical_expr
   39             | logical_expr EQ logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 39 (logical_expr)

    Conflict between rule 39 and token KW_AND resolved as reduce (KW_AND < EQ).
    Conflict between rule 39 and token KW_OR resolved as reduce (KW_OR < EQ).
    Conflict between rule 39 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 39 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 39 and token UNEQ resolved as reduce (%left UNEQ).
    Conflict between rule 39 and token SEQ resolved as reduce (%left SEQ).
    Conflict between rule 39 and token '>' resolved as reduce (%left '>').
    Conflict between rule 39 and token '<' resolved as reduce (%left '<').


State 185

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   41             | logical_expr GEQ logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 41 (logical_expr)

    Conflict between rule 41 and token KW_AND resolved as reduce (KW_AND < GEQ).
    Conflict between rule 41 and token KW_OR resolved as reduce (KW_OR < GEQ).
    Conflict between rule 41 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 41 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 41 and token UNEQ resolved as reduce (%left UNEQ).
    Conflict between rule 41 and token SEQ resolved as reduce (%left SEQ).
    Conflict between rule 41 and token '>' resolved as reduce (%left '>').
    Conflict between rule 41 and token '<' resolved as reduce (%left '<').


State 186

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   44             | logical_expr UNEQ logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 44 (logical_expr)

    Conflict between rule 44 and token KW_AND resolved as reduce (KW_AND < UNEQ).
    Conflict between rule 44 and token KW_OR resolved as reduce (KW_OR < UNEQ).
    Conflict between rule 44 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 44 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 44 and token UNEQ resolved as reduce (%left UNEQ).
    Conflict between rule 44 and token SEQ resolved as reduce (%left SEQ).
    Conflict between rule 44 and token '>' resolved as reduce (%left '>').
    Conflict between rule 44 and token '<' resolved as reduce (%left '<').


State 187

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   43             | logical_expr SEQ logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 43 (logical_expr)

    Conflict between rule 43 and token KW_AND resolved as reduce (KW_AND < SEQ).
    Conflict between rule 43 and token KW_OR resolved as reduce (KW_OR < SEQ).
    Conflict between rule 43 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 43 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 43 and token UNEQ resolved as reduce (%left UNEQ).
    Conflict between rule 43 and token SEQ resolved as reduce (%left SEQ).
    Conflict between rule 43 and token '>' resolved as reduce (%left '>').
    Conflict between rule 43 and token '<' resolved as reduce (%left '<').


State 188

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   40             | logical_expr '>' logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 40 (logical_expr)

    Conflict between rule 40 and token KW_AND resolved as reduce (KW_AND < '>').
    Conflict between rule 40 and token KW_OR resolved as reduce (KW_OR < '>').
    Conflict between rule 40 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 40 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 40 and token UNEQ resolved as reduce (%left UNEQ).
    Conflict between rule 40 and token SEQ resolved as reduce (%left SEQ).
    Conflict between rule 40 and token '>' resolved as reduce (%left '>').
    Conflict between rule 40 and token '<' resolved as reduce (%left '<').


State 189

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   42             | logical_expr '<' logical_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', ')', '}', ';', ',', '[']
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr

    $default  reduce using rule 42 (logical_expr)

    Conflict between rule 42 and token KW_AND resolved as reduce (KW_AND < '<').
    Conflict between rule 42 and token KW_OR resolved as reduce (KW_OR < '<').
    Conflict between rule 42 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 42 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 42 and token UNEQ resolved as reduce (%left UNEQ).
    Conflict between rule 42 and token SEQ resolved as reduce (%left SEQ).
    Conflict between rule 42 and token '>' resolved as reduce (%left '>').
    Conflict between rule 42 and token '<' resolved as reduce (%left '<').


State 190

   48 arithmetic_expr: . basic_expr
   49                | . func_call
   50                | . arithmetic_expr '+' arithmetic_expr
   51                | . arithmetic_expr '-' arithmetic_expr
   52                | . arithmetic_expr '*' arithmetic_expr
   53                | . arithmetic_expr '/' arithmetic_expr
   54                | . arithmetic_expr '%' arithmetic_expr
   55                | . arithmetic_expr OP_POWER arithmetic_expr
   56                | . '(' arithmetic_expr ')'
   56                | '(' . arithmetic_expr ')'
   57 basic_expr: . IDENTIFIER
   58           | . INTEGER
   59           | . REAL
   60           | . '+' basic_expr
   61           | . '-' basic_expr
   74 func_call: . IDENTIFIER '(' function_expr ')'

    IDENTIFIER  shift, and go to state 124
    REAL        shift, and go to state 50
    INTEGER     shift, and go to state 51
    '+'         shift, and go to state 54
    '-'         shift, and go to state 55
    '('         shift, and go to state 190

    arithmetic_expr  go to state 211
    basic_expr       go to state 129
    func_call        go to state 132


State 191

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr
   55                | arithmetic_expr OP_POWER arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', '*', '/', '%', ')', '}', ';', ',', '[']

    OP_POWER  shift, and go to state 164

    $default  reduce using rule 55 (arithmetic_expr)

    Conflict between rule 55 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 55 and token '+' resolved as reduce ('+' < OP_POWER).
    Conflict between rule 55 and token '-' resolved as reduce ('-' < OP_POWER).
    Conflict between rule 55 and token '*' resolved as reduce ('*' < OP_POWER).
    Conflict between rule 55 and token '/' resolved as reduce ('/' < OP_POWER).
    Conflict between rule 55 and token '%' resolved as reduce ('%' < OP_POWER).


State 192

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   50                | arithmetic_expr '+' arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', ')', '}', ';', ',', '[']
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr

    OP_POWER  shift, and go to state 164
    '*'       shift, and go to state 167
    '/'       shift, and go to state 168
    '%'       shift, and go to state 169

    $default  reduce using rule 50 (arithmetic_expr)

    Conflict between rule 50 and token OP_POWER resolved as shift ('+' < OP_POWER).
    Conflict between rule 50 and token '+' resolved as reduce (%left '+').
    Conflict between rule 50 and token '-' resolved as reduce (%left '-').
    Conflict between rule 50 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 50 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 50 and token '%' resolved as shift ('+' < '%').


State 193

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   51                | arithmetic_expr '-' arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', ')', '}', ';', ',', '[']
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr

    OP_POWER  shift, and go to state 164
    '*'       shift, and go to state 167
    '/'       shift, and go to state 168
    '%'       shift, and go to state 169

    $default  reduce using rule 51 (arithmetic_expr)

    Conflict between rule 51 and token OP_POWER resolved as shift ('-' < OP_POWER).
    Conflict between rule 51 and token '+' resolved as reduce (%left '+').
    Conflict between rule 51 and token '-' resolved as reduce (%left '-').
    Conflict between rule 51 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 51 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 51 and token '%' resolved as shift ('-' < '%').


State 194

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   52                | arithmetic_expr '*' arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', '*', '/', '%', ')', '}', ';', ',', '[']
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr

    OP_POWER  shift, and go to state 164

    $default  reduce using rule 52 (arithmetic_expr)

    Conflict between rule 52 and token OP_POWER resolved as shift ('*' < OP_POWER).
    Conflict between rule 52 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 52 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 52 and token '*' resolved as reduce (%left '*').
    Conflict between rule 52 and token '/' resolved as reduce (%left '/').
    Conflict between rule 52 and token '%' resolved as reduce (%left '%').


State 195

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   53                | arithmetic_expr '/' arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', '*', '/', '%', ')', '}', ';', ',', '[']
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr

    OP_POWER  shift, and go to state 164

    $default  reduce using rule 53 (arithmetic_expr)

    Conflict between rule 53 and token OP_POWER resolved as shift ('/' < OP_POWER).
    Conflict between rule 53 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 53 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 53 and token '*' resolved as reduce (%left '*').
    Conflict between rule 53 and token '/' resolved as reduce (%left '/').
    Conflict between rule 53 and token '%' resolved as reduce (%left '%').


State 196

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   54                | arithmetic_expr '%' arithmetic_expr .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_ELSE, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_AND, KW_OR, KW_RETURN, KW_FOR, EQ, GEQ, UNEQ, SEQ, '>', '<', '+', '-', '*', '/', '%', ')', '}', ';', ',', '[']
   55                | arithmetic_expr . OP_POWER arithmetic_expr

    OP_POWER  shift, and go to state 164

    $default  reduce using rule 54 (arithmetic_expr)

    Conflict between rule 54 and token OP_POWER resolved as shift ('%' < OP_POWER).
    Conflict between rule 54 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 54 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 54 and token '*' resolved as reduce (%left '*').
    Conflict between rule 54 and token '/' resolved as reduce (%left '/').
    Conflict between rule 54 and token '%' resolved as reduce (%left '%').


State 197

   39 logical_expr: logical_expr . EQ logical_expr
   40             | logical_expr . '>' logical_expr
   41             | logical_expr . GEQ logical_expr
   42             | logical_expr . '<' logical_expr
   43             | logical_expr . SEQ logical_expr
   44             | logical_expr . UNEQ logical_expr
   46             | logical_expr . KW_AND logical_expr
   47             | logical_expr . KW_OR logical_expr
   72 function_expr: function_expr ',' logical_expr .  [')', ',']

    KW_AND  shift, and go to state 156
    KW_OR   shift, and go to state 157
    EQ      shift, and go to state 158
    GEQ     shift, and go to state 159
    UNEQ    shift, and go to state 160
    SEQ     shift, and go to state 161
    '>'     shift, and go to state 162
    '<'     shift, and go to state 163

    $default  reduce using rule 72 (function_expr)


State 198

   71 function_expr: function_expr ',' expr .

    $default  reduce using rule 71 (function_expr)


State 199

  102 if_command: KW_IF '(' if_expr ')' KW_BREAK . ';'
  107           | KW_IF '(' if_expr ')' KW_BREAK . ';' else_command

    ';'  shift, and go to state 212


State 200

  103 if_command: KW_IF '(' if_expr ')' KW_CONTINUE . ';'
  108           | KW_IF '(' if_expr ')' KW_CONTINUE . ';' else_command

    ';'  shift, and go to state 213


State 201

   85 complex_commands: . %empty
   86                 | . complex_commands decl_var
   87                 | . complex_commands decl_const
   88                 | . complex_commands assignement
   89                 | . complex_commands KW_BREAK ';'
   90                 | . complex_commands KW_CONTINUE ';'
   91                 | . complex_commands if_command
   92                 | . complex_commands for_command
   93                 | . complex_commands while_command
   94                 | . complex_commands func_call ';'
   99 if_command: KW_IF '(' if_expr ')' '{' . complex_commands '}' ';'
  104           | KW_IF '(' if_expr ')' '{' . complex_commands '}' ';' else_command

    $default  reduce using rule 85 (complex_commands)

    complex_commands  go to state 214


State 202

  100 if_command: KW_IF '(' if_expr ')' assignement .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_RETURN, KW_FOR, '}', '[']
  105           | KW_IF '(' if_expr ')' assignement . else_command
  109 else_command: . KW_ELSE assignement ';'
  110             | . KW_ELSE func_call
  111             | . KW_ELSE '{' complex_commands '}' ';'
  112             | . KW_ELSE KW_BREAK ';'
  113             | . KW_ELSE KW_CONTINUE ';'
  114             | . KW_ELSE if_command

    KW_ELSE  shift, and go to state 215

    $default  reduce using rule 100 (if_command)

    else_command  go to state 216


State 203

  101 if_command: KW_IF '(' if_expr ')' func_call .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_RETURN, KW_FOR, '}', '[']
  106           | KW_IF '(' if_expr ')' func_call . else_command
  109 else_command: . KW_ELSE assignement ';'
  110             | . KW_ELSE func_call
  111             | . KW_ELSE '{' complex_commands '}' ';'
  112             | . KW_ELSE KW_BREAK ';'
  113             | . KW_ELSE KW_CONTINUE ';'
  114             | . KW_ELSE if_command

    KW_ELSE  shift, and go to state 215

    $default  reduce using rule 101 (if_command)

    else_command  go to state 217


State 204

  129 while_command: KW_WHILE '(' if_expr ')' KW_BREAK . ';'

    ';'  shift, and go to state 218


State 205

  128 while_command: KW_WHILE '(' if_expr ')' KW_CONTINUE . ';'

    ';'  shift, and go to state 219


State 206

   85 complex_commands: . %empty
   86                 | . complex_commands decl_var
   87                 | . complex_commands decl_const
   88                 | . complex_commands assignement
   89                 | . complex_commands KW_BREAK ';'
   90                 | . complex_commands KW_CONTINUE ';'
   91                 | . complex_commands if_command
   92                 | . complex_commands for_command
   93                 | . complex_commands while_command
   94                 | . complex_commands func_call ';'
  125 while_command: KW_WHILE '(' if_expr ')' '{' . complex_commands '}' ';'

    $default  reduce using rule 85 (complex_commands)

    complex_commands  go to state 220


State 207

  126 while_command: KW_WHILE '(' if_expr ')' assignement . ';'

    ';'  shift, and go to state 221


State 208

  127 while_command: KW_WHILE '(' if_expr ')' func_call . ';'

    ';'  shift, and go to state 222


State 209

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
  120 for_command: KW_FOR '(' assignement ';' ';' . assignement ')' '{' complex_commands '}'
  121            | KW_FOR '(' assignement ';' ';' . assignement ')' assignement ';'
  122            | KW_FOR '(' assignement ';' ';' . assignement ')' func_call ';'
  123            | KW_FOR '(' assignement ';' ';' . assignement ')' KW_BREAK ';'
  124            | KW_FOR '(' assignement ';' ';' . assignement ')' KW_CONTINUE ';'

    IDENTIFIER  shift, and go to state 142
    '['         shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 223


State 210

  115 for_command: KW_FOR '(' assignement ';' if_expr . ';' assignement ')' '{' complex_commands '}'
  116            | KW_FOR '(' assignement ';' if_expr . ';' assignement ')' assignement ';'
  117            | KW_FOR '(' assignement ';' if_expr . ';' assignement ')' func_call ';'
  118            | KW_FOR '(' assignement ';' if_expr . ';' assignement ')' KW_BREAK ';'
  119            | KW_FOR '(' assignement ';' if_expr . ';' assignement ')' KW_CONTINUE ';'

    ';'  shift, and go to state 224


State 211

   50 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   51                | arithmetic_expr . '-' arithmetic_expr
   52                | arithmetic_expr . '*' arithmetic_expr
   53                | arithmetic_expr . '/' arithmetic_expr
   54                | arithmetic_expr . '%' arithmetic_expr
   55                | arithmetic_expr . OP_POWER arithmetic_expr
   56                | '(' arithmetic_expr . ')'

    OP_POWER  shift, and go to state 164
    '+'       shift, and go to state 165
    '-'       shift, and go to state 166
    '*'       shift, and go to state 167
    '/'       shift, and go to state 168
    '%'       shift, and go to state 169
    ')'       shift, and go to state 181


State 212

  102 if_command: KW_IF '(' if_expr ')' KW_BREAK ';' .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_RETURN, KW_FOR, '}', '[']
  107           | KW_IF '(' if_expr ')' KW_BREAK ';' . else_command
  109 else_command: . KW_ELSE assignement ';'
  110             | . KW_ELSE func_call
  111             | . KW_ELSE '{' complex_commands '}' ';'
  112             | . KW_ELSE KW_BREAK ';'
  113             | . KW_ELSE KW_CONTINUE ';'
  114             | . KW_ELSE if_command

    KW_ELSE  shift, and go to state 215

    $default  reduce using rule 102 (if_command)

    else_command  go to state 225


State 213

  103 if_command: KW_IF '(' if_expr ')' KW_CONTINUE ';' .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_RETURN, KW_FOR, '}', '[']
  108           | KW_IF '(' if_expr ')' KW_CONTINUE ';' . else_command
  109 else_command: . KW_ELSE assignement ';'
  110             | . KW_ELSE func_call
  111             | . KW_ELSE '{' complex_commands '}' ';'
  112             | . KW_ELSE KW_BREAK ';'
  113             | . KW_ELSE KW_CONTINUE ';'
  114             | . KW_ELSE if_command

    KW_ELSE  shift, and go to state 215

    $default  reduce using rule 103 (if_command)

    else_command  go to state 226


State 214

   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   86 complex_commands: complex_commands . decl_var
   87                 | complex_commands . decl_const
   88                 | complex_commands . assignement
   89                 | complex_commands . KW_BREAK ';'
   90                 | complex_commands . KW_CONTINUE ';'
   91                 | complex_commands . if_command
   92                 | complex_commands . for_command
   93                 | complex_commands . while_command
   94                 | complex_commands . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
   99           | KW_IF '(' if_expr ')' '{' complex_commands . '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  104           | KW_IF '(' if_expr ')' '{' complex_commands . '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER   shift, and go to state 91
    KW_VAR       shift, and go to state 2
    KW_CONST     shift, and go to state 3
    KW_IF        shift, and go to state 92
    KW_WHILE     shift, and go to state 93
    KW_BREAK     shift, and go to state 227
    KW_CONTINUE  shift, and go to state 228
    KW_FOR       shift, and go to state 94
    '}'          shift, and go to state 229
    '['          shift, and go to state 96

    decl_var         go to state 230
    decl_const       go to state 231
    decl_array_item  go to state 99
    assignement      go to state 232
    func_call        go to state 233
    if_command       go to state 234
    for_command      go to state 235
    while_command    go to state 236


State 215

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  109 else_command: KW_ELSE . assignement ';'
  110             | KW_ELSE . func_call
  111             | KW_ELSE . '{' complex_commands '}' ';'
  112             | KW_ELSE . KW_BREAK ';'
  113             | KW_ELSE . KW_CONTINUE ';'
  114             | KW_ELSE . if_command

    IDENTIFIER   shift, and go to state 91
    KW_IF        shift, and go to state 92
    KW_BREAK     shift, and go to state 237
    KW_CONTINUE  shift, and go to state 238
    '{'          shift, and go to state 239
    '['          shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 240
    func_call        go to state 241
    if_command       go to state 242


State 216

  105 if_command: KW_IF '(' if_expr ')' assignement else_command .

    $default  reduce using rule 105 (if_command)


State 217

  106 if_command: KW_IF '(' if_expr ')' func_call else_command .

    $default  reduce using rule 106 (if_command)


State 218

  129 while_command: KW_WHILE '(' if_expr ')' KW_BREAK ';' .

    $default  reduce using rule 129 (while_command)


State 219

  128 while_command: KW_WHILE '(' if_expr ')' KW_CONTINUE ';' .

    $default  reduce using rule 128 (while_command)


State 220

   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   86 complex_commands: complex_commands . decl_var
   87                 | complex_commands . decl_const
   88                 | complex_commands . assignement
   89                 | complex_commands . KW_BREAK ';'
   90                 | complex_commands . KW_CONTINUE ';'
   91                 | complex_commands . if_command
   92                 | complex_commands . for_command
   93                 | complex_commands . while_command
   94                 | complex_commands . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  125              | KW_WHILE '(' if_expr ')' '{' complex_commands . '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER   shift, and go to state 91
    KW_VAR       shift, and go to state 2
    KW_CONST     shift, and go to state 3
    KW_IF        shift, and go to state 92
    KW_WHILE     shift, and go to state 93
    KW_BREAK     shift, and go to state 227
    KW_CONTINUE  shift, and go to state 228
    KW_FOR       shift, and go to state 94
    '}'          shift, and go to state 243
    '['          shift, and go to state 96

    decl_var         go to state 230
    decl_const       go to state 231
    decl_array_item  go to state 99
    assignement      go to state 232
    func_call        go to state 233
    if_command       go to state 234
    for_command      go to state 235
    while_command    go to state 236


State 221

  126 while_command: KW_WHILE '(' if_expr ')' assignement ';' .

    $default  reduce using rule 126 (while_command)


State 222

  127 while_command: KW_WHILE '(' if_expr ')' func_call ';' .

    $default  reduce using rule 127 (while_command)


State 223

  120 for_command: KW_FOR '(' assignement ';' ';' assignement . ')' '{' complex_commands '}'
  121            | KW_FOR '(' assignement ';' ';' assignement . ')' assignement ';'
  122            | KW_FOR '(' assignement ';' ';' assignement . ')' func_call ';'
  123            | KW_FOR '(' assignement ';' ';' assignement . ')' KW_BREAK ';'
  124            | KW_FOR '(' assignement ';' ';' assignement . ')' KW_CONTINUE ';'

    ')'  shift, and go to state 244


State 224

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
  115 for_command: KW_FOR '(' assignement ';' if_expr ';' . assignement ')' '{' complex_commands '}'
  116            | KW_FOR '(' assignement ';' if_expr ';' . assignement ')' assignement ';'
  117            | KW_FOR '(' assignement ';' if_expr ';' . assignement ')' func_call ';'
  118            | KW_FOR '(' assignement ';' if_expr ';' . assignement ')' KW_BREAK ';'
  119            | KW_FOR '(' assignement ';' if_expr ';' . assignement ')' KW_CONTINUE ';'

    IDENTIFIER  shift, and go to state 142
    '['         shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 245


State 225

  107 if_command: KW_IF '(' if_expr ')' KW_BREAK ';' else_command .

    $default  reduce using rule 107 (if_command)


State 226

  108 if_command: KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command .

    $default  reduce using rule 108 (if_command)


State 227

   89 complex_commands: complex_commands KW_BREAK . ';'

    ';'  shift, and go to state 246


State 228

   90 complex_commands: complex_commands KW_CONTINUE . ';'

    ';'  shift, and go to state 247


State 229

   99 if_command: KW_IF '(' if_expr ')' '{' complex_commands '}' . ';'
  104           | KW_IF '(' if_expr ')' '{' complex_commands '}' . ';' else_command

    ';'  shift, and go to state 248


State 230

   86 complex_commands: complex_commands decl_var .

    $default  reduce using rule 86 (complex_commands)


State 231

   87 complex_commands: complex_commands decl_const .

    $default  reduce using rule 87 (complex_commands)


State 232

   88 complex_commands: complex_commands assignement .

    $default  reduce using rule 88 (complex_commands)


State 233

   94 complex_commands: complex_commands func_call . ';'

    ';'  shift, and go to state 249


State 234

   91 complex_commands: complex_commands if_command .

    $default  reduce using rule 91 (complex_commands)


State 235

   92 complex_commands: complex_commands for_command .

    $default  reduce using rule 92 (complex_commands)


State 236

   93 complex_commands: complex_commands while_command .

    $default  reduce using rule 93 (complex_commands)


State 237

  112 else_command: KW_ELSE KW_BREAK . ';'

    ';'  shift, and go to state 250


State 238

  113 else_command: KW_ELSE KW_CONTINUE . ';'

    ';'  shift, and go to state 251


State 239

   85 complex_commands: . %empty
   86                 | . complex_commands decl_var
   87                 | . complex_commands decl_const
   88                 | . complex_commands assignement
   89                 | . complex_commands KW_BREAK ';'
   90                 | . complex_commands KW_CONTINUE ';'
   91                 | . complex_commands if_command
   92                 | . complex_commands for_command
   93                 | . complex_commands while_command
   94                 | . complex_commands func_call ';'
  111 else_command: KW_ELSE '{' . complex_commands '}' ';'

    $default  reduce using rule 85 (complex_commands)

    complex_commands  go to state 252


State 240

  109 else_command: KW_ELSE assignement . ';'

    ';'  shift, and go to state 253


State 241

  110 else_command: KW_ELSE func_call .

    $default  reduce using rule 110 (else_command)


State 242

  114 else_command: KW_ELSE if_command .

    $default  reduce using rule 114 (else_command)


State 243

  125 while_command: KW_WHILE '(' if_expr ')' '{' complex_commands '}' . ';'

    ';'  shift, and go to state 254


State 244

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
  120 for_command: KW_FOR '(' assignement ';' ';' assignement ')' . '{' complex_commands '}'
  121            | KW_FOR '(' assignement ';' ';' assignement ')' . assignement ';'
  122            | KW_FOR '(' assignement ';' ';' assignement ')' . func_call ';'
  123            | KW_FOR '(' assignement ';' ';' assignement ')' . KW_BREAK ';'
  124            | KW_FOR '(' assignement ';' ';' assignement ')' . KW_CONTINUE ';'

    IDENTIFIER   shift, and go to state 91
    KW_BREAK     shift, and go to state 255
    KW_CONTINUE  shift, and go to state 256
    '{'          shift, and go to state 257
    '['          shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 258
    func_call        go to state 259


State 245

  115 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement . ')' '{' complex_commands '}'
  116            | KW_FOR '(' assignement ';' if_expr ';' assignement . ')' assignement ';'
  117            | KW_FOR '(' assignement ';' if_expr ';' assignement . ')' func_call ';'
  118            | KW_FOR '(' assignement ';' if_expr ';' assignement . ')' KW_BREAK ';'
  119            | KW_FOR '(' assignement ';' if_expr ';' assignement . ')' KW_CONTINUE ';'

    ')'  shift, and go to state 260


State 246

   89 complex_commands: complex_commands KW_BREAK ';' .

    $default  reduce using rule 89 (complex_commands)


State 247

   90 complex_commands: complex_commands KW_CONTINUE ';' .

    $default  reduce using rule 90 (complex_commands)


State 248

   99 if_command: KW_IF '(' if_expr ')' '{' complex_commands '}' ';' .  [IDENTIFIER, KW_VAR, KW_CONST, KW_IF, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_RETURN, KW_FOR, '}', '[']
  104           | KW_IF '(' if_expr ')' '{' complex_commands '}' ';' . else_command
  109 else_command: . KW_ELSE assignement ';'
  110             | . KW_ELSE func_call
  111             | . KW_ELSE '{' complex_commands '}' ';'
  112             | . KW_ELSE KW_BREAK ';'
  113             | . KW_ELSE KW_CONTINUE ';'
  114             | . KW_ELSE if_command

    KW_ELSE  shift, and go to state 215

    $default  reduce using rule 99 (if_command)

    else_command  go to state 261


State 249

   94 complex_commands: complex_commands func_call ';' .

    $default  reduce using rule 94 (complex_commands)


State 250

  112 else_command: KW_ELSE KW_BREAK ';' .

    $default  reduce using rule 112 (else_command)


State 251

  113 else_command: KW_ELSE KW_CONTINUE ';' .

    $default  reduce using rule 113 (else_command)


State 252

   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   86 complex_commands: complex_commands . decl_var
   87                 | complex_commands . decl_const
   88                 | complex_commands . assignement
   89                 | complex_commands . KW_BREAK ';'
   90                 | complex_commands . KW_CONTINUE ';'
   91                 | complex_commands . if_command
   92                 | complex_commands . for_command
   93                 | complex_commands . while_command
   94                 | complex_commands . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  111 else_command: KW_ELSE '{' complex_commands . '}' ';'
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER   shift, and go to state 91
    KW_VAR       shift, and go to state 2
    KW_CONST     shift, and go to state 3
    KW_IF        shift, and go to state 92
    KW_WHILE     shift, and go to state 93
    KW_BREAK     shift, and go to state 227
    KW_CONTINUE  shift, and go to state 228
    KW_FOR       shift, and go to state 94
    '}'          shift, and go to state 262
    '['          shift, and go to state 96

    decl_var         go to state 230
    decl_const       go to state 231
    decl_array_item  go to state 99
    assignement      go to state 232
    func_call        go to state 233
    if_command       go to state 234
    for_command      go to state 235
    while_command    go to state 236


State 253

  109 else_command: KW_ELSE assignement ';' .

    $default  reduce using rule 109 (else_command)


State 254

  125 while_command: KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';' .

    $default  reduce using rule 125 (while_command)


State 255

  123 for_command: KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK . ';'

    ';'  shift, and go to state 263


State 256

  124 for_command: KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE . ';'

    ';'  shift, and go to state 264


State 257

   85 complex_commands: . %empty
   86                 | . complex_commands decl_var
   87                 | . complex_commands decl_const
   88                 | . complex_commands assignement
   89                 | . complex_commands KW_BREAK ';'
   90                 | . complex_commands KW_CONTINUE ';'
   91                 | . complex_commands if_command
   92                 | . complex_commands for_command
   93                 | . complex_commands while_command
   94                 | . complex_commands func_call ';'
  120 for_command: KW_FOR '(' assignement ';' ';' assignement ')' '{' . complex_commands '}'

    $default  reduce using rule 85 (complex_commands)

    complex_commands  go to state 265


State 258

  121 for_command: KW_FOR '(' assignement ';' ';' assignement ')' assignement . ';'

    ';'  shift, and go to state 266


State 259

  122 for_command: KW_FOR '(' assignement ';' ';' assignement ')' func_call . ';'

    ';'  shift, and go to state 267


State 260

   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
  115 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' . '{' complex_commands '}'
  116            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' . assignement ';'
  117            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' . func_call ';'
  118            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' . KW_BREAK ';'
  119            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' . KW_CONTINUE ';'

    IDENTIFIER   shift, and go to state 91
    KW_BREAK     shift, and go to state 268
    KW_CONTINUE  shift, and go to state 269
    '{'          shift, and go to state 270
    '['          shift, and go to state 96

    decl_array_item  go to state 99
    assignement      go to state 271
    func_call        go to state 272


State 261

  104 if_command: KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command .

    $default  reduce using rule 104 (if_command)


State 262

  111 else_command: KW_ELSE '{' complex_commands '}' . ';'

    ';'  shift, and go to state 273


State 263

  123 for_command: KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';' .

    $default  reduce using rule 123 (for_command)


State 264

  124 for_command: KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';' .

    $default  reduce using rule 124 (for_command)


State 265

   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   86 complex_commands: complex_commands . decl_var
   87                 | complex_commands . decl_const
   88                 | complex_commands . assignement
   89                 | complex_commands . KW_BREAK ';'
   90                 | complex_commands . KW_CONTINUE ';'
   91                 | complex_commands . if_command
   92                 | complex_commands . for_command
   93                 | complex_commands . while_command
   94                 | complex_commands . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  120            | KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands . '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER   shift, and go to state 91
    KW_VAR       shift, and go to state 2
    KW_CONST     shift, and go to state 3
    KW_IF        shift, and go to state 92
    KW_WHILE     shift, and go to state 93
    KW_BREAK     shift, and go to state 227
    KW_CONTINUE  shift, and go to state 228
    KW_FOR       shift, and go to state 94
    '}'          shift, and go to state 274
    '['          shift, and go to state 96

    decl_var         go to state 230
    decl_const       go to state 231
    decl_array_item  go to state 99
    assignement      go to state 232
    func_call        go to state 233
    if_command       go to state 234
    for_command      go to state 235
    while_command    go to state 236


State 266

  121 for_command: KW_FOR '(' assignement ';' ';' assignement ')' assignement ';' .

    $default  reduce using rule 121 (for_command)


State 267

  122 for_command: KW_FOR '(' assignement ';' ';' assignement ')' func_call ';' .

    $default  reduce using rule 122 (for_command)


State 268

  118 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK . ';'

    ';'  shift, and go to state 275


State 269

  119 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE . ';'

    ';'  shift, and go to state 276


State 270

   85 complex_commands: . %empty
   86                 | . complex_commands decl_var
   87                 | . complex_commands decl_const
   88                 | . complex_commands assignement
   89                 | . complex_commands KW_BREAK ';'
   90                 | . complex_commands KW_CONTINUE ';'
   91                 | . complex_commands if_command
   92                 | . complex_commands for_command
   93                 | . complex_commands while_command
   94                 | . complex_commands func_call ';'
  115 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' . complex_commands '}'

    $default  reduce using rule 85 (complex_commands)

    complex_commands  go to state 277


State 271

  116 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement . ';'

    ';'  shift, and go to state 278


State 272

  117 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call . ';'

    ';'  shift, and go to state 279


State 273

  111 else_command: KW_ELSE '{' complex_commands '}' ';' .

    $default  reduce using rule 111 (else_command)


State 274

  120 for_command: KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}' .

    $default  reduce using rule 120 (for_command)


State 275

  118 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';' .

    $default  reduce using rule 118 (for_command)


State 276

  119 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';' .

    $default  reduce using rule 119 (for_command)


State 277

   10 decl_var: . KW_VAR decl_var_list data_type ';'
   17 decl_const: . KW_CONST decl_const_list data_type ';'
   25 decl_array_item: . '[' INTEGER ']' IDENTIFIER
   65 assignement: . IDENTIFIER '=' logical_expr ';'
   66            | . IDENTIFIER '=' expr ';'
   67            | . decl_array_item '=' logical_expr
   68            | . decl_array_item '=' expr
   74 func_call: . IDENTIFIER '(' function_expr ')'
   86 complex_commands: complex_commands . decl_var
   87                 | complex_commands . decl_const
   88                 | complex_commands . assignement
   89                 | complex_commands . KW_BREAK ';'
   90                 | complex_commands . KW_CONTINUE ';'
   91                 | complex_commands . if_command
   92                 | complex_commands . for_command
   93                 | complex_commands . while_command
   94                 | complex_commands . func_call ';'
   99 if_command: . KW_IF '(' if_expr ')' '{' complex_commands '}' ';'
  100           | . KW_IF '(' if_expr ')' assignement
  101           | . KW_IF '(' if_expr ')' func_call
  102           | . KW_IF '(' if_expr ')' KW_BREAK ';'
  103           | . KW_IF '(' if_expr ')' KW_CONTINUE ';'
  104           | . KW_IF '(' if_expr ')' '{' complex_commands '}' ';' else_command
  105           | . KW_IF '(' if_expr ')' assignement else_command
  106           | . KW_IF '(' if_expr ')' func_call else_command
  107           | . KW_IF '(' if_expr ')' KW_BREAK ';' else_command
  108           | . KW_IF '(' if_expr ')' KW_CONTINUE ';' else_command
  115 for_command: . KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}'
  115            | KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands . '}'
  116            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';'
  117            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';'
  118            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_BREAK ';'
  119            | . KW_FOR '(' assignement ';' if_expr ';' assignement ')' KW_CONTINUE ';'
  120            | . KW_FOR '(' assignement ';' ';' assignement ')' '{' complex_commands '}'
  121            | . KW_FOR '(' assignement ';' ';' assignement ')' assignement ';'
  122            | . KW_FOR '(' assignement ';' ';' assignement ')' func_call ';'
  123            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_BREAK ';'
  124            | . KW_FOR '(' assignement ';' ';' assignement ')' KW_CONTINUE ';'
  125 while_command: . KW_WHILE '(' if_expr ')' '{' complex_commands '}' ';'
  126              | . KW_WHILE '(' if_expr ')' assignement ';'
  127              | . KW_WHILE '(' if_expr ')' func_call ';'
  128              | . KW_WHILE '(' if_expr ')' KW_CONTINUE ';'
  129              | . KW_WHILE '(' if_expr ')' KW_BREAK ';'

    IDENTIFIER   shift, and go to state 91
    KW_VAR       shift, and go to state 2
    KW_CONST     shift, and go to state 3
    KW_IF        shift, and go to state 92
    KW_WHILE     shift, and go to state 93
    KW_BREAK     shift, and go to state 227
    KW_CONTINUE  shift, and go to state 228
    KW_FOR       shift, and go to state 94
    '}'          shift, and go to state 280
    '['          shift, and go to state 96

    decl_var         go to state 230
    decl_const       go to state 231
    decl_array_item  go to state 99
    assignement      go to state 232
    func_call        go to state 233
    if_command       go to state 234
    for_command      go to state 235
    while_command    go to state 236


State 278

  116 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' assignement ';' .

    $default  reduce using rule 116 (for_command)


State 279

  117 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' func_call ';' .

    $default  reduce using rule 117 (for_command)


State 280

  115 for_command: KW_FOR '(' assignement ';' if_expr ';' assignement ')' '{' complex_commands '}' .

    $default  reduce using rule 115 (for_command)
