Terminals unused in grammar

    END_OF_FILE


State 41 conflicts: 1 shift/reduce
State 199 conflicts: 1 shift/reduce
State 282 conflicts: 3 reduce/reduce
State 284 conflicts: 3 reduce/reduce
State 290 conflicts: 1 shift/reduce
State 332 conflicts: 3 reduce/reduce
State 334 conflicts: 3 reduce/reduce
State 335 conflicts: 3 reduce/reduce
State 336 conflicts: 3 reduce/reduce
State 337 conflicts: 3 reduce/reduce
State 348 conflicts: 3 reduce/reduce
State 350 conflicts: 3 reduce/reduce
State 363 conflicts: 3 reduce/reduce
State 377 conflicts: 3 reduce/reduce


Grammar

    0 $accept: begin $end

    1 begin: programm main
    2      | main

    3 programm: external_declaration
    4         | programm external_declaration

    5 main: KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON

    6 external_declaration: var_declaration SEMICOLON
    7                     | function_declaration SEMICOLON

    8 body: %empty
    9     | body var_declaration SEMICOLON
   10     | body equation SEMICOLON
   11     | body operation SEMICOLON
   12     | body KW_RETURN operation SEMICOLON
   13     | body KW_RETURN SEMICOLON
   14     | body loop

   15 IDs: IDENTIFIER
   16    | IDs COMMA IDENTIFIER

   17 ARRAYIDs: IDENTIFIER LBRACKET operation RBRACKET
   18         | ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET

   19 POINTERIDs: IDENTIFIER LBRACKET RBRACKET
   20           | POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET

   21 var_type: KW_INTEGER
   22         | KW_SCALAR
   23         | KW_STR
   24         | KW_BOOLEAN
   25         | IDENTIFIER

   26 var_declaration: IDs DECLARE var_type
   27                | ARRAYIDs DECLARE var_type
   28                | POINTERIDs DECLARE var_type
   29                | KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP

   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE body KW_ENDDEF

   35 comp: comp_variable_declaration SEMICOLON
   36     | comp_function_declaration SEMICOLON
   37     | comp comp_variable_declaration SEMICOLON
   38     | comp comp_function_declaration SEMICOLON

   39 comp_variable_declaration: compIDs DECLARE comp_var_type
   40                          | compARRAYIDs DECLARE comp_var_type
   41                          | compPOINTERIDs DECLARE comp_var_type
   42                          | KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | IDs DECLARE var_type

   46 compIDs: HASHTAG IDENTIFIER
   47        | compIDs COMMA HASHTAG IDENTIFIER

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET

   50 compPOINTERIDs: HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF

   54 compbody: %empty
   55         | compbody comp_variable_declaration SEMICOLON
   56         | compbody equation SEMICOLON
   57         | compbody operation SEMICOLON
   58         | compbody KW_RETURN operation SEMICOLON
   59         | compbody KW_RETURN SEMICOLON
   60         | compbody comp_loop

   61 plus_arguments: %empty
   62               | comp_function_arguments

   63 comp_function_arguments: IDENTIFIER DECLARE var_type
   64                        | comp_function_arguments COMMA IDENTIFIER DECLARE var_type

   65 args: %empty
   66     | function_decl_arguments

   67 function_decl_arguments: var_declaration
   68                        | function_decl_arguments COMMA var_declaration

   69 function_arguments: %empty
   70                   | operation
   71                   | function_arguments COMMA operation

   72 function_call: IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

   73 operation: ID_access
   74          | CONST_INT
   75          | CONST_SCALAR
   76          | function_call
   77          | KW_TRUE
   78          | KW_FALSE
   79          | CONST_STRING
   80          | LPARENTHESIS operation RPARENTHESIS
   81          | LBRACKET operation RBRACKET
   82          | operation POWER_OP operation
   83          | PLUS_OP operation
   84          | MINUS_OP operation
   85          | operation MULTIPLY_OP operation
   86          | operation DIVIDE_OP operation
   87          | operation MODULO_OP operation
   88          | operation PLUS_OP operation
   89          | operation MINUS_OP operation
   90          | operation EQ_SIGN operation
   91          | operation NOTEQ_SIGN operation
   92          | operation LT_SIGN operation
   93          | operation LTEQ_SIGN operation
   94          | operation GT_SIGN operation
   95          | operation GTEQ_SIGN operation
   96          | operation KW_OR operation
   97          | operation KW_AND operation
   98          | KW_NOT operation

   99 ID_access: IDENTIFIER
  100          | IDENTIFIER LBRACKET operation RBRACKET
  101          | IDENTIFIER ACCESS IDENTIFIER
  102          | IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | IDENTIFIER ACCESS function_call
  104          | HASHTAG IDENTIFIER
  105          | HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | ID_access ACCESS IDENTIFIER
  107          | ID_access ACCESS HASHTAG IDENTIFIER
  108          | ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

  109 equation: ID_access ASSIGN operation
  110         | ID_access PLUS_ASSIGN operation
  111         | ID_access MINUS_ASSIGN operation
  112         | ID_access MULTIPLY_ASSIGN operation
  113         | ID_access DIVIDE_ASSIGN operation
  114         | ID_access MODULO_ASSIGN operation

  115 comp_var_type: KW_INTEGER
  116              | KW_SCALAR
  117              | KW_STR
  118              | KW_BOOLEAN
  119              | IDENTIFIER

  120 loop_body: %empty
  121          | loop_body KW_BREAK SEMICOLON
  122          | loop_body KW_CONTINUE SEMICOLON
  123          | body var_declaration SEMICOLON
  124          | body equation SEMICOLON
  125          | body operation SEMICOLON
  126          | body KW_RETURN operation SEMICOLON
  127          | body KW_RETURN SEMICOLON
  128          | loop_body loop

  129 comp_loop_body: %empty
  130               | comp_loop_body KW_BREAK SEMICOLON
  131               | comp_loop_body KW_CONTINUE SEMICOLON
  132               | comp_loop_body comp_variable_declaration SEMICOLON
  133               | comp_loop_body equation SEMICOLON
  134               | comp_loop_body operation SEMICOLON
  135               | comp_loop_body KW_RETURN operation SEMICOLON
  136               | comp_loop_body KW_RETURN SEMICOLON
  137               | comp_loop_body comp_loop

  138 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF

  140 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF

  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

  146 while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON

  147 comp_while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON

  148 loop: if_statement
  149     | for_loop
  150     | while_loop

  151 comp_loop: comp_if_statement
  152          | comp_for_loop
  153          | comp_while_loop


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_INTEGER (258) 21 115
    KW_SCALAR (259) 22 116
    KW_STR (260) 23 117
    KW_BOOLEAN (261) 24 118
    KW_TRUE (262) 77
    KW_FALSE (263) 78
    KW_CONST (264) 29 30 31 42 43 44
    KW_IF (265) 138 139 140 141
    KW_ELSE (266) 139 141
    KW_ENDIF (267) 138 139 140 141
    KW_FOR (268) 142 143 144 145
    KW_IN (269) 142 143 144 145
    KW_ENDFOR (270) 142 143 144 145
    KW_WHILE (271) 146 147
    KW_ENDWHILE (272) 146 147
    KW_BREAK (273) 121 130
    KW_CONTINUE (274) 122 131
    KW_NOT (275) 98
    KW_AND (276) 97
    KW_OR (277) 96
    KW_DEF (278) 5 33 34 52 53
    KW_MAIN (279) 5
    KW_RETURN (280) 12 13 58 59 126 127 135 136
    KW_ENDDEF (281) 5 33 34 52 53
    KW_COMP (282) 32
    KW_ENDCOMP (283) 32
    IDENTIFIER <str> (284) 15 16 17 18 19 20 25 32 33 34 46 47 48 49 50 51 52 53 63 64 72 99 100 101 102 103 104 105 106 107 108 119 142 143 144 145
    CONST_INT <str> (285) 74
    CONST_SCALAR <str> (286) 75
    CONST_STRING <str> (287) 79
    PLUS_OP (288) 83 88
    MINUS_OP (289) 84 89
    MULTIPLY_OP (290) 85
    DIVIDE_OP (291) 86
    MODULO_OP (292) 87
    POWER_OP (293) 82
    EQ_SIGN (294) 90
    NOTEQ_SIGN (295) 91
    LT_SIGN (296) 92
    LTEQ_SIGN (297) 93
    GT_SIGN (298) 94
    GTEQ_SIGN (299) 95
    ASSIGN (300) 29 30 31 42 43 44 109
    COMMA (301) 16 18 20 47 49 51 64 68 71
    LBRACKET (302) 17 18 19 20 48 49 50 51 81 100 105 142 143 144 145
    RBRACKET (303) 17 18 19 20 48 49 50 51 81 100 105 142 143 144 145
    DECLARE (304) 5 26 27 28 29 30 31 32 33 34 39 40 41 42 43 44 45 52 53 63 64 138 139 140 141 142 143 144 145 146 147
    ACCESS (305) 101 102 103 106 107 108
    SEMICOLON (306) 5 6 7 9 10 11 12 13 35 36 37 38 55 56 57 58 59 121 122 123 124 125 126 127 130 131 132 133 134 135 136 138 140 142 143 144 145 146 147
    LPARENTHESIS (307) 5 33 34 52 53 72 80 108 138 139 140 141 146 147
    RPARENTHESIS (308) 5 33 34 52 53 72 80 108 138 139 140 141 146 147
    HASHTAG (309) 46 47 48 49 50 51 102 104 105 107
    LARROW (310) 33 52
    PLUS_ASSIGN (311) 110
    MINUS_ASSIGN (312) 111
    MULTIPLY_ASSIGN (313) 112
    DIVIDE_ASSIGN (314) 113
    MODULO_ASSIGN (315) 114
    END_OF_FILE (316)
    NEGATIVE (317)


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    begin (64)
        on left: 1 2
        on right: 0
    programm <str> (65)
        on left: 3 4
        on right: 1 4
    main <str> (66)
        on left: 5
        on right: 1 2
    external_declaration <str> (67)
        on left: 6 7
        on right: 3 4
    body <str> (68)
        on left: 8 9 10 11 12 13 14
        on right: 5 9 10 11 12 13 14 33 34 123 124 125 126 127
    IDs <str> (69)
        on left: 15 16
        on right: 16 26 29 45
    ARRAYIDs <str> (70)
        on left: 17 18
        on right: 18 27 30
    POINTERIDs <str> (71)
        on left: 19 20
        on right: 20 28 31
    var_type <str> (72)
        on left: 21 22 23 24 25
        on right: 26 27 28 29 30 31 33 45 52 63 64
    var_declaration <str> (73)
        on left: 26 27 28 29 30 31 32
        on right: 6 9 67 68 123
    function_declaration <str> (74)
        on left: 33 34
        on right: 7
    comp <str> (75)
        on left: 35 36 37 38
        on right: 32 37 38
    comp_variable_declaration <str> (76)
        on left: 39 40 41 42 43 44 45
        on right: 35 37 55 132
    compIDs <str> (77)
        on left: 46 47
        on right: 39 42 47
    compARRAYIDs <str> (78)
        on left: 48 49
        on right: 40 43 49
    compPOINTERIDs <str> (79)
        on left: 50 51
        on right: 41 44 51
    comp_function_declaration <str> (80)
        on left: 52 53
        on right: 36 38
    compbody <str> (81)
        on left: 54 55 56 57 58 59 60
        on right: 52 53 55 56 57 58 59 60
    plus_arguments <str> (82)
        on left: 61 62
        on right: 52 53
    comp_function_arguments <str> (83)
        on left: 63 64
        on right: 62 64
    args <str> (84)
        on left: 65 66
        on right: 33 34
    function_decl_arguments <str> (85)
        on left: 67 68
        on right: 66 68
    function_arguments <str> (86)
        on left: 69 70 71
        on right: 71 72 108
    function_call <str> (87)
        on left: 72
        on right: 76 103
    operation <str> (88)
        on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
        on right: 11 12 17 18 29 30 31 42 43 44 48 49 57 58 70 71 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 100 105 109 110 111 112 113 114 125 126 134 135 138 139 140 141 142 143 144 145 146 147
    ID_access <str> (89)
        on left: 99 100 101 102 103 104 105 106 107 108
        on right: 73 106 107 108 109 110 111 112 113 114
    equation <str> (90)
        on left: 109 110 111 112 113 114
        on right: 10 56 124 133
    comp_var_type <str> (91)
        on left: 115 116 117 118 119
        on right: 39 40 41 42 43 44
    loop_body <str> (92)
        on left: 120 121 122 123 124 125 126 127 128
        on right: 121 122 128 138 139 141 142 143 146
    comp_loop_body <str> (93)
        on left: 129 130 131 132 133 134 135 136 137
        on right: 130 131 132 133 134 135 136 137 140 141 144 145 147
    if_statement <str> (94)
        on left: 138 139
        on right: 148
    comp_if_statement <str> (95)
        on left: 140 141
        on right: 151
    for_loop <str> (96)
        on left: 142 143
        on right: 149
    comp_for_loop <str> (97)
        on left: 144 145
        on right: 152
    while_loop <str> (98)
        on left: 146
        on right: 150
    comp_while_loop <str> (99)
        on left: 147
        on right: 153
    loop <str> (100)
        on left: 148 149 150
        on right: 14 128
    comp_loop <str> (101)
        on left: 151 152 153
        on right: 60 137


State 0

    0 $accept: . begin $end
    1 begin: . programm main
    2      | . main
    3 programm: . external_declaration
    4         | . programm external_declaration
    5 main: . KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON
    6 external_declaration: . var_declaration SEMICOLON
    7                     | . function_declaration SEMICOLON
   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   33 function_declaration: . KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | . KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE body KW_ENDDEF

    KW_CONST    shift, and go to state 1
    KW_DEF      shift, and go to state 2
    KW_COMP     shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    begin                 go to state 5
    programm              go to state 6
    main                  go to state 7
    external_declaration  go to state 8
    IDs                   go to state 9
    ARRAYIDs              go to state 10
    POINTERIDs            go to state 11
    var_declaration       go to state 12
    function_declaration  go to state 13


State 1

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   29 var_declaration: KW_CONST . IDs ASSIGN operation DECLARE var_type
   30                | KW_CONST . ARRAYIDs ASSIGN operation DECLARE var_type
   31                | KW_CONST . POINTERIDs ASSIGN operation DECLARE var_type

    IDENTIFIER  shift, and go to state 4

    IDs         go to state 14
    ARRAYIDs    go to state 15
    POINTERIDs  go to state 16


State 2

    5 main: KW_DEF . KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON
   33 function_declaration: KW_DEF . IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | KW_DEF . IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE body KW_ENDDEF

    KW_MAIN     shift, and go to state 17
    IDENTIFIER  shift, and go to state 18


State 3

   32 var_declaration: KW_COMP . IDENTIFIER DECLARE comp KW_ENDCOMP

    IDENTIFIER  shift, and go to state 19


State 4

   15 IDs: IDENTIFIER .  [ASSIGN, COMMA, DECLARE]
   17 ARRAYIDs: IDENTIFIER . LBRACKET operation RBRACKET
   19 POINTERIDs: IDENTIFIER . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 20

    $default  reduce using rule 15 (IDs)


State 5

    0 $accept: begin . $end

    $end  shift, and go to state 21


State 6

    1 begin: programm . main
    4 programm: programm . external_declaration
    5 main: . KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON
    6 external_declaration: . var_declaration SEMICOLON
    7                     | . function_declaration SEMICOLON
   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   33 function_declaration: . KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | . KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE body KW_ENDDEF

    KW_CONST    shift, and go to state 1
    KW_DEF      shift, and go to state 2
    KW_COMP     shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    main                  go to state 22
    external_declaration  go to state 23
    IDs                   go to state 9
    ARRAYIDs              go to state 10
    POINTERIDs            go to state 11
    var_declaration       go to state 12
    function_declaration  go to state 13


State 7

    2 begin: main .

    $default  reduce using rule 2 (begin)


State 8

    3 programm: external_declaration .

    $default  reduce using rule 3 (programm)


State 9

   16 IDs: IDs . COMMA IDENTIFIER
   26 var_declaration: IDs . DECLARE var_type

    COMMA    shift, and go to state 24
    DECLARE  shift, and go to state 25


State 10

   18 ARRAYIDs: ARRAYIDs . COMMA IDENTIFIER LBRACKET operation RBRACKET
   27 var_declaration: ARRAYIDs . DECLARE var_type

    COMMA    shift, and go to state 26
    DECLARE  shift, and go to state 27


State 11

   20 POINTERIDs: POINTERIDs . COMMA IDENTIFIER LBRACKET RBRACKET
   28 var_declaration: POINTERIDs . DECLARE var_type

    COMMA    shift, and go to state 28
    DECLARE  shift, and go to state 29


State 12

    6 external_declaration: var_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 30


State 13

    7 external_declaration: function_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 31


State 14

   16 IDs: IDs . COMMA IDENTIFIER
   29 var_declaration: KW_CONST IDs . ASSIGN operation DECLARE var_type

    ASSIGN  shift, and go to state 32
    COMMA   shift, and go to state 24


State 15

   18 ARRAYIDs: ARRAYIDs . COMMA IDENTIFIER LBRACKET operation RBRACKET
   30 var_declaration: KW_CONST ARRAYIDs . ASSIGN operation DECLARE var_type

    ASSIGN  shift, and go to state 33
    COMMA   shift, and go to state 26


State 16

   20 POINTERIDs: POINTERIDs . COMMA IDENTIFIER LBRACKET RBRACKET
   31 var_declaration: KW_CONST POINTERIDs . ASSIGN operation DECLARE var_type

    ASSIGN  shift, and go to state 34
    COMMA   shift, and go to state 28


State 17

    5 main: KW_DEF KW_MAIN . LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON

    LPARENTHESIS  shift, and go to state 35


State 18

   33 function_declaration: KW_DEF IDENTIFIER . LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | KW_DEF IDENTIFIER . LPARENTHESIS args RPARENTHESIS DECLARE body KW_ENDDEF

    LPARENTHESIS  shift, and go to state 36


State 19

   32 var_declaration: KW_COMP IDENTIFIER . DECLARE comp KW_ENDCOMP

    DECLARE  shift, and go to state 37


State 20

   17 ARRAYIDs: IDENTIFIER LBRACKET . operation RBRACKET
   19 POINTERIDs: IDENTIFIER LBRACKET . RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    RBRACKET      shift, and go to state 48
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 52
    ID_access      go to state 53


State 21

    0 $accept: begin $end .

    $default  accept


State 22

    1 begin: programm main .

    $default  reduce using rule 1 (begin)


State 23

    4 programm: programm external_declaration .

    $default  reduce using rule 4 (programm)


State 24

   16 IDs: IDs COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 54


State 25

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   26 var_declaration: IDs DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 60


State 26

   18 ARRAYIDs: ARRAYIDs COMMA . IDENTIFIER LBRACKET operation RBRACKET

    IDENTIFIER  shift, and go to state 61


State 27

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   27 var_declaration: ARRAYIDs DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 62


State 28

   20 POINTERIDs: POINTERIDs COMMA . IDENTIFIER LBRACKET RBRACKET

    IDENTIFIER  shift, and go to state 63


State 29

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   28 var_declaration: POINTERIDs DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 64


State 30

    6 external_declaration: var_declaration SEMICOLON .

    $default  reduce using rule 6 (external_declaration)


State 31

    7 external_declaration: function_declaration SEMICOLON .

    $default  reduce using rule 7 (external_declaration)


State 32

   29 var_declaration: KW_CONST IDs ASSIGN . operation DECLARE var_type
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 65
    ID_access      go to state 53


State 33

   30 var_declaration: KW_CONST ARRAYIDs ASSIGN . operation DECLARE var_type
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 66
    ID_access      go to state 53


State 34

   31 var_declaration: KW_CONST POINTERIDs ASSIGN . operation DECLARE var_type
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 67
    ID_access      go to state 53


State 35

    5 main: KW_DEF KW_MAIN LPARENTHESIS . RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON

    RPARENTHESIS  shift, and go to state 68


State 36

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS . args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | KW_DEF IDENTIFIER LPARENTHESIS . args RPARENTHESIS DECLARE body KW_ENDDEF
   65 args: . %empty  [RPARENTHESIS]
   66     | . function_decl_arguments
   67 function_decl_arguments: . var_declaration
   68                        | . function_decl_arguments COMMA var_declaration

    KW_CONST    shift, and go to state 1
    KW_COMP     shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    $default  reduce using rule 65 (args)

    IDs                      go to state 9
    ARRAYIDs                 go to state 10
    POINTERIDs               go to state 11
    var_declaration          go to state 69
    args                     go to state 70
    function_decl_arguments  go to state 71


State 37

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   32 var_declaration: KW_COMP IDENTIFIER DECLARE . comp KW_ENDCOMP
   35 comp: . comp_variable_declaration SEMICOLON
   36     | . comp_function_declaration SEMICOLON
   37     | . comp comp_variable_declaration SEMICOLON
   38     | . comp comp_function_declaration SEMICOLON
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   52 comp_function_declaration: . KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | . KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF

    KW_CONST    shift, and go to state 72
    KW_DEF      shift, and go to state 73
    IDENTIFIER  shift, and go to state 74
    HASHTAG     shift, and go to state 75

    IDs                        go to state 76
    comp                       go to state 77
    comp_variable_declaration  go to state 78
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    comp_function_declaration  go to state 82


State 38

   77 operation: KW_TRUE .

    $default  reduce using rule 77 (operation)


State 39

   78 operation: KW_FALSE .

    $default  reduce using rule 78 (operation)


State 40

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   98          | KW_NOT . operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 83
    ID_access      go to state 53


State 41

   72 function_call: IDENTIFIER . LPARENTHESIS function_arguments RPARENTHESIS
   99 ID_access: IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, ACCESS, SEMICOLON, RPARENTHESIS]
  100          | IDENTIFIER . LBRACKET operation RBRACKET
  101          | IDENTIFIER . ACCESS IDENTIFIER
  102          | IDENTIFIER . ACCESS HASHTAG IDENTIFIER
  103          | IDENTIFIER . ACCESS function_call

    LBRACKET      shift, and go to state 84
    ACCESS        shift, and go to state 85
    LPARENTHESIS  shift, and go to state 86

    ACCESS    [reduce using rule 99 (ID_access)]
    $default  reduce using rule 99 (ID_access)


State 42

   74 operation: CONST_INT .

    $default  reduce using rule 74 (operation)


State 43

   75 operation: CONST_SCALAR .

    $default  reduce using rule 75 (operation)


State 44

   79 operation: CONST_STRING .

    $default  reduce using rule 79 (operation)


State 45

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   83          | PLUS_OP . operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 87
    ID_access      go to state 53


State 46

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   84          | MINUS_OP . operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 88
    ID_access      go to state 53


State 47

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   81          | LBRACKET . operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 89
    ID_access      go to state 53


State 48

   19 POINTERIDs: IDENTIFIER LBRACKET RBRACKET .

    $default  reduce using rule 19 (POINTERIDs)


State 49

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   80          | LPARENTHESIS . operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 90
    ID_access      go to state 53


State 50

  104 ID_access: HASHTAG . IDENTIFIER
  105          | HASHTAG . IDENTIFIER LBRACKET operation RBRACKET

    IDENTIFIER  shift, and go to state 91


State 51

   76 operation: function_call .

    $default  reduce using rule 76 (operation)


State 52

   17 ARRAYIDs: IDENTIFIER LBRACKET operation . RBRACKET
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 106


State 53

   73 operation: ID_access .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
  106 ID_access: ID_access . ACCESS IDENTIFIER
  107          | ID_access . ACCESS HASHTAG IDENTIFIER
  108          | ID_access . ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    ACCESS  shift, and go to state 107

    $default  reduce using rule 73 (operation)


State 54

   16 IDs: IDs COMMA IDENTIFIER .

    $default  reduce using rule 16 (IDs)


State 55

   21 var_type: KW_INTEGER .

    $default  reduce using rule 21 (var_type)


State 56

   22 var_type: KW_SCALAR .

    $default  reduce using rule 22 (var_type)


State 57

   23 var_type: KW_STR .

    $default  reduce using rule 23 (var_type)


State 58

   24 var_type: KW_BOOLEAN .

    $default  reduce using rule 24 (var_type)


State 59

   25 var_type: IDENTIFIER .

    $default  reduce using rule 25 (var_type)


State 60

   26 var_declaration: IDs DECLARE var_type .

    $default  reduce using rule 26 (var_declaration)


State 61

   18 ARRAYIDs: ARRAYIDs COMMA IDENTIFIER . LBRACKET operation RBRACKET

    LBRACKET  shift, and go to state 108


State 62

   27 var_declaration: ARRAYIDs DECLARE var_type .

    $default  reduce using rule 27 (var_declaration)


State 63

   20 POINTERIDs: POINTERIDs COMMA IDENTIFIER . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 109


State 64

   28 var_declaration: POINTERIDs DECLARE var_type .

    $default  reduce using rule 28 (var_declaration)


State 65

   29 var_declaration: KW_CONST IDs ASSIGN operation . DECLARE var_type
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 110


State 66

   30 var_declaration: KW_CONST ARRAYIDs ASSIGN operation . DECLARE var_type
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 111


State 67

   31 var_declaration: KW_CONST POINTERIDs ASSIGN operation . DECLARE var_type
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 112


State 68

    5 main: KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS . DECLARE body KW_ENDDEF SEMICOLON

    DECLARE  shift, and go to state 113


State 69

   67 function_decl_arguments: var_declaration .

    $default  reduce using rule 67 (function_decl_arguments)


State 70

   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args . RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF
   34                     | KW_DEF IDENTIFIER LPARENTHESIS args . RPARENTHESIS DECLARE body KW_ENDDEF

    RPARENTHESIS  shift, and go to state 114


State 71

   66 args: function_decl_arguments .  [RPARENTHESIS]
   68 function_decl_arguments: function_decl_arguments . COMMA var_declaration

    COMMA  shift, and go to state 115

    $default  reduce using rule 66 (args)


State 72

   42 comp_variable_declaration: KW_CONST . compIDs ASSIGN operation DECLARE comp_var_type
   43                          | KW_CONST . compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | KW_CONST . compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET

    HASHTAG  shift, and go to state 75

    compIDs         go to state 116
    compARRAYIDs    go to state 117
    compPOINTERIDs  go to state 118


State 73

   52 comp_function_declaration: KW_DEF . IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | KW_DEF . IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF

    IDENTIFIER  shift, and go to state 119


State 74

   15 IDs: IDENTIFIER .

    $default  reduce using rule 15 (IDs)


State 75

   46 compIDs: HASHTAG . IDENTIFIER
   48 compARRAYIDs: HASHTAG . IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: HASHTAG . IDENTIFIER LBRACKET RBRACKET

    IDENTIFIER  shift, and go to state 120


State 76

   16 IDs: IDs . COMMA IDENTIFIER
   45 comp_variable_declaration: IDs . DECLARE var_type

    COMMA    shift, and go to state 24
    DECLARE  shift, and go to state 121


State 77

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   32 var_declaration: KW_COMP IDENTIFIER DECLARE comp . KW_ENDCOMP
   37 comp: comp . comp_variable_declaration SEMICOLON
   38     | comp . comp_function_declaration SEMICOLON
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   52 comp_function_declaration: . KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | . KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF

    KW_CONST    shift, and go to state 72
    KW_DEF      shift, and go to state 73
    KW_ENDCOMP  shift, and go to state 122
    IDENTIFIER  shift, and go to state 74
    HASHTAG     shift, and go to state 75

    IDs                        go to state 76
    comp_variable_declaration  go to state 123
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    comp_function_declaration  go to state 124


State 78

   35 comp: comp_variable_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 125


State 79

   39 comp_variable_declaration: compIDs . DECLARE comp_var_type
   47 compIDs: compIDs . COMMA HASHTAG IDENTIFIER

    COMMA    shift, and go to state 126
    DECLARE  shift, and go to state 127


State 80

   40 comp_variable_declaration: compARRAYIDs . DECLARE comp_var_type
   49 compARRAYIDs: compARRAYIDs . COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET

    COMMA    shift, and go to state 128
    DECLARE  shift, and go to state 129


State 81

   41 comp_variable_declaration: compPOINTERIDs . DECLARE comp_var_type
   51 compPOINTERIDs: compPOINTERIDs . COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET

    COMMA    shift, and go to state 130
    DECLARE  shift, and go to state 131


State 82

   36 comp: comp_function_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 132


State 83

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
   98          | KW_NOT operation .  [KW_AND, KW_OR, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 98 (operation)

    Conflict between rule 98 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 98 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 98 and token PLUS_OP resolved as shift (KW_NOT < PLUS_OP).
    Conflict between rule 98 and token MINUS_OP resolved as shift (KW_NOT < MINUS_OP).
    Conflict between rule 98 and token MULTIPLY_OP resolved as shift (KW_NOT < MULTIPLY_OP).
    Conflict between rule 98 and token DIVIDE_OP resolved as shift (KW_NOT < DIVIDE_OP).
    Conflict between rule 98 and token MODULO_OP resolved as shift (KW_NOT < MODULO_OP).
    Conflict between rule 98 and token POWER_OP resolved as shift (KW_NOT < POWER_OP).
    Conflict between rule 98 and token EQ_SIGN resolved as shift (KW_NOT < EQ_SIGN).
    Conflict between rule 98 and token NOTEQ_SIGN resolved as shift (KW_NOT < NOTEQ_SIGN).
    Conflict between rule 98 and token LT_SIGN resolved as shift (KW_NOT < LT_SIGN).
    Conflict between rule 98 and token LTEQ_SIGN resolved as shift (KW_NOT < LTEQ_SIGN).
    Conflict between rule 98 and token GT_SIGN resolved as shift (KW_NOT < GT_SIGN).
    Conflict between rule 98 and token GTEQ_SIGN resolved as shift (KW_NOT < GTEQ_SIGN).


State 84

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  100          | IDENTIFIER LBRACKET . operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 133
    ID_access      go to state 53


State 85

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  101 ID_access: IDENTIFIER ACCESS . IDENTIFIER
  102          | IDENTIFIER ACCESS . HASHTAG IDENTIFIER
  103          | IDENTIFIER ACCESS . function_call

    IDENTIFIER  shift, and go to state 134
    HASHTAG     shift, and go to state 135

    function_call  go to state 136


State 86

   69 function_arguments: . %empty  [COMMA, RPARENTHESIS]
   70                   | . operation
   71                   | . function_arguments COMMA operation
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   72              | IDENTIFIER LPARENTHESIS . function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    $default  reduce using rule 69 (function_arguments)

    function_arguments  go to state 137
    function_call       go to state 51
    operation           go to state 138
    ID_access           go to state 53


State 87

   82 operation: operation . POWER_OP operation
   83          | PLUS_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    POWER_OP  shift, and go to state 99

    $default  reduce using rule 83 (operation)

    Conflict between rule 83 and token KW_AND resolved as reduce (KW_AND < NEGATIVE).
    Conflict between rule 83 and token KW_OR resolved as reduce (KW_OR < NEGATIVE).
    Conflict between rule 83 and token PLUS_OP resolved as reduce (PLUS_OP < NEGATIVE).
    Conflict between rule 83 and token MINUS_OP resolved as reduce (MINUS_OP < NEGATIVE).
    Conflict between rule 83 and token MULTIPLY_OP resolved as reduce (MULTIPLY_OP < NEGATIVE).
    Conflict between rule 83 and token DIVIDE_OP resolved as reduce (DIVIDE_OP < NEGATIVE).
    Conflict between rule 83 and token MODULO_OP resolved as reduce (MODULO_OP < NEGATIVE).
    Conflict between rule 83 and token POWER_OP resolved as shift (NEGATIVE < POWER_OP).
    Conflict between rule 83 and token EQ_SIGN resolved as reduce (EQ_SIGN < NEGATIVE).
    Conflict between rule 83 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < NEGATIVE).
    Conflict between rule 83 and token LT_SIGN resolved as reduce (LT_SIGN < NEGATIVE).
    Conflict between rule 83 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < NEGATIVE).
    Conflict between rule 83 and token GT_SIGN resolved as reduce (GT_SIGN < NEGATIVE).
    Conflict between rule 83 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < NEGATIVE).


State 88

   82 operation: operation . POWER_OP operation
   84          | MINUS_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    POWER_OP  shift, and go to state 99

    $default  reduce using rule 84 (operation)

    Conflict between rule 84 and token KW_AND resolved as reduce (KW_AND < NEGATIVE).
    Conflict between rule 84 and token KW_OR resolved as reduce (KW_OR < NEGATIVE).
    Conflict between rule 84 and token PLUS_OP resolved as reduce (PLUS_OP < NEGATIVE).
    Conflict between rule 84 and token MINUS_OP resolved as reduce (MINUS_OP < NEGATIVE).
    Conflict between rule 84 and token MULTIPLY_OP resolved as reduce (MULTIPLY_OP < NEGATIVE).
    Conflict between rule 84 and token DIVIDE_OP resolved as reduce (DIVIDE_OP < NEGATIVE).
    Conflict between rule 84 and token MODULO_OP resolved as reduce (MODULO_OP < NEGATIVE).
    Conflict between rule 84 and token POWER_OP resolved as shift (NEGATIVE < POWER_OP).
    Conflict between rule 84 and token EQ_SIGN resolved as reduce (EQ_SIGN < NEGATIVE).
    Conflict between rule 84 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < NEGATIVE).
    Conflict between rule 84 and token LT_SIGN resolved as reduce (LT_SIGN < NEGATIVE).
    Conflict between rule 84 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < NEGATIVE).
    Conflict between rule 84 and token GT_SIGN resolved as reduce (GT_SIGN < NEGATIVE).
    Conflict between rule 84 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < NEGATIVE).


State 89

   81 operation: LBRACKET operation . RBRACKET
   82          | operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 139


State 90

   80 operation: LPARENTHESIS operation . RPARENTHESIS
   82          | operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND        shift, and go to state 92
    KW_OR         shift, and go to state 93
    PLUS_OP       shift, and go to state 94
    MINUS_OP      shift, and go to state 95
    MULTIPLY_OP   shift, and go to state 96
    DIVIDE_OP     shift, and go to state 97
    MODULO_OP     shift, and go to state 98
    POWER_OP      shift, and go to state 99
    EQ_SIGN       shift, and go to state 100
    NOTEQ_SIGN    shift, and go to state 101
    LT_SIGN       shift, and go to state 102
    LTEQ_SIGN     shift, and go to state 103
    GT_SIGN       shift, and go to state 104
    GTEQ_SIGN     shift, and go to state 105
    RPARENTHESIS  shift, and go to state 140


State 91

  104 ID_access: HASHTAG IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, COMMA, RBRACKET, DECLARE, ACCESS, SEMICOLON, RPARENTHESIS, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]
  105          | HASHTAG IDENTIFIER . LBRACKET operation RBRACKET

    LBRACKET  shift, and go to state 141

    $default  reduce using rule 104 (ID_access)


State 92

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   97          | operation KW_AND . operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 142
    ID_access      go to state 53


State 93

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   96          | operation KW_OR . operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 143
    ID_access      go to state 53


State 94

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   88          | operation PLUS_OP . operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 144
    ID_access      go to state 53


State 95

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   89          | operation MINUS_OP . operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 145
    ID_access      go to state 53


State 96

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   85          | operation MULTIPLY_OP . operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 146
    ID_access      go to state 53


State 97

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   86          | operation DIVIDE_OP . operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 147
    ID_access      go to state 53


State 98

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   87          | operation MODULO_OP . operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 148
    ID_access      go to state 53


State 99

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   82          | operation POWER_OP . operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 149
    ID_access      go to state 53


State 100

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   90          | operation EQ_SIGN . operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 150
    ID_access      go to state 53


State 101

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   91          | operation NOTEQ_SIGN . operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 151
    ID_access      go to state 53


State 102

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   92          | operation LT_SIGN . operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 152
    ID_access      go to state 53


State 103

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   93          | operation LTEQ_SIGN . operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 153
    ID_access      go to state 53


State 104

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   94          | operation GT_SIGN . operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 154
    ID_access      go to state 53


State 105

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   95          | operation GTEQ_SIGN . operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 155
    ID_access      go to state 53


State 106

   17 ARRAYIDs: IDENTIFIER LBRACKET operation RBRACKET .

    $default  reduce using rule 17 (ARRAYIDs)


State 107

  106 ID_access: ID_access ACCESS . IDENTIFIER
  107          | ID_access ACCESS . HASHTAG IDENTIFIER
  108          | ID_access ACCESS . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    IDENTIFIER  shift, and go to state 156
    HASHTAG     shift, and go to state 157


State 108

   18 ARRAYIDs: ARRAYIDs COMMA IDENTIFIER LBRACKET . operation RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 158
    ID_access      go to state 53


State 109

   20 POINTERIDs: POINTERIDs COMMA IDENTIFIER LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 159


State 110

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   29 var_declaration: KW_CONST IDs ASSIGN operation DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 160


State 111

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   30 var_declaration: KW_CONST ARRAYIDs ASSIGN operation DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 161


State 112

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   31 var_declaration: KW_CONST POINTERIDs ASSIGN operation DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 162


State 113

    5 main: KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE . body KW_ENDDEF SEMICOLON
    8 body: . %empty
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop

    $default  reduce using rule 8 (body)

    body  go to state 163


State 114

   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS . LARROW var_type DECLARE body KW_ENDDEF
   34                     | KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS . DECLARE body KW_ENDDEF

    DECLARE  shift, and go to state 164
    LARROW   shift, and go to state 165


State 115

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   68 function_decl_arguments: function_decl_arguments COMMA . var_declaration

    KW_CONST    shift, and go to state 1
    KW_COMP     shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    IDs              go to state 9
    ARRAYIDs         go to state 10
    POINTERIDs       go to state 11
    var_declaration  go to state 166


State 116

   42 comp_variable_declaration: KW_CONST compIDs . ASSIGN operation DECLARE comp_var_type
   47 compIDs: compIDs . COMMA HASHTAG IDENTIFIER

    ASSIGN  shift, and go to state 167
    COMMA   shift, and go to state 126


State 117

   43 comp_variable_declaration: KW_CONST compARRAYIDs . ASSIGN operation DECLARE comp_var_type
   49 compARRAYIDs: compARRAYIDs . COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET

    ASSIGN  shift, and go to state 168
    COMMA   shift, and go to state 128


State 118

   44 comp_variable_declaration: KW_CONST compPOINTERIDs . ASSIGN operation DECLARE comp_var_type
   51 compPOINTERIDs: compPOINTERIDs . COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET

    ASSIGN  shift, and go to state 169
    COMMA   shift, and go to state 130


State 119

   52 comp_function_declaration: KW_DEF IDENTIFIER . LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | KW_DEF IDENTIFIER . LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF

    LPARENTHESIS  shift, and go to state 170


State 120

   46 compIDs: HASHTAG IDENTIFIER .  [ASSIGN, COMMA, DECLARE]
   48 compARRAYIDs: HASHTAG IDENTIFIER . LBRACKET operation RBRACKET
   50 compPOINTERIDs: HASHTAG IDENTIFIER . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 171

    $default  reduce using rule 46 (compIDs)


State 121

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   45 comp_variable_declaration: IDs DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 172


State 122

   32 var_declaration: KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP .

    $default  reduce using rule 32 (var_declaration)


State 123

   37 comp: comp comp_variable_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 173


State 124

   38 comp: comp comp_function_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 174


State 125

   35 comp: comp_variable_declaration SEMICOLON .

    $default  reduce using rule 35 (comp)


State 126

   47 compIDs: compIDs COMMA . HASHTAG IDENTIFIER

    HASHTAG  shift, and go to state 175


State 127

   39 comp_variable_declaration: compIDs DECLARE . comp_var_type
  115 comp_var_type: . KW_INTEGER
  116              | . KW_SCALAR
  117              | . KW_STR
  118              | . KW_BOOLEAN
  119              | . IDENTIFIER

    KW_INTEGER  shift, and go to state 176
    KW_SCALAR   shift, and go to state 177
    KW_STR      shift, and go to state 178
    KW_BOOLEAN  shift, and go to state 179
    IDENTIFIER  shift, and go to state 180

    comp_var_type  go to state 181


State 128

   49 compARRAYIDs: compARRAYIDs COMMA . HASHTAG IDENTIFIER LBRACKET operation RBRACKET

    HASHTAG  shift, and go to state 182


State 129

   40 comp_variable_declaration: compARRAYIDs DECLARE . comp_var_type
  115 comp_var_type: . KW_INTEGER
  116              | . KW_SCALAR
  117              | . KW_STR
  118              | . KW_BOOLEAN
  119              | . IDENTIFIER

    KW_INTEGER  shift, and go to state 176
    KW_SCALAR   shift, and go to state 177
    KW_STR      shift, and go to state 178
    KW_BOOLEAN  shift, and go to state 179
    IDENTIFIER  shift, and go to state 180

    comp_var_type  go to state 183


State 130

   51 compPOINTERIDs: compPOINTERIDs COMMA . HASHTAG IDENTIFIER LBRACKET RBRACKET

    HASHTAG  shift, and go to state 184


State 131

   41 comp_variable_declaration: compPOINTERIDs DECLARE . comp_var_type
  115 comp_var_type: . KW_INTEGER
  116              | . KW_SCALAR
  117              | . KW_STR
  118              | . KW_BOOLEAN
  119              | . IDENTIFIER

    KW_INTEGER  shift, and go to state 176
    KW_SCALAR   shift, and go to state 177
    KW_STR      shift, and go to state 178
    KW_BOOLEAN  shift, and go to state 179
    IDENTIFIER  shift, and go to state 180

    comp_var_type  go to state 185


State 132

   36 comp: comp_function_declaration SEMICOLON .

    $default  reduce using rule 36 (comp)


State 133

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  100 ID_access: IDENTIFIER LBRACKET operation . RBRACKET

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 186


State 134

   72 function_call: IDENTIFIER . LPARENTHESIS function_arguments RPARENTHESIS
  101 ID_access: IDENTIFIER ACCESS IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, COMMA, RBRACKET, DECLARE, ACCESS, SEMICOLON, RPARENTHESIS, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]

    LPARENTHESIS  shift, and go to state 86

    $default  reduce using rule 101 (ID_access)


State 135

  102 ID_access: IDENTIFIER ACCESS HASHTAG . IDENTIFIER

    IDENTIFIER  shift, and go to state 187


State 136

  103 ID_access: IDENTIFIER ACCESS function_call .

    $default  reduce using rule 103 (ID_access)


State 137

   71 function_arguments: function_arguments . COMMA operation
   72 function_call: IDENTIFIER LPARENTHESIS function_arguments . RPARENTHESIS

    COMMA         shift, and go to state 188
    RPARENTHESIS  shift, and go to state 189


State 138

   70 function_arguments: operation .  [COMMA, RPARENTHESIS]
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 70 (function_arguments)


State 139

   81 operation: LBRACKET operation RBRACKET .

    $default  reduce using rule 81 (operation)


State 140

   80 operation: LPARENTHESIS operation RPARENTHESIS .

    $default  reduce using rule 80 (operation)


State 141

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  105          | HASHTAG IDENTIFIER LBRACKET . operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 190
    ID_access      go to state 53


State 142

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
   97          | operation KW_AND operation .  [KW_AND, KW_OR, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 97 (operation)

    Conflict between rule 97 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 97 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 97 and token PLUS_OP resolved as shift (KW_AND < PLUS_OP).
    Conflict between rule 97 and token MINUS_OP resolved as shift (KW_AND < MINUS_OP).
    Conflict between rule 97 and token MULTIPLY_OP resolved as shift (KW_AND < MULTIPLY_OP).
    Conflict between rule 97 and token DIVIDE_OP resolved as shift (KW_AND < DIVIDE_OP).
    Conflict between rule 97 and token MODULO_OP resolved as shift (KW_AND < MODULO_OP).
    Conflict between rule 97 and token POWER_OP resolved as shift (KW_AND < POWER_OP).
    Conflict between rule 97 and token EQ_SIGN resolved as shift (KW_AND < EQ_SIGN).
    Conflict between rule 97 and token NOTEQ_SIGN resolved as shift (KW_AND < NOTEQ_SIGN).
    Conflict between rule 97 and token LT_SIGN resolved as shift (KW_AND < LT_SIGN).
    Conflict between rule 97 and token LTEQ_SIGN resolved as shift (KW_AND < LTEQ_SIGN).
    Conflict between rule 97 and token GT_SIGN resolved as shift (KW_AND < GT_SIGN).
    Conflict between rule 97 and token GTEQ_SIGN resolved as shift (KW_AND < GTEQ_SIGN).


State 143

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   96          | operation KW_OR operation .  [KW_OR, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 96 (operation)

    Conflict between rule 96 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 96 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 96 and token PLUS_OP resolved as shift (KW_OR < PLUS_OP).
    Conflict between rule 96 and token MINUS_OP resolved as shift (KW_OR < MINUS_OP).
    Conflict between rule 96 and token MULTIPLY_OP resolved as shift (KW_OR < MULTIPLY_OP).
    Conflict between rule 96 and token DIVIDE_OP resolved as shift (KW_OR < DIVIDE_OP).
    Conflict between rule 96 and token MODULO_OP resolved as shift (KW_OR < MODULO_OP).
    Conflict between rule 96 and token POWER_OP resolved as shift (KW_OR < POWER_OP).
    Conflict between rule 96 and token EQ_SIGN resolved as shift (KW_OR < EQ_SIGN).
    Conflict between rule 96 and token NOTEQ_SIGN resolved as shift (KW_OR < NOTEQ_SIGN).
    Conflict between rule 96 and token LT_SIGN resolved as shift (KW_OR < LT_SIGN).
    Conflict between rule 96 and token LTEQ_SIGN resolved as shift (KW_OR < LTEQ_SIGN).
    Conflict between rule 96 and token GT_SIGN resolved as shift (KW_OR < GT_SIGN).
    Conflict between rule 96 and token GTEQ_SIGN resolved as shift (KW_OR < GTEQ_SIGN).


State 144

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   88          | operation PLUS_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99

    $default  reduce using rule 88 (operation)

    Conflict between rule 88 and token KW_AND resolved as reduce (KW_AND < PLUS_OP).
    Conflict between rule 88 and token KW_OR resolved as reduce (KW_OR < PLUS_OP).
    Conflict between rule 88 and token PLUS_OP resolved as reduce (%left PLUS_OP).
    Conflict between rule 88 and token MINUS_OP resolved as reduce (%left MINUS_OP).
    Conflict between rule 88 and token MULTIPLY_OP resolved as shift (PLUS_OP < MULTIPLY_OP).
    Conflict between rule 88 and token DIVIDE_OP resolved as shift (PLUS_OP < DIVIDE_OP).
    Conflict between rule 88 and token MODULO_OP resolved as shift (PLUS_OP < MODULO_OP).
    Conflict between rule 88 and token POWER_OP resolved as shift (PLUS_OP < POWER_OP).
    Conflict between rule 88 and token EQ_SIGN resolved as reduce (EQ_SIGN < PLUS_OP).
    Conflict between rule 88 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < PLUS_OP).
    Conflict between rule 88 and token LT_SIGN resolved as reduce (LT_SIGN < PLUS_OP).
    Conflict between rule 88 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < PLUS_OP).
    Conflict between rule 88 and token GT_SIGN resolved as reduce (GT_SIGN < PLUS_OP).
    Conflict between rule 88 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < PLUS_OP).


State 145

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   89          | operation MINUS_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99

    $default  reduce using rule 89 (operation)

    Conflict between rule 89 and token KW_AND resolved as reduce (KW_AND < MINUS_OP).
    Conflict between rule 89 and token KW_OR resolved as reduce (KW_OR < MINUS_OP).
    Conflict between rule 89 and token PLUS_OP resolved as reduce (%left PLUS_OP).
    Conflict between rule 89 and token MINUS_OP resolved as reduce (%left MINUS_OP).
    Conflict between rule 89 and token MULTIPLY_OP resolved as shift (MINUS_OP < MULTIPLY_OP).
    Conflict between rule 89 and token DIVIDE_OP resolved as shift (MINUS_OP < DIVIDE_OP).
    Conflict between rule 89 and token MODULO_OP resolved as shift (MINUS_OP < MODULO_OP).
    Conflict between rule 89 and token POWER_OP resolved as shift (MINUS_OP < POWER_OP).
    Conflict between rule 89 and token EQ_SIGN resolved as reduce (EQ_SIGN < MINUS_OP).
    Conflict between rule 89 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < MINUS_OP).
    Conflict between rule 89 and token LT_SIGN resolved as reduce (LT_SIGN < MINUS_OP).
    Conflict between rule 89 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < MINUS_OP).
    Conflict between rule 89 and token GT_SIGN resolved as reduce (GT_SIGN < MINUS_OP).
    Conflict between rule 89 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < MINUS_OP).


State 146

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   85          | operation MULTIPLY_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    POWER_OP  shift, and go to state 99

    $default  reduce using rule 85 (operation)

    Conflict between rule 85 and token KW_AND resolved as reduce (KW_AND < MULTIPLY_OP).
    Conflict between rule 85 and token KW_OR resolved as reduce (KW_OR < MULTIPLY_OP).
    Conflict between rule 85 and token PLUS_OP resolved as reduce (PLUS_OP < MULTIPLY_OP).
    Conflict between rule 85 and token MINUS_OP resolved as reduce (MINUS_OP < MULTIPLY_OP).
    Conflict between rule 85 and token MULTIPLY_OP resolved as reduce (%left MULTIPLY_OP).
    Conflict between rule 85 and token DIVIDE_OP resolved as reduce (%left DIVIDE_OP).
    Conflict between rule 85 and token MODULO_OP resolved as reduce (%left MODULO_OP).
    Conflict between rule 85 and token POWER_OP resolved as shift (MULTIPLY_OP < POWER_OP).
    Conflict between rule 85 and token EQ_SIGN resolved as reduce (EQ_SIGN < MULTIPLY_OP).
    Conflict between rule 85 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < MULTIPLY_OP).
    Conflict between rule 85 and token LT_SIGN resolved as reduce (LT_SIGN < MULTIPLY_OP).
    Conflict between rule 85 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < MULTIPLY_OP).
    Conflict between rule 85 and token GT_SIGN resolved as reduce (GT_SIGN < MULTIPLY_OP).
    Conflict between rule 85 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < MULTIPLY_OP).


State 147

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   86          | operation DIVIDE_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    POWER_OP  shift, and go to state 99

    $default  reduce using rule 86 (operation)

    Conflict between rule 86 and token KW_AND resolved as reduce (KW_AND < DIVIDE_OP).
    Conflict between rule 86 and token KW_OR resolved as reduce (KW_OR < DIVIDE_OP).
    Conflict between rule 86 and token PLUS_OP resolved as reduce (PLUS_OP < DIVIDE_OP).
    Conflict between rule 86 and token MINUS_OP resolved as reduce (MINUS_OP < DIVIDE_OP).
    Conflict between rule 86 and token MULTIPLY_OP resolved as reduce (%left MULTIPLY_OP).
    Conflict between rule 86 and token DIVIDE_OP resolved as reduce (%left DIVIDE_OP).
    Conflict between rule 86 and token MODULO_OP resolved as reduce (%left MODULO_OP).
    Conflict between rule 86 and token POWER_OP resolved as shift (DIVIDE_OP < POWER_OP).
    Conflict between rule 86 and token EQ_SIGN resolved as reduce (EQ_SIGN < DIVIDE_OP).
    Conflict between rule 86 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < DIVIDE_OP).
    Conflict between rule 86 and token LT_SIGN resolved as reduce (LT_SIGN < DIVIDE_OP).
    Conflict between rule 86 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < DIVIDE_OP).
    Conflict between rule 86 and token GT_SIGN resolved as reduce (GT_SIGN < DIVIDE_OP).
    Conflict between rule 86 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < DIVIDE_OP).


State 148

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   87          | operation MODULO_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    POWER_OP  shift, and go to state 99

    $default  reduce using rule 87 (operation)

    Conflict between rule 87 and token KW_AND resolved as reduce (KW_AND < MODULO_OP).
    Conflict between rule 87 and token KW_OR resolved as reduce (KW_OR < MODULO_OP).
    Conflict between rule 87 and token PLUS_OP resolved as reduce (PLUS_OP < MODULO_OP).
    Conflict between rule 87 and token MINUS_OP resolved as reduce (MINUS_OP < MODULO_OP).
    Conflict between rule 87 and token MULTIPLY_OP resolved as reduce (%left MULTIPLY_OP).
    Conflict between rule 87 and token DIVIDE_OP resolved as reduce (%left DIVIDE_OP).
    Conflict between rule 87 and token MODULO_OP resolved as reduce (%left MODULO_OP).
    Conflict between rule 87 and token POWER_OP resolved as shift (MODULO_OP < POWER_OP).
    Conflict between rule 87 and token EQ_SIGN resolved as reduce (EQ_SIGN < MODULO_OP).
    Conflict between rule 87 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < MODULO_OP).
    Conflict between rule 87 and token LT_SIGN resolved as reduce (LT_SIGN < MODULO_OP).
    Conflict between rule 87 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < MODULO_OP).
    Conflict between rule 87 and token GT_SIGN resolved as reduce (GT_SIGN < MODULO_OP).
    Conflict between rule 87 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < MODULO_OP).


State 149

   82 operation: operation . POWER_OP operation
   82          | operation POWER_OP operation .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    POWER_OP  shift, and go to state 99

    $default  reduce using rule 82 (operation)

    Conflict between rule 82 and token KW_AND resolved as reduce (KW_AND < POWER_OP).
    Conflict between rule 82 and token KW_OR resolved as reduce (KW_OR < POWER_OP).
    Conflict between rule 82 and token PLUS_OP resolved as reduce (PLUS_OP < POWER_OP).
    Conflict between rule 82 and token MINUS_OP resolved as reduce (MINUS_OP < POWER_OP).
    Conflict between rule 82 and token MULTIPLY_OP resolved as reduce (MULTIPLY_OP < POWER_OP).
    Conflict between rule 82 and token DIVIDE_OP resolved as reduce (DIVIDE_OP < POWER_OP).
    Conflict between rule 82 and token MODULO_OP resolved as reduce (MODULO_OP < POWER_OP).
    Conflict between rule 82 and token POWER_OP resolved as shift (%right POWER_OP).
    Conflict between rule 82 and token EQ_SIGN resolved as reduce (EQ_SIGN < POWER_OP).
    Conflict between rule 82 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < POWER_OP).
    Conflict between rule 82 and token LT_SIGN resolved as reduce (LT_SIGN < POWER_OP).
    Conflict between rule 82 and token LTEQ_SIGN resolved as reduce (LTEQ_SIGN < POWER_OP).
    Conflict between rule 82 and token GT_SIGN resolved as reduce (GT_SIGN < POWER_OP).
    Conflict between rule 82 and token GTEQ_SIGN resolved as reduce (GTEQ_SIGN < POWER_OP).


State 150

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   90          | operation EQ_SIGN operation .  [KW_AND, KW_OR, EQ_SIGN, NOTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 90 (operation)

    Conflict between rule 90 and token KW_AND resolved as reduce (KW_AND < EQ_SIGN).
    Conflict between rule 90 and token KW_OR resolved as reduce (KW_OR < EQ_SIGN).
    Conflict between rule 90 and token PLUS_OP resolved as shift (EQ_SIGN < PLUS_OP).
    Conflict between rule 90 and token MINUS_OP resolved as shift (EQ_SIGN < MINUS_OP).
    Conflict between rule 90 and token MULTIPLY_OP resolved as shift (EQ_SIGN < MULTIPLY_OP).
    Conflict between rule 90 and token DIVIDE_OP resolved as shift (EQ_SIGN < DIVIDE_OP).
    Conflict between rule 90 and token MODULO_OP resolved as shift (EQ_SIGN < MODULO_OP).
    Conflict between rule 90 and token POWER_OP resolved as shift (EQ_SIGN < POWER_OP).
    Conflict between rule 90 and token EQ_SIGN resolved as reduce (%left EQ_SIGN).
    Conflict between rule 90 and token NOTEQ_SIGN resolved as reduce (%left NOTEQ_SIGN).
    Conflict between rule 90 and token LT_SIGN resolved as shift (EQ_SIGN < LT_SIGN).
    Conflict between rule 90 and token LTEQ_SIGN resolved as shift (EQ_SIGN < LTEQ_SIGN).
    Conflict between rule 90 and token GT_SIGN resolved as shift (EQ_SIGN < GT_SIGN).
    Conflict between rule 90 and token GTEQ_SIGN resolved as shift (EQ_SIGN < GTEQ_SIGN).


State 151

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   91          | operation NOTEQ_SIGN operation .  [KW_AND, KW_OR, EQ_SIGN, NOTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 91 (operation)

    Conflict between rule 91 and token KW_AND resolved as reduce (KW_AND < NOTEQ_SIGN).
    Conflict between rule 91 and token KW_OR resolved as reduce (KW_OR < NOTEQ_SIGN).
    Conflict between rule 91 and token PLUS_OP resolved as shift (NOTEQ_SIGN < PLUS_OP).
    Conflict between rule 91 and token MINUS_OP resolved as shift (NOTEQ_SIGN < MINUS_OP).
    Conflict between rule 91 and token MULTIPLY_OP resolved as shift (NOTEQ_SIGN < MULTIPLY_OP).
    Conflict between rule 91 and token DIVIDE_OP resolved as shift (NOTEQ_SIGN < DIVIDE_OP).
    Conflict between rule 91 and token MODULO_OP resolved as shift (NOTEQ_SIGN < MODULO_OP).
    Conflict between rule 91 and token POWER_OP resolved as shift (NOTEQ_SIGN < POWER_OP).
    Conflict between rule 91 and token EQ_SIGN resolved as reduce (%left EQ_SIGN).
    Conflict between rule 91 and token NOTEQ_SIGN resolved as reduce (%left NOTEQ_SIGN).
    Conflict between rule 91 and token LT_SIGN resolved as shift (NOTEQ_SIGN < LT_SIGN).
    Conflict between rule 91 and token LTEQ_SIGN resolved as shift (NOTEQ_SIGN < LTEQ_SIGN).
    Conflict between rule 91 and token GT_SIGN resolved as shift (NOTEQ_SIGN < GT_SIGN).
    Conflict between rule 91 and token GTEQ_SIGN resolved as shift (NOTEQ_SIGN < GTEQ_SIGN).


State 152

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   92          | operation LT_SIGN operation .  [KW_AND, KW_OR, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99

    $default  reduce using rule 92 (operation)

    Conflict between rule 92 and token KW_AND resolved as reduce (KW_AND < LT_SIGN).
    Conflict between rule 92 and token KW_OR resolved as reduce (KW_OR < LT_SIGN).
    Conflict between rule 92 and token PLUS_OP resolved as shift (LT_SIGN < PLUS_OP).
    Conflict between rule 92 and token MINUS_OP resolved as shift (LT_SIGN < MINUS_OP).
    Conflict between rule 92 and token MULTIPLY_OP resolved as shift (LT_SIGN < MULTIPLY_OP).
    Conflict between rule 92 and token DIVIDE_OP resolved as shift (LT_SIGN < DIVIDE_OP).
    Conflict between rule 92 and token MODULO_OP resolved as shift (LT_SIGN < MODULO_OP).
    Conflict between rule 92 and token POWER_OP resolved as shift (LT_SIGN < POWER_OP).
    Conflict between rule 92 and token EQ_SIGN resolved as reduce (EQ_SIGN < LT_SIGN).
    Conflict between rule 92 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < LT_SIGN).
    Conflict between rule 92 and token LT_SIGN resolved as reduce (%left LT_SIGN).
    Conflict between rule 92 and token LTEQ_SIGN resolved as reduce (%left LTEQ_SIGN).
    Conflict between rule 92 and token GT_SIGN resolved as reduce (%left GT_SIGN).
    Conflict between rule 92 and token GTEQ_SIGN resolved as reduce (%left GTEQ_SIGN).


State 153

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   93          | operation LTEQ_SIGN operation .  [KW_AND, KW_OR, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99

    $default  reduce using rule 93 (operation)

    Conflict between rule 93 and token KW_AND resolved as reduce (KW_AND < LTEQ_SIGN).
    Conflict between rule 93 and token KW_OR resolved as reduce (KW_OR < LTEQ_SIGN).
    Conflict between rule 93 and token PLUS_OP resolved as shift (LTEQ_SIGN < PLUS_OP).
    Conflict between rule 93 and token MINUS_OP resolved as shift (LTEQ_SIGN < MINUS_OP).
    Conflict between rule 93 and token MULTIPLY_OP resolved as shift (LTEQ_SIGN < MULTIPLY_OP).
    Conflict between rule 93 and token DIVIDE_OP resolved as shift (LTEQ_SIGN < DIVIDE_OP).
    Conflict between rule 93 and token MODULO_OP resolved as shift (LTEQ_SIGN < MODULO_OP).
    Conflict between rule 93 and token POWER_OP resolved as shift (LTEQ_SIGN < POWER_OP).
    Conflict between rule 93 and token EQ_SIGN resolved as reduce (EQ_SIGN < LTEQ_SIGN).
    Conflict between rule 93 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < LTEQ_SIGN).
    Conflict between rule 93 and token LT_SIGN resolved as reduce (%left LT_SIGN).
    Conflict between rule 93 and token LTEQ_SIGN resolved as reduce (%left LTEQ_SIGN).
    Conflict between rule 93 and token GT_SIGN resolved as reduce (%left GT_SIGN).
    Conflict between rule 93 and token GTEQ_SIGN resolved as reduce (%left GTEQ_SIGN).


State 154

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   94          | operation GT_SIGN operation .  [KW_AND, KW_OR, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99

    $default  reduce using rule 94 (operation)

    Conflict between rule 94 and token KW_AND resolved as reduce (KW_AND < GT_SIGN).
    Conflict between rule 94 and token KW_OR resolved as reduce (KW_OR < GT_SIGN).
    Conflict between rule 94 and token PLUS_OP resolved as shift (GT_SIGN < PLUS_OP).
    Conflict between rule 94 and token MINUS_OP resolved as shift (GT_SIGN < MINUS_OP).
    Conflict between rule 94 and token MULTIPLY_OP resolved as shift (GT_SIGN < MULTIPLY_OP).
    Conflict between rule 94 and token DIVIDE_OP resolved as shift (GT_SIGN < DIVIDE_OP).
    Conflict between rule 94 and token MODULO_OP resolved as shift (GT_SIGN < MODULO_OP).
    Conflict between rule 94 and token POWER_OP resolved as shift (GT_SIGN < POWER_OP).
    Conflict between rule 94 and token EQ_SIGN resolved as reduce (EQ_SIGN < GT_SIGN).
    Conflict between rule 94 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < GT_SIGN).
    Conflict between rule 94 and token LT_SIGN resolved as reduce (%left LT_SIGN).
    Conflict between rule 94 and token LTEQ_SIGN resolved as reduce (%left LTEQ_SIGN).
    Conflict between rule 94 and token GT_SIGN resolved as reduce (%left GT_SIGN).
    Conflict between rule 94 and token GTEQ_SIGN resolved as reduce (%left GTEQ_SIGN).


State 155

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   95          | operation GTEQ_SIGN operation .  [KW_AND, KW_OR, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, COMMA, RBRACKET, DECLARE, SEMICOLON, RPARENTHESIS]
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99

    $default  reduce using rule 95 (operation)

    Conflict between rule 95 and token KW_AND resolved as reduce (KW_AND < GTEQ_SIGN).
    Conflict between rule 95 and token KW_OR resolved as reduce (KW_OR < GTEQ_SIGN).
    Conflict between rule 95 and token PLUS_OP resolved as shift (GTEQ_SIGN < PLUS_OP).
    Conflict between rule 95 and token MINUS_OP resolved as shift (GTEQ_SIGN < MINUS_OP).
    Conflict between rule 95 and token MULTIPLY_OP resolved as shift (GTEQ_SIGN < MULTIPLY_OP).
    Conflict between rule 95 and token DIVIDE_OP resolved as shift (GTEQ_SIGN < DIVIDE_OP).
    Conflict between rule 95 and token MODULO_OP resolved as shift (GTEQ_SIGN < MODULO_OP).
    Conflict between rule 95 and token POWER_OP resolved as shift (GTEQ_SIGN < POWER_OP).
    Conflict between rule 95 and token EQ_SIGN resolved as reduce (EQ_SIGN < GTEQ_SIGN).
    Conflict between rule 95 and token NOTEQ_SIGN resolved as reduce (NOTEQ_SIGN < GTEQ_SIGN).
    Conflict between rule 95 and token LT_SIGN resolved as reduce (%left LT_SIGN).
    Conflict between rule 95 and token LTEQ_SIGN resolved as reduce (%left LTEQ_SIGN).
    Conflict between rule 95 and token GT_SIGN resolved as reduce (%left GT_SIGN).
    Conflict between rule 95 and token GTEQ_SIGN resolved as reduce (%left GTEQ_SIGN).


State 156

  106 ID_access: ID_access ACCESS IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, COMMA, RBRACKET, DECLARE, ACCESS, SEMICOLON, RPARENTHESIS, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]
  108          | ID_access ACCESS IDENTIFIER . LPARENTHESIS function_arguments RPARENTHESIS

    LPARENTHESIS  shift, and go to state 191

    $default  reduce using rule 106 (ID_access)


State 157

  107 ID_access: ID_access ACCESS HASHTAG . IDENTIFIER

    IDENTIFIER  shift, and go to state 192


State 158

   18 ARRAYIDs: ARRAYIDs COMMA IDENTIFIER LBRACKET operation . RBRACKET
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 193


State 159

   20 POINTERIDs: POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET .

    $default  reduce using rule 20 (POINTERIDs)


State 160

   29 var_declaration: KW_CONST IDs ASSIGN operation DECLARE var_type .

    $default  reduce using rule 29 (var_declaration)


State 161

   30 var_declaration: KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type .

    $default  reduce using rule 30 (var_declaration)


State 162

   31 var_declaration: KW_CONST POINTERIDs ASSIGN operation DECLARE var_type .

    $default  reduce using rule 31 (var_declaration)


State 163

    5 main: KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body . KW_ENDDEF SEMICOLON
    9 body: body . var_declaration SEMICOLON
   10     | body . equation SEMICOLON
   11     | body . operation SEMICOLON
   12     | body . KW_RETURN operation SEMICOLON
   13     | body . KW_RETURN SEMICOLON
   14     | body . loop
   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 1
    KW_IF         shift, and go to state 194
    KW_FOR        shift, and go to state 195
    KW_WHILE      shift, and go to state 196
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 197
    KW_ENDDEF     shift, and go to state 198
    KW_COMP       shift, and go to state 3
    IDENTIFIER    shift, and go to state 199
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    IDs              go to state 9
    ARRAYIDs         go to state 10
    POINTERIDs       go to state 11
    var_declaration  go to state 200
    function_call    go to state 51
    operation        go to state 201
    ID_access        go to state 202
    equation         go to state 203
    if_statement     go to state 204
    for_loop         go to state 205
    while_loop       go to state 206
    loop             go to state 207


State 164

    8 body: . %empty
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
   34 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE . body KW_ENDDEF

    $default  reduce using rule 8 (body)

    body  go to state 208


State 165

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW . var_type DECLARE body KW_ENDDEF

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 209


State 166

   68 function_decl_arguments: function_decl_arguments COMMA var_declaration .

    $default  reduce using rule 68 (function_decl_arguments)


State 167

   42 comp_variable_declaration: KW_CONST compIDs ASSIGN . operation DECLARE comp_var_type
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 210
    ID_access      go to state 53


State 168

   43 comp_variable_declaration: KW_CONST compARRAYIDs ASSIGN . operation DECLARE comp_var_type
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 211
    ID_access      go to state 53


State 169

   44 comp_variable_declaration: KW_CONST compPOINTERIDs ASSIGN . operation DECLARE comp_var_type
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 212
    ID_access      go to state 53


State 170

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS . plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | KW_DEF IDENTIFIER LPARENTHESIS . plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF
   61 plus_arguments: . %empty  [RPARENTHESIS]
   62               | . comp_function_arguments
   63 comp_function_arguments: . IDENTIFIER DECLARE var_type
   64                        | . comp_function_arguments COMMA IDENTIFIER DECLARE var_type

    IDENTIFIER  shift, and go to state 213

    $default  reduce using rule 61 (plus_arguments)

    plus_arguments           go to state 214
    comp_function_arguments  go to state 215


State 171

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET . operation RBRACKET
   50 compPOINTERIDs: HASHTAG IDENTIFIER LBRACKET . RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    RBRACKET      shift, and go to state 216
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 217
    ID_access      go to state 53


State 172

   45 comp_variable_declaration: IDs DECLARE var_type .

    $default  reduce using rule 45 (comp_variable_declaration)


State 173

   37 comp: comp comp_variable_declaration SEMICOLON .

    $default  reduce using rule 37 (comp)


State 174

   38 comp: comp comp_function_declaration SEMICOLON .

    $default  reduce using rule 38 (comp)


State 175

   47 compIDs: compIDs COMMA HASHTAG . IDENTIFIER

    IDENTIFIER  shift, and go to state 218


State 176

  115 comp_var_type: KW_INTEGER .

    $default  reduce using rule 115 (comp_var_type)


State 177

  116 comp_var_type: KW_SCALAR .

    $default  reduce using rule 116 (comp_var_type)


State 178

  117 comp_var_type: KW_STR .

    $default  reduce using rule 117 (comp_var_type)


State 179

  118 comp_var_type: KW_BOOLEAN .

    $default  reduce using rule 118 (comp_var_type)


State 180

  119 comp_var_type: IDENTIFIER .

    $default  reduce using rule 119 (comp_var_type)


State 181

   39 comp_variable_declaration: compIDs DECLARE comp_var_type .

    $default  reduce using rule 39 (comp_variable_declaration)


State 182

   49 compARRAYIDs: compARRAYIDs COMMA HASHTAG . IDENTIFIER LBRACKET operation RBRACKET

    IDENTIFIER  shift, and go to state 219


State 183

   40 comp_variable_declaration: compARRAYIDs DECLARE comp_var_type .

    $default  reduce using rule 40 (comp_variable_declaration)


State 184

   51 compPOINTERIDs: compPOINTERIDs COMMA HASHTAG . IDENTIFIER LBRACKET RBRACKET

    IDENTIFIER  shift, and go to state 220


State 185

   41 comp_variable_declaration: compPOINTERIDs DECLARE comp_var_type .

    $default  reduce using rule 41 (comp_variable_declaration)


State 186

  100 ID_access: IDENTIFIER LBRACKET operation RBRACKET .

    $default  reduce using rule 100 (ID_access)


State 187

  102 ID_access: IDENTIFIER ACCESS HASHTAG IDENTIFIER .

    $default  reduce using rule 102 (ID_access)


State 188

   71 function_arguments: function_arguments COMMA . operation
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 221
    ID_access      go to state 53


State 189

   72 function_call: IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS .

    $default  reduce using rule 72 (function_call)


State 190

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  105 ID_access: HASHTAG IDENTIFIER LBRACKET operation . RBRACKET

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 222


State 191

   69 function_arguments: . %empty  [COMMA, RPARENTHESIS]
   70                   | . operation
   71                   | . function_arguments COMMA operation
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  108          | ID_access ACCESS IDENTIFIER LPARENTHESIS . function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    $default  reduce using rule 69 (function_arguments)

    function_arguments  go to state 223
    function_call       go to state 51
    operation           go to state 138
    ID_access           go to state 53


State 192

  107 ID_access: ID_access ACCESS HASHTAG IDENTIFIER .

    $default  reduce using rule 107 (ID_access)


State 193

   18 ARRAYIDs: ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET .

    $default  reduce using rule 18 (ARRAYIDs)


State 194

  138 if_statement: KW_IF . LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | KW_IF . LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    LPARENTHESIS  shift, and go to state 224


State 195

  142 for_loop: KW_FOR . IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR . IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 225


State 196

  146 while_loop: KW_WHILE . LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON

    LPARENTHESIS  shift, and go to state 226


State 197

   12 body: body KW_RETURN . operation SEMICOLON
   13     | body KW_RETURN . SEMICOLON
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    SEMICOLON     shift, and go to state 227
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 228
    ID_access      go to state 53


State 198

    5 main: KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF . SEMICOLON

    SEMICOLON  shift, and go to state 229


State 199

   15 IDs: IDENTIFIER .  [COMMA, DECLARE]
   17 ARRAYIDs: IDENTIFIER . LBRACKET operation RBRACKET
   19 POINTERIDs: IDENTIFIER . LBRACKET RBRACKET
   72 function_call: IDENTIFIER . LPARENTHESIS function_arguments RPARENTHESIS
   99 ID_access: IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, ACCESS, SEMICOLON, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]
  100          | IDENTIFIER . LBRACKET operation RBRACKET
  101          | IDENTIFIER . ACCESS IDENTIFIER
  102          | IDENTIFIER . ACCESS HASHTAG IDENTIFIER
  103          | IDENTIFIER . ACCESS function_call

    LBRACKET      shift, and go to state 230
    ACCESS        shift, and go to state 85
    LPARENTHESIS  shift, and go to state 86

    COMMA     reduce using rule 15 (IDs)
    DECLARE   reduce using rule 15 (IDs)
    ACCESS    [reduce using rule 99 (ID_access)]
    $default  reduce using rule 99 (ID_access)


State 200

    9 body: body var_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 231


State 201

   11 body: body operation . SEMICOLON
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 232


State 202

   73 operation: ID_access .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, SEMICOLON]
  106 ID_access: ID_access . ACCESS IDENTIFIER
  107          | ID_access . ACCESS HASHTAG IDENTIFIER
  108          | ID_access . ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: ID_access . ASSIGN operation
  110         | ID_access . PLUS_ASSIGN operation
  111         | ID_access . MINUS_ASSIGN operation
  112         | ID_access . MULTIPLY_ASSIGN operation
  113         | ID_access . DIVIDE_ASSIGN operation
  114         | ID_access . MODULO_ASSIGN operation

    ASSIGN           shift, and go to state 233
    ACCESS           shift, and go to state 107
    PLUS_ASSIGN      shift, and go to state 234
    MINUS_ASSIGN     shift, and go to state 235
    MULTIPLY_ASSIGN  shift, and go to state 236
    DIVIDE_ASSIGN    shift, and go to state 237
    MODULO_ASSIGN    shift, and go to state 238

    $default  reduce using rule 73 (operation)


State 203

   10 body: body equation . SEMICOLON

    SEMICOLON  shift, and go to state 239


State 204

  148 loop: if_statement .

    $default  reduce using rule 148 (loop)


State 205

  149 loop: for_loop .

    $default  reduce using rule 149 (loop)


State 206

  150 loop: while_loop .

    $default  reduce using rule 150 (loop)


State 207

   14 body: body loop .

    $default  reduce using rule 14 (body)


State 208

    9 body: body . var_declaration SEMICOLON
   10     | body . equation SEMICOLON
   11     | body . operation SEMICOLON
   12     | body . KW_RETURN operation SEMICOLON
   13     | body . KW_RETURN SEMICOLON
   14     | body . loop
   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   34 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE body . KW_ENDDEF
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 1
    KW_IF         shift, and go to state 194
    KW_FOR        shift, and go to state 195
    KW_WHILE      shift, and go to state 196
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 197
    KW_ENDDEF     shift, and go to state 240
    KW_COMP       shift, and go to state 3
    IDENTIFIER    shift, and go to state 199
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    IDs              go to state 9
    ARRAYIDs         go to state 10
    POINTERIDs       go to state 11
    var_declaration  go to state 200
    function_call    go to state 51
    operation        go to state 201
    ID_access        go to state 202
    equation         go to state 203
    if_statement     go to state 204
    for_loop         go to state 205
    while_loop       go to state 206
    loop             go to state 207


State 209

   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type . DECLARE body KW_ENDDEF

    DECLARE  shift, and go to state 241


State 210

   42 comp_variable_declaration: KW_CONST compIDs ASSIGN operation . DECLARE comp_var_type
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 242


State 211

   43 comp_variable_declaration: KW_CONST compARRAYIDs ASSIGN operation . DECLARE comp_var_type
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 243


State 212

   44 comp_variable_declaration: KW_CONST compPOINTERIDs ASSIGN operation . DECLARE comp_var_type
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 244


State 213

   63 comp_function_arguments: IDENTIFIER . DECLARE var_type

    DECLARE  shift, and go to state 245


State 214

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments . RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | KW_DEF IDENTIFIER LPARENTHESIS plus_arguments . RPARENTHESIS DECLARE compbody KW_ENDDEF

    RPARENTHESIS  shift, and go to state 246


State 215

   62 plus_arguments: comp_function_arguments .  [RPARENTHESIS]
   64 comp_function_arguments: comp_function_arguments . COMMA IDENTIFIER DECLARE var_type

    COMMA  shift, and go to state 247

    $default  reduce using rule 62 (plus_arguments)


State 216

   50 compPOINTERIDs: HASHTAG IDENTIFIER LBRACKET RBRACKET .

    $default  reduce using rule 50 (compPOINTERIDs)


State 217

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET operation . RBRACKET
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 248


State 218

   47 compIDs: compIDs COMMA HASHTAG IDENTIFIER .

    $default  reduce using rule 47 (compIDs)


State 219

   49 compARRAYIDs: compARRAYIDs COMMA HASHTAG IDENTIFIER . LBRACKET operation RBRACKET

    LBRACKET  shift, and go to state 249


State 220

   51 compPOINTERIDs: compPOINTERIDs COMMA HASHTAG IDENTIFIER . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 250


State 221

   71 function_arguments: function_arguments COMMA operation .  [COMMA, RPARENTHESIS]
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 71 (function_arguments)


State 222

  105 ID_access: HASHTAG IDENTIFIER LBRACKET operation RBRACKET .

    $default  reduce using rule 105 (ID_access)


State 223

   71 function_arguments: function_arguments . COMMA operation
  108 ID_access: ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments . RPARENTHESIS

    COMMA         shift, and go to state 188
    RPARENTHESIS  shift, and go to state 251


State 224

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  138 if_statement: KW_IF LPARENTHESIS . operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | KW_IF LPARENTHESIS . operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 252
    ID_access      go to state 53


State 225

  142 for_loop: KW_FOR IDENTIFIER . KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER . KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 253


State 226

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  146 while_loop: KW_WHILE LPARENTHESIS . operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 254
    ID_access      go to state 53


State 227

   13 body: body KW_RETURN SEMICOLON .

    $default  reduce using rule 13 (body)


State 228

   12 body: body KW_RETURN operation . SEMICOLON
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 255


State 229

    5 main: KW_DEF KW_MAIN LPARENTHESIS RPARENTHESIS DECLARE body KW_ENDDEF SEMICOLON .

    $default  reduce using rule 5 (main)


State 230

   17 ARRAYIDs: IDENTIFIER LBRACKET . operation RBRACKET
   19 POINTERIDs: IDENTIFIER LBRACKET . RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  100          | IDENTIFIER LBRACKET . operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    RBRACKET      shift, and go to state 48
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 256
    ID_access      go to state 53


State 231

    9 body: body var_declaration SEMICOLON .

    $default  reduce using rule 9 (body)


State 232

   11 body: body operation SEMICOLON .

    $default  reduce using rule 11 (body)


State 233

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: ID_access ASSIGN . operation

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 257
    ID_access      go to state 53


State 234

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  110 equation: ID_access PLUS_ASSIGN . operation

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 258
    ID_access      go to state 53


State 235

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  111 equation: ID_access MINUS_ASSIGN . operation

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 259
    ID_access      go to state 53


State 236

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  112 equation: ID_access MULTIPLY_ASSIGN . operation

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 260
    ID_access      go to state 53


State 237

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  113 equation: ID_access DIVIDE_ASSIGN . operation

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 261
    ID_access      go to state 53


State 238

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  114 equation: ID_access MODULO_ASSIGN . operation

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 262
    ID_access      go to state 53


State 239

   10 body: body equation SEMICOLON .

    $default  reduce using rule 10 (body)


State 240

   34 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS DECLARE body KW_ENDDEF .

    $default  reduce using rule 34 (function_declaration)


State 241

    8 body: . %empty
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE . body KW_ENDDEF

    $default  reduce using rule 8 (body)

    body  go to state 263


State 242

   42 comp_variable_declaration: KW_CONST compIDs ASSIGN operation DECLARE . comp_var_type
  115 comp_var_type: . KW_INTEGER
  116              | . KW_SCALAR
  117              | . KW_STR
  118              | . KW_BOOLEAN
  119              | . IDENTIFIER

    KW_INTEGER  shift, and go to state 176
    KW_SCALAR   shift, and go to state 177
    KW_STR      shift, and go to state 178
    KW_BOOLEAN  shift, and go to state 179
    IDENTIFIER  shift, and go to state 180

    comp_var_type  go to state 264


State 243

   43 comp_variable_declaration: KW_CONST compARRAYIDs ASSIGN operation DECLARE . comp_var_type
  115 comp_var_type: . KW_INTEGER
  116              | . KW_SCALAR
  117              | . KW_STR
  118              | . KW_BOOLEAN
  119              | . IDENTIFIER

    KW_INTEGER  shift, and go to state 176
    KW_SCALAR   shift, and go to state 177
    KW_STR      shift, and go to state 178
    KW_BOOLEAN  shift, and go to state 179
    IDENTIFIER  shift, and go to state 180

    comp_var_type  go to state 265


State 244

   44 comp_variable_declaration: KW_CONST compPOINTERIDs ASSIGN operation DECLARE . comp_var_type
  115 comp_var_type: . KW_INTEGER
  116              | . KW_SCALAR
  117              | . KW_STR
  118              | . KW_BOOLEAN
  119              | . IDENTIFIER

    KW_INTEGER  shift, and go to state 176
    KW_SCALAR   shift, and go to state 177
    KW_STR      shift, and go to state 178
    KW_BOOLEAN  shift, and go to state 179
    IDENTIFIER  shift, and go to state 180

    comp_var_type  go to state 266


State 245

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   63 comp_function_arguments: IDENTIFIER DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 267


State 246

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS . LARROW var_type DECLARE compbody KW_ENDDEF
   53                          | KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS . DECLARE compbody KW_ENDDEF

    DECLARE  shift, and go to state 268
    LARROW   shift, and go to state 269


State 247

   64 comp_function_arguments: comp_function_arguments COMMA . IDENTIFIER DECLARE var_type

    IDENTIFIER  shift, and go to state 270


State 248

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET operation RBRACKET .

    $default  reduce using rule 48 (compARRAYIDs)


State 249

   49 compARRAYIDs: compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET . operation RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 271
    ID_access      go to state 53


State 250

   51 compPOINTERIDs: compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 272


State 251

  108 ID_access: ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS .

    $default  reduce using rule 108 (ID_access)


State 252

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  138 if_statement: KW_IF LPARENTHESIS operation . RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | KW_IF LPARENTHESIS operation . RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    KW_AND        shift, and go to state 92
    KW_OR         shift, and go to state 93
    PLUS_OP       shift, and go to state 94
    MINUS_OP      shift, and go to state 95
    MULTIPLY_OP   shift, and go to state 96
    DIVIDE_OP     shift, and go to state 97
    MODULO_OP     shift, and go to state 98
    POWER_OP      shift, and go to state 99
    EQ_SIGN       shift, and go to state 100
    NOTEQ_SIGN    shift, and go to state 101
    LT_SIGN       shift, and go to state 102
    LTEQ_SIGN     shift, and go to state 103
    GT_SIGN       shift, and go to state 104
    GTEQ_SIGN     shift, and go to state 105
    RPARENTHESIS  shift, and go to state 273


State 253

  142 for_loop: KW_FOR IDENTIFIER KW_IN . LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN . LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 274


State 254

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  146 while_loop: KW_WHILE LPARENTHESIS operation . RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON

    KW_AND        shift, and go to state 92
    KW_OR         shift, and go to state 93
    PLUS_OP       shift, and go to state 94
    MINUS_OP      shift, and go to state 95
    MULTIPLY_OP   shift, and go to state 96
    DIVIDE_OP     shift, and go to state 97
    MODULO_OP     shift, and go to state 98
    POWER_OP      shift, and go to state 99
    EQ_SIGN       shift, and go to state 100
    NOTEQ_SIGN    shift, and go to state 101
    LT_SIGN       shift, and go to state 102
    LTEQ_SIGN     shift, and go to state 103
    GT_SIGN       shift, and go to state 104
    GTEQ_SIGN     shift, and go to state 105
    RPARENTHESIS  shift, and go to state 275


State 255

   12 body: body KW_RETURN operation SEMICOLON .

    $default  reduce using rule 12 (body)


State 256

   17 ARRAYIDs: IDENTIFIER LBRACKET operation . RBRACKET
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  100 ID_access: IDENTIFIER LBRACKET operation . RBRACKET

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 276


State 257

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  109 equation: ID_access ASSIGN operation .  [SEMICOLON]

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 109 (equation)


State 258

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  110 equation: ID_access PLUS_ASSIGN operation .  [SEMICOLON]

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 110 (equation)


State 259

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  111 equation: ID_access MINUS_ASSIGN operation .  [SEMICOLON]

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 111 (equation)


State 260

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  112 equation: ID_access MULTIPLY_ASSIGN operation .  [SEMICOLON]

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 112 (equation)


State 261

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  113 equation: ID_access DIVIDE_ASSIGN operation .  [SEMICOLON]

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 113 (equation)


State 262

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  114 equation: ID_access MODULO_ASSIGN operation .  [SEMICOLON]

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105

    $default  reduce using rule 114 (equation)


State 263

    9 body: body . var_declaration SEMICOLON
   10     | body . equation SEMICOLON
   11     | body . operation SEMICOLON
   12     | body . KW_RETURN operation SEMICOLON
   13     | body . KW_RETURN SEMICOLON
   14     | body . loop
   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body . KW_ENDDEF
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 1
    KW_IF         shift, and go to state 194
    KW_FOR        shift, and go to state 195
    KW_WHILE      shift, and go to state 196
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 197
    KW_ENDDEF     shift, and go to state 277
    KW_COMP       shift, and go to state 3
    IDENTIFIER    shift, and go to state 199
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    IDs              go to state 9
    ARRAYIDs         go to state 10
    POINTERIDs       go to state 11
    var_declaration  go to state 200
    function_call    go to state 51
    operation        go to state 201
    ID_access        go to state 202
    equation         go to state 203
    if_statement     go to state 204
    for_loop         go to state 205
    while_loop       go to state 206
    loop             go to state 207


State 264

   42 comp_variable_declaration: KW_CONST compIDs ASSIGN operation DECLARE comp_var_type .

    $default  reduce using rule 42 (comp_variable_declaration)


State 265

   43 comp_variable_declaration: KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type .

    $default  reduce using rule 43 (comp_variable_declaration)


State 266

   44 comp_variable_declaration: KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type .

    $default  reduce using rule 44 (comp_variable_declaration)


State 267

   63 comp_function_arguments: IDENTIFIER DECLARE var_type .

    $default  reduce using rule 63 (comp_function_arguments)


State 268

   53 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE . compbody KW_ENDDEF
   54 compbody: . %empty
   55         | . compbody comp_variable_declaration SEMICOLON
   56         | . compbody equation SEMICOLON
   57         | . compbody operation SEMICOLON
   58         | . compbody KW_RETURN operation SEMICOLON
   59         | . compbody KW_RETURN SEMICOLON
   60         | . compbody comp_loop

    $default  reduce using rule 54 (compbody)

    compbody  go to state 278


State 269

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW . var_type DECLARE compbody KW_ENDDEF

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 279


State 270

   64 comp_function_arguments: comp_function_arguments COMMA IDENTIFIER . DECLARE var_type

    DECLARE  shift, and go to state 280


State 271

   49 compARRAYIDs: compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation . RBRACKET
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 281


State 272

   51 compPOINTERIDs: compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET .

    $default  reduce using rule 51 (compPOINTERIDs)


State 273

  138 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS . DECLARE loop_body KW_ENDIF SEMICOLON
  139             | KW_IF LPARENTHESIS operation RPARENTHESIS . DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    DECLARE  shift, and go to state 282


State 274

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET . operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN LBRACKET . operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 283
    ID_access      go to state 53


State 275

  146 while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS . DECLARE loop_body KW_ENDWHILE SEMICOLON

    DECLARE  shift, and go to state 284


State 276

   17 ARRAYIDs: IDENTIFIER LBRACKET operation RBRACKET .  [COMMA, DECLARE]
  100 ID_access: IDENTIFIER LBRACKET operation RBRACKET .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, ACCESS, SEMICOLON, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]

    COMMA     reduce using rule 17 (ARRAYIDs)
    DECLARE   reduce using rule 17 (ARRAYIDs)
    $default  reduce using rule 100 (ID_access)


State 277

   33 function_declaration: KW_DEF IDENTIFIER LPARENTHESIS args RPARENTHESIS LARROW var_type DECLARE body KW_ENDDEF .

    $default  reduce using rule 33 (function_declaration)


State 278

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   53 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody . KW_ENDDEF
   55 compbody: compbody . comp_variable_declaration SEMICOLON
   56         | compbody . equation SEMICOLON
   57         | compbody . operation SEMICOLON
   58         | compbody . KW_RETURN operation SEMICOLON
   59         | compbody . KW_RETURN SEMICOLON
   60         | compbody . comp_loop
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  140 comp_if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  144 comp_for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  147 comp_while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON
  151 comp_loop: . comp_if_statement
  152          | . comp_for_loop
  153          | . comp_while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 72
    KW_IF         shift, and go to state 285
    KW_FOR        shift, and go to state 286
    KW_WHILE      shift, and go to state 287
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 288
    KW_ENDDEF     shift, and go to state 289
    IDENTIFIER    shift, and go to state 290
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 291

    IDs                        go to state 76
    comp_variable_declaration  go to state 292
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    function_call              go to state 51
    operation                  go to state 293
    ID_access                  go to state 202
    equation                   go to state 294
    comp_if_statement          go to state 295
    comp_for_loop              go to state 296
    comp_while_loop            go to state 297
    comp_loop                  go to state 298


State 279

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type . DECLARE compbody KW_ENDDEF

    DECLARE  shift, and go to state 299


State 280

   21 var_type: . KW_INTEGER
   22         | . KW_SCALAR
   23         | . KW_STR
   24         | . KW_BOOLEAN
   25         | . IDENTIFIER
   64 comp_function_arguments: comp_function_arguments COMMA IDENTIFIER DECLARE . var_type

    KW_INTEGER  shift, and go to state 55
    KW_SCALAR   shift, and go to state 56
    KW_STR      shift, and go to state 57
    KW_BOOLEAN  shift, and go to state 58
    IDENTIFIER  shift, and go to state 59

    var_type  go to state 300


State 281

   49 compARRAYIDs: compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET .

    $default  reduce using rule 49 (compARRAYIDs)


State 282

    8 body: . %empty  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
  120 loop_body: . %empty  [KW_IF, KW_ELSE, KW_ENDIF, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE]
  121          | . loop_body KW_BREAK SEMICOLON
  122          | . loop_body KW_CONTINUE SEMICOLON
  123          | . body var_declaration SEMICOLON
  124          | . body equation SEMICOLON
  125          | . body operation SEMICOLON
  126          | . body KW_RETURN operation SEMICOLON
  127          | . body KW_RETURN SEMICOLON
  128          | . loop_body loop
  138 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE . loop_body KW_ENDIF SEMICOLON
  139             | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE . loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    KW_IF        reduce using rule 8 (body)
    KW_IF        [reduce using rule 120 (loop_body)]
    KW_ELSE      reduce using rule 120 (loop_body)
    KW_ENDIF     reduce using rule 120 (loop_body)
    KW_FOR       reduce using rule 8 (body)
    KW_FOR       [reduce using rule 120 (loop_body)]
    KW_WHILE     reduce using rule 8 (body)
    KW_WHILE     [reduce using rule 120 (loop_body)]
    KW_BREAK     reduce using rule 120 (loop_body)
    KW_CONTINUE  reduce using rule 120 (loop_body)
    $default     reduce using rule 8 (body)

    body       go to state 301
    loop_body  go to state 302


State 283

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation . DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN LBRACKET operation . DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 303


State 284

    8 body: . %empty  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
  120 loop_body: . %empty  [KW_IF, KW_FOR, KW_WHILE, KW_ENDWHILE, KW_BREAK, KW_CONTINUE]
  121          | . loop_body KW_BREAK SEMICOLON
  122          | . loop_body KW_CONTINUE SEMICOLON
  123          | . body var_declaration SEMICOLON
  124          | . body equation SEMICOLON
  125          | . body operation SEMICOLON
  126          | . body KW_RETURN operation SEMICOLON
  127          | . body KW_RETURN SEMICOLON
  128          | . loop_body loop
  146 while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE . loop_body KW_ENDWHILE SEMICOLON

    KW_IF        reduce using rule 8 (body)
    KW_IF        [reduce using rule 120 (loop_body)]
    KW_FOR       reduce using rule 8 (body)
    KW_FOR       [reduce using rule 120 (loop_body)]
    KW_WHILE     reduce using rule 8 (body)
    KW_WHILE     [reduce using rule 120 (loop_body)]
    KW_ENDWHILE  reduce using rule 120 (loop_body)
    KW_BREAK     reduce using rule 120 (loop_body)
    KW_CONTINUE  reduce using rule 120 (loop_body)
    $default     reduce using rule 8 (body)

    body       go to state 301
    loop_body  go to state 304


State 285

  140 comp_if_statement: KW_IF . LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | KW_IF . LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    LPARENTHESIS  shift, and go to state 305


State 286

  144 comp_for_loop: KW_FOR . IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR . IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 306


State 287

  147 comp_while_loop: KW_WHILE . LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON

    LPARENTHESIS  shift, and go to state 307


State 288

   58 compbody: compbody KW_RETURN . operation SEMICOLON
   59         | compbody KW_RETURN . SEMICOLON
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    SEMICOLON     shift, and go to state 308
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 309
    ID_access      go to state 53


State 289

   53 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS DECLARE compbody KW_ENDDEF .

    $default  reduce using rule 53 (comp_function_declaration)


State 290

   15 IDs: IDENTIFIER .  [COMMA, DECLARE]
   72 function_call: IDENTIFIER . LPARENTHESIS function_arguments RPARENTHESIS
   99 ID_access: IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, ACCESS, SEMICOLON, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]
  100          | IDENTIFIER . LBRACKET operation RBRACKET
  101          | IDENTIFIER . ACCESS IDENTIFIER
  102          | IDENTIFIER . ACCESS HASHTAG IDENTIFIER
  103          | IDENTIFIER . ACCESS function_call

    LBRACKET      shift, and go to state 84
    ACCESS        shift, and go to state 85
    LPARENTHESIS  shift, and go to state 86

    COMMA     reduce using rule 15 (IDs)
    DECLARE   reduce using rule 15 (IDs)
    ACCESS    [reduce using rule 99 (ID_access)]
    $default  reduce using rule 99 (ID_access)


State 291

   46 compIDs: HASHTAG . IDENTIFIER
   48 compARRAYIDs: HASHTAG . IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: HASHTAG . IDENTIFIER LBRACKET RBRACKET
  104 ID_access: HASHTAG . IDENTIFIER
  105          | HASHTAG . IDENTIFIER LBRACKET operation RBRACKET

    IDENTIFIER  shift, and go to state 310


State 292

   55 compbody: compbody comp_variable_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 311


State 293

   57 compbody: compbody operation . SEMICOLON
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 312


State 294

   56 compbody: compbody equation . SEMICOLON

    SEMICOLON  shift, and go to state 313


State 295

  151 comp_loop: comp_if_statement .

    $default  reduce using rule 151 (comp_loop)


State 296

  152 comp_loop: comp_for_loop .

    $default  reduce using rule 152 (comp_loop)


State 297

  153 comp_loop: comp_while_loop .

    $default  reduce using rule 153 (comp_loop)


State 298

   60 compbody: compbody comp_loop .

    $default  reduce using rule 60 (compbody)


State 299

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE . compbody KW_ENDDEF
   54 compbody: . %empty
   55         | . compbody comp_variable_declaration SEMICOLON
   56         | . compbody equation SEMICOLON
   57         | . compbody operation SEMICOLON
   58         | . compbody KW_RETURN operation SEMICOLON
   59         | . compbody KW_RETURN SEMICOLON
   60         | . compbody comp_loop

    $default  reduce using rule 54 (compbody)

    compbody  go to state 314


State 300

   64 comp_function_arguments: comp_function_arguments COMMA IDENTIFIER DECLARE var_type .

    $default  reduce using rule 64 (comp_function_arguments)


State 301

    9 body: body . var_declaration SEMICOLON
   10     | body . equation SEMICOLON
   11     | body . operation SEMICOLON
   12     | body . KW_RETURN operation SEMICOLON
   13     | body . KW_RETURN SEMICOLON
   14     | body . loop
   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   17 ARRAYIDs: . IDENTIFIER LBRACKET operation RBRACKET
   18         | . ARRAYIDs COMMA IDENTIFIER LBRACKET operation RBRACKET
   19 POINTERIDs: . IDENTIFIER LBRACKET RBRACKET
   20           | . POINTERIDs COMMA IDENTIFIER LBRACKET RBRACKET
   26 var_declaration: . IDs DECLARE var_type
   27                | . ARRAYIDs DECLARE var_type
   28                | . POINTERIDs DECLARE var_type
   29                | . KW_CONST IDs ASSIGN operation DECLARE var_type
   30                | . KW_CONST ARRAYIDs ASSIGN operation DECLARE var_type
   31                | . KW_CONST POINTERIDs ASSIGN operation DECLARE var_type
   32                | . KW_COMP IDENTIFIER DECLARE comp KW_ENDCOMP
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  123 loop_body: body . var_declaration SEMICOLON
  124          | body . equation SEMICOLON
  125          | body . operation SEMICOLON
  126          | body . KW_RETURN operation SEMICOLON
  127          | body . KW_RETURN SEMICOLON
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 1
    KW_IF         shift, and go to state 194
    KW_FOR        shift, and go to state 195
    KW_WHILE      shift, and go to state 196
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 315
    KW_COMP       shift, and go to state 3
    IDENTIFIER    shift, and go to state 199
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    IDs              go to state 9
    ARRAYIDs         go to state 10
    POINTERIDs       go to state 11
    var_declaration  go to state 316
    function_call    go to state 51
    operation        go to state 317
    ID_access        go to state 202
    equation         go to state 318
    if_statement     go to state 204
    for_loop         go to state 205
    while_loop       go to state 206
    loop             go to state 207


State 302

  121 loop_body: loop_body . KW_BREAK SEMICOLON
  122          | loop_body . KW_CONTINUE SEMICOLON
  128          | loop_body . loop
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  138             | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body . KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  139             | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body . KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_IF        shift, and go to state 194
    KW_ELSE      shift, and go to state 319
    KW_ENDIF     shift, and go to state 320
    KW_FOR       shift, and go to state 195
    KW_WHILE     shift, and go to state 196
    KW_BREAK     shift, and go to state 321
    KW_CONTINUE  shift, and go to state 322

    if_statement  go to state 204
    for_loop      go to state 205
    while_loop    go to state 206
    loop          go to state 323


State 303

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE . operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE . operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 324
    ID_access      go to state 53


State 304

  121 loop_body: loop_body . KW_BREAK SEMICOLON
  122          | loop_body . KW_CONTINUE SEMICOLON
  128          | loop_body . loop
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  146           | KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body . KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_IF        shift, and go to state 194
    KW_FOR       shift, and go to state 195
    KW_WHILE     shift, and go to state 196
    KW_ENDWHILE  shift, and go to state 325
    KW_BREAK     shift, and go to state 321
    KW_CONTINUE  shift, and go to state 322

    if_statement  go to state 204
    for_loop      go to state 205
    while_loop    go to state 206
    loop          go to state 323


State 305

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  140 comp_if_statement: KW_IF LPARENTHESIS . operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | KW_IF LPARENTHESIS . operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 326
    ID_access      go to state 53


State 306

  144 comp_for_loop: KW_FOR IDENTIFIER . KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER . KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_IN  shift, and go to state 327


State 307

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  147 comp_while_loop: KW_WHILE LPARENTHESIS . operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 328
    ID_access      go to state 53


State 308

   59 compbody: compbody KW_RETURN SEMICOLON .

    $default  reduce using rule 59 (compbody)


State 309

   58 compbody: compbody KW_RETURN operation . SEMICOLON
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 329


State 310

   46 compIDs: HASHTAG IDENTIFIER .  [COMMA, DECLARE]
   48 compARRAYIDs: HASHTAG IDENTIFIER . LBRACKET operation RBRACKET
   50 compPOINTERIDs: HASHTAG IDENTIFIER . LBRACKET RBRACKET
  104 ID_access: HASHTAG IDENTIFIER .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, ACCESS, SEMICOLON, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]
  105          | HASHTAG IDENTIFIER . LBRACKET operation RBRACKET

    LBRACKET  shift, and go to state 330

    COMMA     reduce using rule 46 (compIDs)
    DECLARE   reduce using rule 46 (compIDs)
    $default  reduce using rule 104 (ID_access)


State 311

   55 compbody: compbody comp_variable_declaration SEMICOLON .

    $default  reduce using rule 55 (compbody)


State 312

   57 compbody: compbody operation SEMICOLON .

    $default  reduce using rule 57 (compbody)


State 313

   56 compbody: compbody equation SEMICOLON .

    $default  reduce using rule 56 (compbody)


State 314

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody . KW_ENDDEF
   55 compbody: compbody . comp_variable_declaration SEMICOLON
   56         | compbody . equation SEMICOLON
   57         | compbody . operation SEMICOLON
   58         | compbody . KW_RETURN operation SEMICOLON
   59         | compbody . KW_RETURN SEMICOLON
   60         | compbody . comp_loop
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  140 comp_if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  144 comp_for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  147 comp_while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON
  151 comp_loop: . comp_if_statement
  152          | . comp_for_loop
  153          | . comp_while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 72
    KW_IF         shift, and go to state 285
    KW_FOR        shift, and go to state 286
    KW_WHILE      shift, and go to state 287
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 288
    KW_ENDDEF     shift, and go to state 331
    IDENTIFIER    shift, and go to state 290
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 291

    IDs                        go to state 76
    comp_variable_declaration  go to state 292
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    function_call              go to state 51
    operation                  go to state 293
    ID_access                  go to state 202
    equation                   go to state 294
    comp_if_statement          go to state 295
    comp_for_loop              go to state 296
    comp_while_loop            go to state 297
    comp_loop                  go to state 298


State 315

   12 body: body KW_RETURN . operation SEMICOLON
   13     | body KW_RETURN . SEMICOLON
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  126 loop_body: body KW_RETURN . operation SEMICOLON
  127          | body KW_RETURN . SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    SEMICOLON     shift, and go to state 332
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 333
    ID_access      go to state 53


State 316

    9 body: body var_declaration . SEMICOLON
  123 loop_body: body var_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 334


State 317

   11 body: body operation . SEMICOLON
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  125 loop_body: body operation . SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 335


State 318

   10 body: body equation . SEMICOLON
  124 loop_body: body equation . SEMICOLON

    SEMICOLON  shift, and go to state 336


State 319

  139 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE . DECLARE loop_body KW_ENDIF

    DECLARE  shift, and go to state 337


State 320

  138 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF . SEMICOLON

    SEMICOLON  shift, and go to state 338


State 321

  121 loop_body: loop_body KW_BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 339


State 322

  122 loop_body: loop_body KW_CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 340


State 323

  128 loop_body: loop_body loop .

    $default  reduce using rule 128 (loop_body)


State 324

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation . DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation . RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 341
    DECLARE      shift, and go to state 342


State 325

  146 while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE . SEMICOLON

    SEMICOLON  shift, and go to state 343


State 326

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  140 comp_if_statement: KW_IF LPARENTHESIS operation . RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | KW_IF LPARENTHESIS operation . RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    KW_AND        shift, and go to state 92
    KW_OR         shift, and go to state 93
    PLUS_OP       shift, and go to state 94
    MINUS_OP      shift, and go to state 95
    MULTIPLY_OP   shift, and go to state 96
    DIVIDE_OP     shift, and go to state 97
    MODULO_OP     shift, and go to state 98
    POWER_OP      shift, and go to state 99
    EQ_SIGN       shift, and go to state 100
    NOTEQ_SIGN    shift, and go to state 101
    LT_SIGN       shift, and go to state 102
    LTEQ_SIGN     shift, and go to state 103
    GT_SIGN       shift, and go to state 104
    GTEQ_SIGN     shift, and go to state 105
    RPARENTHESIS  shift, and go to state 344


State 327

  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN . LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN . LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    LBRACKET  shift, and go to state 345


State 328

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  147 comp_while_loop: KW_WHILE LPARENTHESIS operation . RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON

    KW_AND        shift, and go to state 92
    KW_OR         shift, and go to state 93
    PLUS_OP       shift, and go to state 94
    MINUS_OP      shift, and go to state 95
    MULTIPLY_OP   shift, and go to state 96
    DIVIDE_OP     shift, and go to state 97
    MODULO_OP     shift, and go to state 98
    POWER_OP      shift, and go to state 99
    EQ_SIGN       shift, and go to state 100
    NOTEQ_SIGN    shift, and go to state 101
    LT_SIGN       shift, and go to state 102
    LTEQ_SIGN     shift, and go to state 103
    GT_SIGN       shift, and go to state 104
    GTEQ_SIGN     shift, and go to state 105
    RPARENTHESIS  shift, and go to state 346


State 329

   58 compbody: compbody KW_RETURN operation SEMICOLON .

    $default  reduce using rule 58 (compbody)


State 330

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET . operation RBRACKET
   50 compPOINTERIDs: HASHTAG IDENTIFIER LBRACKET . RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  105          | HASHTAG IDENTIFIER LBRACKET . operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    RBRACKET      shift, and go to state 216
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 347
    ID_access      go to state 53


State 331

   52 comp_function_declaration: KW_DEF IDENTIFIER LPARENTHESIS plus_arguments RPARENTHESIS LARROW var_type DECLARE compbody KW_ENDDEF .

    $default  reduce using rule 52 (comp_function_declaration)


State 332

   13 body: body KW_RETURN SEMICOLON .  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
  127 loop_body: body KW_RETURN SEMICOLON .  [KW_IF, KW_ELSE, KW_ENDIF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_ENDWHILE, KW_BREAK, KW_CONTINUE]

    KW_IF        reduce using rule 13 (body)
    KW_IF        [reduce using rule 127 (loop_body)]
    KW_ELSE      reduce using rule 127 (loop_body)
    KW_ENDIF     reduce using rule 127 (loop_body)
    KW_FOR       reduce using rule 13 (body)
    KW_FOR       [reduce using rule 127 (loop_body)]
    KW_ENDFOR    reduce using rule 127 (loop_body)
    KW_WHILE     reduce using rule 13 (body)
    KW_WHILE     [reduce using rule 127 (loop_body)]
    KW_ENDWHILE  reduce using rule 127 (loop_body)
    KW_BREAK     reduce using rule 127 (loop_body)
    KW_CONTINUE  reduce using rule 127 (loop_body)
    $default     reduce using rule 13 (body)


State 333

   12 body: body KW_RETURN operation . SEMICOLON
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  126 loop_body: body KW_RETURN operation . SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 348


State 334

    9 body: body var_declaration SEMICOLON .  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
  123 loop_body: body var_declaration SEMICOLON .  [KW_IF, KW_ELSE, KW_ENDIF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_ENDWHILE, KW_BREAK, KW_CONTINUE]

    KW_IF        reduce using rule 9 (body)
    KW_IF        [reduce using rule 123 (loop_body)]
    KW_ELSE      reduce using rule 123 (loop_body)
    KW_ENDIF     reduce using rule 123 (loop_body)
    KW_FOR       reduce using rule 9 (body)
    KW_FOR       [reduce using rule 123 (loop_body)]
    KW_ENDFOR    reduce using rule 123 (loop_body)
    KW_WHILE     reduce using rule 9 (body)
    KW_WHILE     [reduce using rule 123 (loop_body)]
    KW_ENDWHILE  reduce using rule 123 (loop_body)
    KW_BREAK     reduce using rule 123 (loop_body)
    KW_CONTINUE  reduce using rule 123 (loop_body)
    $default     reduce using rule 9 (body)


State 335

   11 body: body operation SEMICOLON .  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
  125 loop_body: body operation SEMICOLON .  [KW_IF, KW_ELSE, KW_ENDIF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_ENDWHILE, KW_BREAK, KW_CONTINUE]

    KW_IF        reduce using rule 11 (body)
    KW_IF        [reduce using rule 125 (loop_body)]
    KW_ELSE      reduce using rule 125 (loop_body)
    KW_ENDIF     reduce using rule 125 (loop_body)
    KW_FOR       reduce using rule 11 (body)
    KW_FOR       [reduce using rule 125 (loop_body)]
    KW_ENDFOR    reduce using rule 125 (loop_body)
    KW_WHILE     reduce using rule 11 (body)
    KW_WHILE     [reduce using rule 125 (loop_body)]
    KW_ENDWHILE  reduce using rule 125 (loop_body)
    KW_BREAK     reduce using rule 125 (loop_body)
    KW_CONTINUE  reduce using rule 125 (loop_body)
    $default     reduce using rule 11 (body)


State 336

   10 body: body equation SEMICOLON .  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
  124 loop_body: body equation SEMICOLON .  [KW_IF, KW_ELSE, KW_ENDIF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_ENDWHILE, KW_BREAK, KW_CONTINUE]

    KW_IF        reduce using rule 10 (body)
    KW_IF        [reduce using rule 124 (loop_body)]
    KW_ELSE      reduce using rule 124 (loop_body)
    KW_ENDIF     reduce using rule 124 (loop_body)
    KW_FOR       reduce using rule 10 (body)
    KW_FOR       [reduce using rule 124 (loop_body)]
    KW_ENDFOR    reduce using rule 124 (loop_body)
    KW_WHILE     reduce using rule 10 (body)
    KW_WHILE     [reduce using rule 124 (loop_body)]
    KW_ENDWHILE  reduce using rule 124 (loop_body)
    KW_BREAK     reduce using rule 124 (loop_body)
    KW_CONTINUE  reduce using rule 124 (loop_body)
    $default     reduce using rule 10 (body)


State 337

    8 body: . %empty  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
  120 loop_body: . %empty  [KW_IF, KW_ENDIF, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE]
  121          | . loop_body KW_BREAK SEMICOLON
  122          | . loop_body KW_CONTINUE SEMICOLON
  123          | . body var_declaration SEMICOLON
  124          | . body equation SEMICOLON
  125          | . body operation SEMICOLON
  126          | . body KW_RETURN operation SEMICOLON
  127          | . body KW_RETURN SEMICOLON
  128          | . loop_body loop
  139 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE . loop_body KW_ENDIF

    KW_IF        reduce using rule 8 (body)
    KW_IF        [reduce using rule 120 (loop_body)]
    KW_ENDIF     reduce using rule 120 (loop_body)
    KW_FOR       reduce using rule 8 (body)
    KW_FOR       [reduce using rule 120 (loop_body)]
    KW_WHILE     reduce using rule 8 (body)
    KW_WHILE     [reduce using rule 120 (loop_body)]
    KW_BREAK     reduce using rule 120 (loop_body)
    KW_CONTINUE  reduce using rule 120 (loop_body)
    $default     reduce using rule 8 (body)

    body       go to state 301
    loop_body  go to state 349


State 338

  138 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON .

    $default  reduce using rule 138 (if_statement)


State 339

  121 loop_body: loop_body KW_BREAK SEMICOLON .

    $default  reduce using rule 121 (loop_body)


State 340

  122 loop_body: loop_body KW_CONTINUE SEMICOLON .

    $default  reduce using rule 122 (loop_body)


State 341

  143 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET . DECLARE loop_body KW_ENDFOR SEMICOLON

    DECLARE  shift, and go to state 350


State 342

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE . operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 351
    ID_access      go to state 53


State 343

  146 while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON .

    $default  reduce using rule 146 (while_loop)


State 344

  140 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS . DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | KW_IF LPARENTHESIS operation RPARENTHESIS . DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    DECLARE  shift, and go to state 352


State 345

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET . operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN LBRACKET . operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 353
    ID_access      go to state 53


State 346

  147 comp_while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS . DECLARE comp_loop_body KW_ENDWHILE SEMICOLON

    DECLARE  shift, and go to state 354


State 347

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET operation . RBRACKET
   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  105 ID_access: HASHTAG IDENTIFIER LBRACKET operation . RBRACKET

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 355


State 348

   12 body: body KW_RETURN operation SEMICOLON .  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
  126 loop_body: body KW_RETURN operation SEMICOLON .  [KW_IF, KW_ELSE, KW_ENDIF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_ENDWHILE, KW_BREAK, KW_CONTINUE]

    KW_IF        reduce using rule 12 (body)
    KW_IF        [reduce using rule 126 (loop_body)]
    KW_ELSE      reduce using rule 126 (loop_body)
    KW_ENDIF     reduce using rule 126 (loop_body)
    KW_FOR       reduce using rule 12 (body)
    KW_FOR       [reduce using rule 126 (loop_body)]
    KW_ENDFOR    reduce using rule 126 (loop_body)
    KW_WHILE     reduce using rule 12 (body)
    KW_WHILE     [reduce using rule 126 (loop_body)]
    KW_ENDWHILE  reduce using rule 126 (loop_body)
    KW_BREAK     reduce using rule 126 (loop_body)
    KW_CONTINUE  reduce using rule 126 (loop_body)
    $default     reduce using rule 12 (body)


State 349

  121 loop_body: loop_body . KW_BREAK SEMICOLON
  122          | loop_body . KW_CONTINUE SEMICOLON
  128          | loop_body . loop
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  139             | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body . KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_IF        shift, and go to state 194
    KW_ENDIF     shift, and go to state 356
    KW_FOR       shift, and go to state 195
    KW_WHILE     shift, and go to state 196
    KW_BREAK     shift, and go to state 321
    KW_CONTINUE  shift, and go to state 322

    if_statement  go to state 204
    for_loop      go to state 205
    while_loop    go to state 206
    loop          go to state 323


State 350

    8 body: . %empty  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
  120 loop_body: . %empty  [KW_IF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_BREAK, KW_CONTINUE]
  121          | . loop_body KW_BREAK SEMICOLON
  122          | . loop_body KW_CONTINUE SEMICOLON
  123          | . body var_declaration SEMICOLON
  124          | . body equation SEMICOLON
  125          | . body operation SEMICOLON
  126          | . body KW_RETURN operation SEMICOLON
  127          | . body KW_RETURN SEMICOLON
  128          | . loop_body loop
  143 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE . loop_body KW_ENDFOR SEMICOLON

    KW_IF        reduce using rule 8 (body)
    KW_IF        [reduce using rule 120 (loop_body)]
    KW_FOR       reduce using rule 8 (body)
    KW_FOR       [reduce using rule 120 (loop_body)]
    KW_ENDFOR    reduce using rule 120 (loop_body)
    KW_WHILE     reduce using rule 8 (body)
    KW_WHILE     [reduce using rule 120 (loop_body)]
    KW_BREAK     reduce using rule 120 (loop_body)
    KW_CONTINUE  reduce using rule 120 (loop_body)
    $default     reduce using rule 8 (body)

    body       go to state 301
    loop_body  go to state 357


State 351

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation . RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 358


State 352

  129 comp_loop_body: . %empty
  130               | . comp_loop_body KW_BREAK SEMICOLON
  131               | . comp_loop_body KW_CONTINUE SEMICOLON
  132               | . comp_loop_body comp_variable_declaration SEMICOLON
  133               | . comp_loop_body equation SEMICOLON
  134               | . comp_loop_body operation SEMICOLON
  135               | . comp_loop_body KW_RETURN operation SEMICOLON
  136               | . comp_loop_body KW_RETURN SEMICOLON
  137               | . comp_loop_body comp_loop
  140 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE . comp_loop_body KW_ENDIF SEMICOLON
  141                  | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE . comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF

    $default  reduce using rule 129 (comp_loop_body)

    comp_loop_body  go to state 359


State 353

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation . DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN LBRACKET operation . DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    DECLARE      shift, and go to state 360


State 354

  129 comp_loop_body: . %empty
  130               | . comp_loop_body KW_BREAK SEMICOLON
  131               | . comp_loop_body KW_CONTINUE SEMICOLON
  132               | . comp_loop_body comp_variable_declaration SEMICOLON
  133               | . comp_loop_body equation SEMICOLON
  134               | . comp_loop_body operation SEMICOLON
  135               | . comp_loop_body KW_RETURN operation SEMICOLON
  136               | . comp_loop_body KW_RETURN SEMICOLON
  137               | . comp_loop_body comp_loop
  147 comp_while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE . comp_loop_body KW_ENDWHILE SEMICOLON

    $default  reduce using rule 129 (comp_loop_body)

    comp_loop_body  go to state 361


State 355

   48 compARRAYIDs: HASHTAG IDENTIFIER LBRACKET operation RBRACKET .  [COMMA, DECLARE]
  105 ID_access: HASHTAG IDENTIFIER LBRACKET operation RBRACKET .  [KW_AND, KW_OR, PLUS_OP, MINUS_OP, MULTIPLY_OP, DIVIDE_OP, MODULO_OP, POWER_OP, EQ_SIGN, NOTEQ_SIGN, LT_SIGN, LTEQ_SIGN, GT_SIGN, GTEQ_SIGN, ASSIGN, ACCESS, SEMICOLON, PLUS_ASSIGN, MINUS_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN]

    COMMA     reduce using rule 48 (compARRAYIDs)
    DECLARE   reduce using rule 48 (compARRAYIDs)
    $default  reduce using rule 105 (ID_access)


State 356

  139 if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF .

    $default  reduce using rule 139 (if_statement)


State 357

  121 loop_body: loop_body . KW_BREAK SEMICOLON
  122          | loop_body . KW_CONTINUE SEMICOLON
  128          | loop_body . loop
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body . KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_IF        shift, and go to state 194
    KW_FOR       shift, and go to state 195
    KW_ENDFOR    shift, and go to state 362
    KW_WHILE     shift, and go to state 196
    KW_BREAK     shift, and go to state 321
    KW_CONTINUE  shift, and go to state 322

    if_statement  go to state 204
    for_loop      go to state 205
    while_loop    go to state 206
    loop          go to state 323


State 358

  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET . DECLARE loop_body KW_ENDFOR SEMICOLON

    DECLARE  shift, and go to state 363


State 359

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  130 comp_loop_body: comp_loop_body . KW_BREAK SEMICOLON
  131               | comp_loop_body . KW_CONTINUE SEMICOLON
  132               | comp_loop_body . comp_variable_declaration SEMICOLON
  133               | comp_loop_body . equation SEMICOLON
  134               | comp_loop_body . operation SEMICOLON
  135               | comp_loop_body . KW_RETURN operation SEMICOLON
  136               | comp_loop_body . KW_RETURN SEMICOLON
  137               | comp_loop_body . comp_loop
  140 comp_if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  140                  | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body . KW_ENDIF SEMICOLON
  141                  | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  141                  | KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body . KW_ELSE DECLARE loop_body KW_ENDIF
  144 comp_for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  147 comp_while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON
  151 comp_loop: . comp_if_statement
  152          | . comp_for_loop
  153          | . comp_while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 72
    KW_IF         shift, and go to state 285
    KW_ELSE       shift, and go to state 364
    KW_ENDIF      shift, and go to state 365
    KW_FOR        shift, and go to state 286
    KW_WHILE      shift, and go to state 287
    KW_BREAK      shift, and go to state 366
    KW_CONTINUE   shift, and go to state 367
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 368
    IDENTIFIER    shift, and go to state 290
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 291

    IDs                        go to state 76
    comp_variable_declaration  go to state 369
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    function_call              go to state 51
    operation                  go to state 370
    ID_access                  go to state 202
    equation                   go to state 371
    comp_if_statement          go to state 295
    comp_for_loop              go to state 296
    comp_while_loop            go to state 297
    comp_loop                  go to state 372


State 360

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE . operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE . operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 373
    ID_access      go to state 53


State 361

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  130 comp_loop_body: comp_loop_body . KW_BREAK SEMICOLON
  131               | comp_loop_body . KW_CONTINUE SEMICOLON
  132               | comp_loop_body . comp_variable_declaration SEMICOLON
  133               | comp_loop_body . equation SEMICOLON
  134               | comp_loop_body . operation SEMICOLON
  135               | comp_loop_body . KW_RETURN operation SEMICOLON
  136               | comp_loop_body . KW_RETURN SEMICOLON
  137               | comp_loop_body . comp_loop
  140 comp_if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  144 comp_for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  147 comp_while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON
  147                | KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body . KW_ENDWHILE SEMICOLON
  151 comp_loop: . comp_if_statement
  152          | . comp_for_loop
  153          | . comp_while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 72
    KW_IF         shift, and go to state 285
    KW_FOR        shift, and go to state 286
    KW_WHILE      shift, and go to state 287
    KW_ENDWHILE   shift, and go to state 374
    KW_BREAK      shift, and go to state 366
    KW_CONTINUE   shift, and go to state 367
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 368
    IDENTIFIER    shift, and go to state 290
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 291

    IDs                        go to state 76
    comp_variable_declaration  go to state 369
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    function_call              go to state 51
    operation                  go to state 370
    ID_access                  go to state 202
    equation                   go to state 371
    comp_if_statement          go to state 295
    comp_for_loop              go to state 296
    comp_while_loop            go to state 297
    comp_loop                  go to state 372


State 362

  143 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR . SEMICOLON

    SEMICOLON  shift, and go to state 375


State 363

    8 body: . %empty  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
  120 loop_body: . %empty  [KW_IF, KW_FOR, KW_ENDFOR, KW_WHILE, KW_BREAK, KW_CONTINUE]
  121          | . loop_body KW_BREAK SEMICOLON
  122          | . loop_body KW_CONTINUE SEMICOLON
  123          | . body var_declaration SEMICOLON
  124          | . body equation SEMICOLON
  125          | . body operation SEMICOLON
  126          | . body KW_RETURN operation SEMICOLON
  127          | . body KW_RETURN SEMICOLON
  128          | . loop_body loop
  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE . loop_body KW_ENDFOR SEMICOLON

    KW_IF        reduce using rule 8 (body)
    KW_IF        [reduce using rule 120 (loop_body)]
    KW_FOR       reduce using rule 8 (body)
    KW_FOR       [reduce using rule 120 (loop_body)]
    KW_ENDFOR    reduce using rule 120 (loop_body)
    KW_WHILE     reduce using rule 8 (body)
    KW_WHILE     [reduce using rule 120 (loop_body)]
    KW_BREAK     reduce using rule 120 (loop_body)
    KW_CONTINUE  reduce using rule 120 (loop_body)
    $default     reduce using rule 8 (body)

    body       go to state 301
    loop_body  go to state 376


State 364

  141 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE . DECLARE loop_body KW_ENDIF

    DECLARE  shift, and go to state 377


State 365

  140 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF . SEMICOLON

    SEMICOLON  shift, and go to state 378


State 366

  130 comp_loop_body: comp_loop_body KW_BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 379


State 367

  131 comp_loop_body: comp_loop_body KW_CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 380


State 368

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  135 comp_loop_body: comp_loop_body KW_RETURN . operation SEMICOLON
  136               | comp_loop_body KW_RETURN . SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    SEMICOLON     shift, and go to state 381
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 382
    ID_access      go to state 53


State 369

  132 comp_loop_body: comp_loop_body comp_variable_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 383


State 370

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  134 comp_loop_body: comp_loop_body operation . SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 384


State 371

  133 comp_loop_body: comp_loop_body equation . SEMICOLON

    SEMICOLON  shift, and go to state 385


State 372

  137 comp_loop_body: comp_loop_body comp_loop .

    $default  reduce using rule 137 (comp_loop_body)


State 373

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation . DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation . RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 386
    DECLARE      shift, and go to state 387


State 374

  147 comp_while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE . SEMICOLON

    SEMICOLON  shift, and go to state 388


State 375

  143 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON .

    $default  reduce using rule 143 (for_loop)


State 376

  121 loop_body: loop_body . KW_BREAK SEMICOLON
  122          | loop_body . KW_CONTINUE SEMICOLON
  128          | loop_body . loop
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  142         | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body . KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_IF        shift, and go to state 194
    KW_FOR       shift, and go to state 195
    KW_ENDFOR    shift, and go to state 389
    KW_WHILE     shift, and go to state 196
    KW_BREAK     shift, and go to state 321
    KW_CONTINUE  shift, and go to state 322

    if_statement  go to state 204
    for_loop      go to state 205
    while_loop    go to state 206
    loop          go to state 323


State 377

    8 body: . %empty  [KW_TRUE, KW_FALSE, KW_CONST, KW_IF, KW_FOR, KW_WHILE, KW_NOT, KW_RETURN, KW_COMP, IDENTIFIER, CONST_INT, CONST_SCALAR, CONST_STRING, PLUS_OP, MINUS_OP, LBRACKET, LPARENTHESIS, HASHTAG]
    9     | . body var_declaration SEMICOLON
   10     | . body equation SEMICOLON
   11     | . body operation SEMICOLON
   12     | . body KW_RETURN operation SEMICOLON
   13     | . body KW_RETURN SEMICOLON
   14     | . body loop
  120 loop_body: . %empty  [KW_IF, KW_ENDIF, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE]
  121          | . loop_body KW_BREAK SEMICOLON
  122          | . loop_body KW_CONTINUE SEMICOLON
  123          | . body var_declaration SEMICOLON
  124          | . body equation SEMICOLON
  125          | . body operation SEMICOLON
  126          | . body KW_RETURN operation SEMICOLON
  127          | . body KW_RETURN SEMICOLON
  128          | . loop_body loop
  141 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE . loop_body KW_ENDIF

    KW_IF        reduce using rule 8 (body)
    KW_IF        [reduce using rule 120 (loop_body)]
    KW_ENDIF     reduce using rule 120 (loop_body)
    KW_FOR       reduce using rule 8 (body)
    KW_FOR       [reduce using rule 120 (loop_body)]
    KW_WHILE     reduce using rule 8 (body)
    KW_WHILE     [reduce using rule 120 (loop_body)]
    KW_BREAK     reduce using rule 120 (loop_body)
    KW_CONTINUE  reduce using rule 120 (loop_body)
    $default     reduce using rule 8 (body)

    body       go to state 301
    loop_body  go to state 390


State 378

  140 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON .

    $default  reduce using rule 140 (comp_if_statement)


State 379

  130 comp_loop_body: comp_loop_body KW_BREAK SEMICOLON .

    $default  reduce using rule 130 (comp_loop_body)


State 380

  131 comp_loop_body: comp_loop_body KW_CONTINUE SEMICOLON .

    $default  reduce using rule 131 (comp_loop_body)


State 381

  136 comp_loop_body: comp_loop_body KW_RETURN SEMICOLON .

    $default  reduce using rule 136 (comp_loop_body)


State 382

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  135 comp_loop_body: comp_loop_body KW_RETURN operation . SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    SEMICOLON    shift, and go to state 391


State 383

  132 comp_loop_body: comp_loop_body comp_variable_declaration SEMICOLON .

    $default  reduce using rule 132 (comp_loop_body)


State 384

  134 comp_loop_body: comp_loop_body operation SEMICOLON .

    $default  reduce using rule 134 (comp_loop_body)


State 385

  133 comp_loop_body: comp_loop_body equation SEMICOLON .

    $default  reduce using rule 133 (comp_loop_body)


State 386

  145 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET . DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    DECLARE  shift, and go to state 392


State 387

   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE . operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_NOT        shift, and go to state 40
    IDENTIFIER    shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 50

    function_call  go to state 51
    operation      go to state 393
    ID_access      go to state 53


State 388

  147 comp_while_loop: KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON .

    $default  reduce using rule 147 (comp_while_loop)


State 389

  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR . SEMICOLON

    SEMICOLON  shift, and go to state 394


State 390

  121 loop_body: loop_body . KW_BREAK SEMICOLON
  122          | loop_body . KW_CONTINUE SEMICOLON
  128          | loop_body . loop
  138 if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDIF SEMICOLON
  139             | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  141 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body . KW_ENDIF
  142 for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  143         | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON
  146 while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE loop_body KW_ENDWHILE SEMICOLON
  148 loop: . if_statement
  149     | . for_loop
  150     | . while_loop

    KW_IF        shift, and go to state 194
    KW_ENDIF     shift, and go to state 395
    KW_FOR       shift, and go to state 195
    KW_WHILE     shift, and go to state 196
    KW_BREAK     shift, and go to state 321
    KW_CONTINUE  shift, and go to state 322

    if_statement  go to state 204
    for_loop      go to state 205
    while_loop    go to state 206
    loop          go to state 323


State 391

  135 comp_loop_body: comp_loop_body KW_RETURN operation SEMICOLON .

    $default  reduce using rule 135 (comp_loop_body)


State 392

  129 comp_loop_body: . %empty
  130               | . comp_loop_body KW_BREAK SEMICOLON
  131               | . comp_loop_body KW_CONTINUE SEMICOLON
  132               | . comp_loop_body comp_variable_declaration SEMICOLON
  133               | . comp_loop_body equation SEMICOLON
  134               | . comp_loop_body operation SEMICOLON
  135               | . comp_loop_body KW_RETURN operation SEMICOLON
  136               | . comp_loop_body KW_RETURN SEMICOLON
  137               | . comp_loop_body comp_loop
  145 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE . comp_loop_body KW_ENDFOR SEMICOLON

    $default  reduce using rule 129 (comp_loop_body)

    comp_loop_body  go to state 396


State 393

   82 operation: operation . POWER_OP operation
   85          | operation . MULTIPLY_OP operation
   86          | operation . DIVIDE_OP operation
   87          | operation . MODULO_OP operation
   88          | operation . PLUS_OP operation
   89          | operation . MINUS_OP operation
   90          | operation . EQ_SIGN operation
   91          | operation . NOTEQ_SIGN operation
   92          | operation . LT_SIGN operation
   93          | operation . LTEQ_SIGN operation
   94          | operation . GT_SIGN operation
   95          | operation . GTEQ_SIGN operation
   96          | operation . KW_OR operation
   97          | operation . KW_AND operation
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation . RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    KW_AND       shift, and go to state 92
    KW_OR        shift, and go to state 93
    PLUS_OP      shift, and go to state 94
    MINUS_OP     shift, and go to state 95
    MULTIPLY_OP  shift, and go to state 96
    DIVIDE_OP    shift, and go to state 97
    MODULO_OP    shift, and go to state 98
    POWER_OP     shift, and go to state 99
    EQ_SIGN      shift, and go to state 100
    NOTEQ_SIGN   shift, and go to state 101
    LT_SIGN      shift, and go to state 102
    LTEQ_SIGN    shift, and go to state 103
    GT_SIGN      shift, and go to state 104
    GTEQ_SIGN    shift, and go to state 105
    RBRACKET     shift, and go to state 397


State 394

  142 for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE loop_body KW_ENDFOR SEMICOLON .

    $default  reduce using rule 142 (for_loop)


State 395

  141 comp_if_statement: KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF .

    $default  reduce using rule 141 (comp_if_statement)


State 396

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  130 comp_loop_body: comp_loop_body . KW_BREAK SEMICOLON
  131               | comp_loop_body . KW_CONTINUE SEMICOLON
  132               | comp_loop_body . comp_variable_declaration SEMICOLON
  133               | comp_loop_body . equation SEMICOLON
  134               | comp_loop_body . operation SEMICOLON
  135               | comp_loop_body . KW_RETURN operation SEMICOLON
  136               | comp_loop_body . KW_RETURN SEMICOLON
  137               | comp_loop_body . comp_loop
  140 comp_if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  144 comp_for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  145              | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body . KW_ENDFOR SEMICOLON
  147 comp_while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON
  151 comp_loop: . comp_if_statement
  152          | . comp_for_loop
  153          | . comp_while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 72
    KW_IF         shift, and go to state 285
    KW_FOR        shift, and go to state 286
    KW_ENDFOR     shift, and go to state 398
    KW_WHILE      shift, and go to state 287
    KW_BREAK      shift, and go to state 366
    KW_CONTINUE   shift, and go to state 367
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 368
    IDENTIFIER    shift, and go to state 290
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 291

    IDs                        go to state 76
    comp_variable_declaration  go to state 369
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    function_call              go to state 51
    operation                  go to state 370
    ID_access                  go to state 202
    equation                   go to state 371
    comp_if_statement          go to state 295
    comp_for_loop              go to state 296
    comp_while_loop            go to state 297
    comp_loop                  go to state 372


State 397

  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET . DECLARE comp_loop_body KW_ENDFOR SEMICOLON

    DECLARE  shift, and go to state 399


State 398

  145 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR . SEMICOLON

    SEMICOLON  shift, and go to state 400


State 399

  129 comp_loop_body: . %empty
  130               | . comp_loop_body KW_BREAK SEMICOLON
  131               | . comp_loop_body KW_CONTINUE SEMICOLON
  132               | . comp_loop_body comp_variable_declaration SEMICOLON
  133               | . comp_loop_body equation SEMICOLON
  134               | . comp_loop_body operation SEMICOLON
  135               | . comp_loop_body KW_RETURN operation SEMICOLON
  136               | . comp_loop_body KW_RETURN SEMICOLON
  137               | . comp_loop_body comp_loop
  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE . comp_loop_body KW_ENDFOR SEMICOLON

    $default  reduce using rule 129 (comp_loop_body)

    comp_loop_body  go to state 401


State 400

  145 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON .

    $default  reduce using rule 145 (comp_for_loop)


State 401

   15 IDs: . IDENTIFIER
   16    | . IDs COMMA IDENTIFIER
   39 comp_variable_declaration: . compIDs DECLARE comp_var_type
   40                          | . compARRAYIDs DECLARE comp_var_type
   41                          | . compPOINTERIDs DECLARE comp_var_type
   42                          | . KW_CONST compIDs ASSIGN operation DECLARE comp_var_type
   43                          | . KW_CONST compARRAYIDs ASSIGN operation DECLARE comp_var_type
   44                          | . KW_CONST compPOINTERIDs ASSIGN operation DECLARE comp_var_type
   45                          | . IDs DECLARE var_type
   46 compIDs: . HASHTAG IDENTIFIER
   47        | . compIDs COMMA HASHTAG IDENTIFIER
   48 compARRAYIDs: . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   49             | . compARRAYIDs COMMA HASHTAG IDENTIFIER LBRACKET operation RBRACKET
   50 compPOINTERIDs: . HASHTAG IDENTIFIER LBRACKET RBRACKET
   51               | . compPOINTERIDs COMMA HASHTAG IDENTIFIER LBRACKET RBRACKET
   72 function_call: . IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
   73 operation: . ID_access
   74          | . CONST_INT
   75          | . CONST_SCALAR
   76          | . function_call
   77          | . KW_TRUE
   78          | . KW_FALSE
   79          | . CONST_STRING
   80          | . LPARENTHESIS operation RPARENTHESIS
   81          | . LBRACKET operation RBRACKET
   82          | . operation POWER_OP operation
   83          | . PLUS_OP operation
   84          | . MINUS_OP operation
   85          | . operation MULTIPLY_OP operation
   86          | . operation DIVIDE_OP operation
   87          | . operation MODULO_OP operation
   88          | . operation PLUS_OP operation
   89          | . operation MINUS_OP operation
   90          | . operation EQ_SIGN operation
   91          | . operation NOTEQ_SIGN operation
   92          | . operation LT_SIGN operation
   93          | . operation LTEQ_SIGN operation
   94          | . operation GT_SIGN operation
   95          | . operation GTEQ_SIGN operation
   96          | . operation KW_OR operation
   97          | . operation KW_AND operation
   98          | . KW_NOT operation
   99 ID_access: . IDENTIFIER
  100          | . IDENTIFIER LBRACKET operation RBRACKET
  101          | . IDENTIFIER ACCESS IDENTIFIER
  102          | . IDENTIFIER ACCESS HASHTAG IDENTIFIER
  103          | . IDENTIFIER ACCESS function_call
  104          | . HASHTAG IDENTIFIER
  105          | . HASHTAG IDENTIFIER LBRACKET operation RBRACKET
  106          | . ID_access ACCESS IDENTIFIER
  107          | . ID_access ACCESS HASHTAG IDENTIFIER
  108          | . ID_access ACCESS IDENTIFIER LPARENTHESIS function_arguments RPARENTHESIS
  109 equation: . ID_access ASSIGN operation
  110         | . ID_access PLUS_ASSIGN operation
  111         | . ID_access MINUS_ASSIGN operation
  112         | . ID_access MULTIPLY_ASSIGN operation
  113         | . ID_access DIVIDE_ASSIGN operation
  114         | . ID_access MODULO_ASSIGN operation
  130 comp_loop_body: comp_loop_body . KW_BREAK SEMICOLON
  131               | comp_loop_body . KW_CONTINUE SEMICOLON
  132               | comp_loop_body . comp_variable_declaration SEMICOLON
  133               | comp_loop_body . equation SEMICOLON
  134               | comp_loop_body . operation SEMICOLON
  135               | comp_loop_body . KW_RETURN operation SEMICOLON
  136               | comp_loop_body . KW_RETURN SEMICOLON
  137               | comp_loop_body . comp_loop
  140 comp_if_statement: . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDIF SEMICOLON
  141                  | . KW_IF LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ELSE DECLARE loop_body KW_ENDIF
  144 comp_for_loop: . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  144              | KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body . KW_ENDFOR SEMICOLON
  145              | . KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON
  147 comp_while_loop: . KW_WHILE LPARENTHESIS operation RPARENTHESIS DECLARE comp_loop_body KW_ENDWHILE SEMICOLON
  151 comp_loop: . comp_if_statement
  152          | . comp_for_loop
  153          | . comp_while_loop

    KW_TRUE       shift, and go to state 38
    KW_FALSE      shift, and go to state 39
    KW_CONST      shift, and go to state 72
    KW_IF         shift, and go to state 285
    KW_FOR        shift, and go to state 286
    KW_ENDFOR     shift, and go to state 402
    KW_WHILE      shift, and go to state 287
    KW_BREAK      shift, and go to state 366
    KW_CONTINUE   shift, and go to state 367
    KW_NOT        shift, and go to state 40
    KW_RETURN     shift, and go to state 368
    IDENTIFIER    shift, and go to state 290
    CONST_INT     shift, and go to state 42
    CONST_SCALAR  shift, and go to state 43
    CONST_STRING  shift, and go to state 44
    PLUS_OP       shift, and go to state 45
    MINUS_OP      shift, and go to state 46
    LBRACKET      shift, and go to state 47
    LPARENTHESIS  shift, and go to state 49
    HASHTAG       shift, and go to state 291

    IDs                        go to state 76
    comp_variable_declaration  go to state 369
    compIDs                    go to state 79
    compARRAYIDs               go to state 80
    compPOINTERIDs             go to state 81
    function_call              go to state 51
    operation                  go to state 370
    ID_access                  go to state 202
    equation                   go to state 371
    comp_if_statement          go to state 295
    comp_for_loop              go to state 296
    comp_while_loop            go to state 297
    comp_loop                  go to state 372


State 402

  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR . SEMICOLON

    SEMICOLON  shift, and go to state 403


State 403

  144 comp_for_loop: KW_FOR IDENTIFIER KW_IN LBRACKET operation DECLARE operation DECLARE operation RBRACKET DECLARE comp_loop_body KW_ENDFOR SEMICOLON .

    $default  reduce using rule 144 (comp_for_loop)
